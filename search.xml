<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Files-delete</title>
    <url>/2021/01/11/Files-delete/</url>
    <content><![CDATA[<p>从JDK1.7开始，新增类<code>java.nio.file.Files</code>，其中所有方法均为static方法，用于操作文件或目录。在删除文件时，比起使用<code>File.delete()</code>，<code>Files.delete(Path path)</code>是一个更好的选择。</p>
<span id="more"></span>   

<h2 id="java-io-File-delete"><a href="#java-io-File-delete" class="headerlink" title="java.io.File.delete()"></a><code>java.io.File.delete()</code></h2><p>删除失败时，只会简单的返回false，并不会有任何报错信息</p>
<h2 id="java-nio-file-Files-delete-Path-path"><a href="#java-nio-file-Files-delete-Path-path" class="headerlink" title="java.nio.file.Files.delete(Path path)"></a><code>java.nio.file.Files.delete(Path path)</code></h2><p>删除失败时，会返回各种错误原因</p>
<ul>
<li>NoSuchFileException：文件不存在。</li>
<li>DirectoryNotEmptyException：文件是非空目录。</li>
<li>SecurityException：文件被占用等安全问题。</li>
<li>IOException：其他I/O操作</li>
</ul>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CleanUp</span><span class="params">(String loc)</span> </span>&#123;</span><br><span class="line">    Path path = Paths.get(loc);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Files.delete(path);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>IO</tag>
      </tags>
  </entry>
  <entry>
    <title>FreeMarker</title>
    <url>/2019/07/26/FreeMarker/</url>
    <content><![CDATA[<p><strong>FreeMarker</strong>是一款优秀的模板引擎，经常被使用在Spring MVC的<strong>View</strong>层，用于代替已经趋于淘汰的<strong>JSP</strong>，还可以在servlet容器外使用，Spring框架也对<strong>FreeMarker</strong>提供了很好的支持。</p>
<span id="more"></span>   

<blockquote>
<p>FreeMarker由<strong>模板</strong>和<strong>数据模型</strong>两部分组成</p>
</blockquote>
<h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><p>数据模型的基本模型是树状的，可以是<code>List&lt;JavaBean&gt;</code>，<code>JavaBean</code>，<code>Map&lt;String,String&gt;</code>等数据类型</p>
<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p>最简单的模板通常是普通的HTML文件，也可以是其他任何文本文件。表达式<code>$&#123;xxx&#125;</code>会被数据模型中的值代替，注释<code>&lt;#--and--&gt;</code>，此外还有很多指令，内建函数等内容</p>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>使用<strong>FTL标签</strong>来调用<strong>指令</strong></p>
<h3 id="if-指令"><a href="#if-指令" class="headerlink" title="if 指令"></a>if 指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;#if condition&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;#elseif condition2&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;#elseif condition3&gt;</span><br><span class="line">  ...</span><br><span class="line">...</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/#if&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>condition</code>,<code>condition2</code>等：将被计算成布尔值的表达式。</li>
<li><code>elseif</code>和<code>else</code>是可选的。</li>
</ul>
<h3 id="list-指令"><a href="#list-指令" class="headerlink" title="list 指令"></a>list 指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;#list sequence as item&gt;</span><br><span class="line">    Part repeated for each item</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">    Part executed when there are 0 items</span><br><span class="line">&lt;/#list&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>else</code>是可选的(2.3.23版本后)。 </li>
<li><code>sequence</code>：将我们想要迭代的项，算作是序列或集合的表达式</li>
<li><code>item</code>：循环变量的名称 (不是表达式) </li>
</ul>
<h3 id="include-指令"><a href="#include-指令" class="headerlink" title="include 指令"></a>include 指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;#include path&gt;</span><br><span class="line">或</span><br><span class="line">&lt;#include path options&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>path</code>：要包含文件的路径；</li>
<li><code>options</code>：一个或多个这样的选项：<code>encoding=encoding, parse=parse</code></li>
</ul>
<h2 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h2><ul>
<li>user?upper_case：给出user值的大写版本</li>
<li>user?cap_first：给出user的首字母大写版本</li>
<li>user?length：给出user值的长度</li>
<li>users?size：给出Lists的个数</li>
</ul>
<h2 id="处理不存在的变量"><a href="#处理不存在的变量" class="headerlink" title="处理不存在的变量"></a>处理不存在的变量</h2><p>FreeMarker不允许有空值</p>
<ul>
<li>设置为默认值：<code>$&#123;user!&quot;default&quot;&#125;</code></li>
<li>设置为空：<code>$&#123;user!&quot;&quot;&#125;或者$&#123;user!&#125;</code></li>
<li>判断变量是否存在<code>&lt;#if user??&gt;&lt;h1&gt;Welcome $&#123;user&#125;!&lt;/h1&gt;&lt;/#if&gt;</code></li>
</ul>
<h1 id="Spring-Boot集成"><a href="#Spring-Boot集成" class="headerlink" title="Spring Boot集成"></a>Spring Boot集成</h1><p>Spring Boot为<strong>FreeMarker</strong>提供了自动配置，除了FreeMarker，还有Groovy，Thymeleaf，Mustache三种模板引擎可以选择。</p>
<blockquote>
<p>If possible, JSP should be avoided</p>
</blockquote>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>在pom文件中加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="模板存放路径"><a href="#模板存放路径" class="headerlink" title="模板存放路径"></a>模板存放路径</h2><ul>
<li>默认路径：<code>src/main/resources/templates</code></li>
<li>自定义路径在配置文件设置：<code>spring.freemarker.template-loader-path</code></li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>通过Service层获取<strong>数据模型</strong>，<strong>模板</strong>存放在路径中，在Controller层中使用*<em>ModelAndView *</em>将模板和数据类型合并，例如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">list</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">	List&lt;ProductCategory&gt; categoryList = categoryService.findAll();</span><br><span class="line">	map.put(<span class="string">&quot;categoryList&quot;</span>, categoryList);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">&quot;list&quot;</span>, map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="主要参考资料"><a href="#主要参考资料" class="headerlink" title="主要参考资料"></a>主要参考资料</h1><ol>
<li><a href="http://freemarker.foofun.cn/index.html">中文官方文档</a>  ：   freemarker.foofun.cn</li>
<li><a href="https://docs.spring.io/spring/docs/5.1.8.RELEASE/spring-framework-reference/web.html#spring-web">Spring文档</a>  ：  docs.spring.io/spring/docs</li>
</ol>
]]></content>
      <tags>
        <tag>FreeMarker</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate-主键自增</title>
    <url>/2021/01/22/Hibernate-%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E/</url>
    <content><![CDATA[<p><code>javax.persistence</code>中<code>@GeneratedValue</code>注解为主键提供了指定的生成策略。在Oracle中使用<code>Sequence</code>序列实现自增，MySQL中使用<code>AUTO_INCREMENT</code>属性生成唯一的标识符。</p>
<span id="more"></span>   

<h2 id="Oracle中的序列"><a href="#Oracle中的序列" class="headerlink" title="Oracle中的序列"></a>Oracle中的序列</h2><p>使用序列自动生成主键值</p>
<h3 id="创建序列"><a href="#创建序列" class="headerlink" title="创建序列"></a>创建序列</h3><p>创建序列的语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SEQUENCE customers_seq</span><br><span class="line"><span class="keyword">START</span> <span class="keyword">WITH</span> <span class="number">1000</span></span><br><span class="line">INCREMENT <span class="keyword">BY</span> <span class="number">1</span></span><br><span class="line">NOCACHE</span><br><span class="line">NOCYCLE;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>CREATE SEQUENCE</code>：创建一个序列</li>
<li><code>START WITH</code>：指定第一个将要生成序列的值。对于递增序列，默认值是序列的最小值；对于递减序列，默认值是最大值。</li>
<li><code>INCREMENT BY</code>：指定序列号之间的间隔，可以是任何正整数或负整数，但不会是0。如果是正整数则为递增序列；如果是负整数则为递减序列。如果省略这个子句，则为默认值1。</li>
<li><code>NOCACHE</code>：不缓存</li>
<li><code>NOCYCLE</code>：不循环自增，在达到最大值或最小值后，不能再生成。</li>
</ul>
<h3 id="序列的伪列"><a href="#序列的伪列" class="headerlink" title="序列的伪列"></a>序列的伪列</h3><ul>
<li>CURRVAL：返回当前序列值</li>
<li>NEXTVAL：增加序列并返回下一个值</li>
</ul>
<p>使用时需要跟在特定序列名后：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">customers_seq.CURRVAL</span><br><span class="line">customers_seq.NEXTVAL</span><br></pre></td></tr></table></figure>
<p>使用示例如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T_CORE_CONFIG(ID, NAME, CATEGORY) <span class="keyword">VALUES</span> (customers_seq.NEXTVAL, <span class="string">&#x27;下拉列表配置&#x27;</span>, <span class="string">&#x27;select-config&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="查看所有序列"><a href="#查看所有序列" class="headerlink" title="查看所有序列"></a>查看所有序列</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_sequences;</span><br></pre></td></tr></table></figure>

<h3 id="删除序列"><a href="#删除序列" class="headerlink" title="删除序列"></a>删除序列</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP  SEQUENCE customers_seq;</span><br></pre></td></tr></table></figure>

<h3 id="对应实体类配置"><a href="#对应实体类配置" class="headerlink" title="对应实体类配置"></a>对应实体类配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity(name = &quot;Product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(</span></span><br><span class="line"><span class="meta">        strategy = GenerationType.SEQUENCE,</span></span><br><span class="line"><span class="meta">        generator = &quot;sequence-generator&quot;</span></span><br><span class="line"><span class="meta">	)</span></span><br><span class="line">    <span class="meta">@SequenceGenerator(</span></span><br><span class="line"><span class="meta">        name = &quot;sequence-generator&quot;,</span></span><br><span class="line"><span class="meta">        sequenceName = &quot;product_sequence&quot;,</span></span><br><span class="line"><span class="meta">        allocationSize = 1</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;product_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Mysql中的自增（AUTO-INCREMENT）"><a href="#Mysql中的自增（AUTO-INCREMENT）" class="headerlink" title="Mysql中的自增（AUTO_INCREMENT）"></a>Mysql中的自增（AUTO_INCREMENT）</h2><p>使用<code>AUTO_INCREMENT</code>属性为新增行生成唯一标识符。</p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>创建语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `mail_detail` (</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">    name <span class="type">CHAR</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">primary</span> key (`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><p>新增语句如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> T_EDF_TASK modify taskId <span class="type">int</span>(<span class="number">19</span>) <span class="keyword">not</span> <span class="keyword">null</span> auto_increment;</span><br></pre></td></tr></table></figure>

<h3 id="对应实体类配置-1"><a href="#对应实体类配置-1" class="headerlink" title="对应实体类配置"></a>对应实体类配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity(name = &quot;Product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;product_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://docs.oracle.com/cd/B28359_01/server.111/b28286/statements_6015.htm#SQLRF01314">docs.oracle.com</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/example-auto-increment.html">dev.mysql.com</a></li>
<li><a href="https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#identifiers">docs.jboss.org</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate-对象状态</title>
    <url>/2019/08/09/Hibernate-%E5%AF%B9%E8%B1%A1%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<p>Hibernate中的实体类对象有四种不同的状态，transient（瞬时状态），managed/persistent（持久状态），detached（游离状态），removed（删除状态）。</p>
<span id="more"></span>   

<p>处理持久数据的内容叫做<strong>持久化上下文</strong>。对于JPA，持久化上下文为<code>org.hibernate.Session</code>；对于Hibernate API，持久化上下文为<code>javax.persistence.EntityManager</code></p>
<h2 id="transient（瞬时状态）"><a href="#transient（瞬时状态）" class="headerlink" title="transient（瞬时状态）"></a>transient（瞬时状态）</h2><p>对象刚被创建，未与持久化上下文相关联，数据库中不存在，存在于堆内存中。</p>
<blockquote>
<p>Transient objects are independent of Hibernate</p>
</blockquote>
<h2 id="managed-persistent（持久状态）"><a href="#managed-persistent（持久状态）" class="headerlink" title="managed/persistent（持久状态）"></a>managed/persistent（持久状态）</h2><p>对象拥有持久化标识，与持久化上下文相关联，可能存在于数据库中，也可能不存在。</p>
<blockquote>
<p>Persistent objects are maintained by Hibernate</p>
</blockquote>
<h2 id="detached（游离状态）"><a href="#detached（游离状态）" class="headerlink" title="detached（游离状态）"></a>detached（游离状态）</h2><p>对象拥有持久化标识，但不再与持久化上下文相关联</p>
<blockquote>
<p>Detached objects exist in the database but are not maintained by Hibernate</p>
</blockquote>
<h2 id="removed（删除状态）"><a href="#removed（删除状态）" class="headerlink" title="removed（删除状态）"></a>removed（删除状态）</h2><p>对象拥有持久化标识，与持久化上下文相关联，但计划从数据库中删除</p>
<h2 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h2><p>对象的声明周期，及其转化，可参考下图</p>
<p><img src="/img/Hibernate-%E5%AF%B9%E8%B1%A1%E7%8A%B6%E6%80%81.png" alt=""></p>
<h3 id="新建瞬时状态对象"><a href="#新建瞬时状态对象" class="headerlink" title="新建瞬时状态对象"></a>新建瞬时状态对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TGroup tGroup = <span class="keyword">new</span> TGroup();</span><br></pre></td></tr></table></figure>

<h3 id="瞬时状态转化为持久状态"><a href="#瞬时状态转化为持久状态" class="headerlink" title="瞬时状态转化为持久状态"></a>瞬时状态转化为持久状态</h3><ul>
<li>JPA：<code>entityManager.persist(tGroup);</code></li>
<li>Hibernate API：<code>session.save(tGroup);</code></li>
</ul>
<h3 id="获取已经初始化的实体对象，即持久状态"><a href="#获取已经初始化的实体对象，即持久状态" class="headerlink" title="获取已经初始化的实体对象，即持久状态"></a>获取已经初始化的实体对象，即持久状态</h3><ul>
<li>JPA：<code>Person person = entityManager.find(Person.class, personId);</code></li>
<li>Hibernate API：<code>Person person = session.get(Person.class, personId);</code></li>
<li><code>Person person = session.byId(Person.class).load(personId);</code></li>
<li><code>Optional&lt;Person&gt; optionalPerson = session.byId(Person.class).loadOptional(personId);</code></li>
</ul>
<h3 id="持久状态转化为游离状态"><a href="#持久状态转化为游离状态" class="headerlink" title="持久状态转化为游离状态"></a>持久状态转化为游离状态</h3><ul>
<li>持久化上下文关闭，与之关联的所有对象变为游离状态<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.close();</span><br></pre></td></tr></table></figure></li>
<li>清除持久化上下文，与之关联的所有对象变为游离状态<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.clear();</span><br></pre></td></tr></table></figure></li>
<li>从上下文中去除一个特定实体，使之变为游离状态<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.evict(tGroup);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="游离状态回复持久状态"><a href="#游离状态回复持久状态" class="headerlink" title="游离状态回复持久状态"></a>游离状态回复持久状态</h3><p>将游离状态的对象再次与当前的持久化上下文关联</p>
<ul>
<li><code>session.lock(tGroup, LockMode.NONE);</code></li>
<li><code>session.saveOrUpdate(tGroup);</code></li>
<li><code>session.update(tGroup);</code></li>
</ul>
<h3 id="删除对象"><a href="#删除对象" class="headerlink" title="删除对象"></a>删除对象</h3><p>对于JPA来说，只能删除持久状态对象；对于Hibernate，可以删除持久状态和游离状态的对象。</p>
<ul>
<li>JPA：<code>entityManager.remove(tGroup);</code></li>
<li>Hibernate API：<code>session.delete(tGroup);</code></li>
</ul>
<p>在提交事务时，会将数据库中对应数据删除。</p>
<h2 id="主要参考资料"><a href="#主要参考资料" class="headerlink" title="主要参考资料"></a>主要参考资料</h2><ul>
<li><a href="https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#pc">hibernate官方参考手册（5.4）</a></li>
<li><a href="https://www.wangzhenhua.rocks/zh-hans/hibernate/entity-state-digram">图片来源</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>querydsl-学习笔记</title>
    <url>/2018/10/11/JPAQuery-learning/</url>
    <content><![CDATA[<p>Querydsl是一个类似于SQL的查询框架，可以使用流畅的api调用，基于简单安全等特性，和在现实工作中的需要，所以我们需要对它进行学习。</p>
<span id="more"></span>   

<h2 id="官网介绍"><a href="#官网介绍" class="headerlink" title="官网介绍"></a>官网介绍</h2><p><a href="http://www.querydsl.com/">querydsl官网链接：www.querydsl.com</a><br>官网是我们学习它最重要的途径和最可靠的数据来源，一切都需要基于此展开。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Unified Queries for Java.Querydsl is compact, safe and easy to learn.</span><br></pre></td></tr></table></figure>
<p>其中最显眼的一行字，“专为java设计的统一的查询，Querydsl 是简洁，安全，且易于学习的。”</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>使用需要了解** EntityManager **<br>定义：EntityManager是JPA中用于增删改查的接口，连接java对象和数据库。<br>实现方法：容器托管的EntityManager对象和应用托管的EntityManager对象<br>增：em.persist(Object entity)<br>删：em.remove(Object entity)<br>改：em.merge(T entity)<br>查：em.find(Class<T> entityClass, Object primaryKey)</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>目前最新版本为4.2.1，在本机工作环境中正在使用使用2.9.0，有两个jar包，** querydsl-jpa-x.x.x.jar <strong>和</strong> querydsl-core-x.x.x.jar **<br>进入官网下载对应版本的apidocs，<a href="http://www.querydsl.com/static/querydsl/2.9.0/apidocs">api地址</a>  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://www.querydsl.com/static/querydsl/2.9.0/apidocs</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>querydsl</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate-映射</title>
    <url>/2019/07/22/Hibernate-%E6%98%A0%E5%B0%84/</url>
    <content><![CDATA[<p>Hibernate映射是Hibernate与数据库进行持久化的桥梁，有两种方式配置，<strong>hbm.xml Mapping</strong>和<strong>Annotation Mappings</strong>，本文将使用两种方式进行配置，并加以比较。</p>
<span id="more"></span>   

<h2 id="hbm-xml-Mapping"><a href="#hbm-xml-Mapping" class="headerlink" title="hbm.xml Mapping"></a>hbm.xml Mapping</h2><p>基于xml配置映射文件是hibernate的传统方法，用来映射数据库表和实体类<br>实体类<strong>TGroup</strong>如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TGroup</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String groupName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应映射文件<strong>TGroup.hbm.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">hibernate-mapping</span> <span class="meta-keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">&quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">    <span class="meta-string">&quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;com.TGroup&quot;</span> <span class="attr">table</span>=<span class="string">&quot;t_group&quot;</span> <span class="attr">schema</span>=<span class="string">&quot;management&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;groupName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;group_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>此外还需要在<strong>sessionFactory</strong>的配置bean中添加<strong>映射文件</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mappingResources&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>TGroup.hbm.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Annotation-Mappings"><a href="#Annotation-Mappings" class="headerlink" title="Annotation Mappings"></a>Annotation Mappings</h2><p>基于注解的映射与实体类相结合，而不是一个分离的映射文件<br>实体类<strong>TGroup</strong>如下，</p>
<ul>
<li>@Table：如果表名与实体类名相同，则可以省略。</li>
<li>@Column：如果字段名与列名相同，则可以省略。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name=&quot;t_group&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TGroup</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name=&quot;group_name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String groupName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<strong>sessionFactory</strong>的配置bean中添加<strong>注解类扫描</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;annotatedClasses&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.model.TGroup<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果映射类数量多，也可以在<strong>sessionFactory</strong>的配置bean中添加<strong>包扫描</strong>，代替注解类扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;PackagesToScan&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.model<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>基于hbm.xml配置和基于注解配置作用相同，都可以正常使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> SessionFactory sessionFactory;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1. 得到session对象</span></span><br><span class="line">    Session session = sessionFactory.openSession();</span><br><span class="line">    <span class="comment">//2. 开启事务</span></span><br><span class="line">    Transaction transaction = session.beginTransaction();</span><br><span class="line">    <span class="comment">//3. 实例化对象</span></span><br><span class="line">    TGroup tGroup = <span class="keyword">new</span> TGroup();</span><br><span class="line">    tGroup.setId(<span class="number">0</span>);</span><br><span class="line">    tGroup.setGroupName(<span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">    <span class="comment">//4. 保存</span></span><br><span class="line">    session.save(tGroup);</span><br><span class="line">    <span class="comment">//5. 事务提交</span></span><br><span class="line">    transaction.commit();;</span><br><span class="line">    <span class="comment">//6. session关闭</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>基于注解的配置应该是更好的选择</p>
<ul>
<li>代码量少，无需hbm.xml配置，可以使程序脱离<strong>xml</strong>配置文件</li>
<li><strong>可读性</strong>强，更方便使用和维护</li>
<li>可移植性强，hbm.xml为<strong>hibernate</strong>所特有，注解配置则基于<strong>javax.persistence</strong></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-内存结构</title>
    <url>/2019/06/14/JVM-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>以Java8官方文档为例，初步认识JVM的<code>Run-Time Data Areas</code>运行时数据区（运行时内存结构），可以分为5个部分，分别是PC Register（PC 寄存器），JVM Stacks（栈），Heap（堆），Method Area（方法区） ，Native Method Stacks（本地方法栈）</p>
<span id="more"></span>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>按生命周期划分，这五大区域可以分为两部分。一些数据区在JVM启动时创建，JVM关闭时销毁，叫做<strong>线程共享区</strong>；一些数据区随线程的创建而创建，线程的销毁而销毁，叫做<strong>线程私有区</strong>。主要分类如下</p>
<p><img src="/img/JVM-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84.png" alt=""> </p>
<h3 id="PC-寄存器"><a href="#PC-寄存器" class="headerlink" title="PC 寄存器"></a>PC 寄存器</h3><ul>
<li>线程私有区</li>
<li>别名程序计数器</li>
<li>保存当前线程执行的行号指示器（内存地址）</li>
<li>保证线程切换后能恢复到正确的执行位置</li>
</ul>
<h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><ul>
<li>线程私有区</li>
<li>存储的基本单位是栈帧</li>
<li>在方法调用和返回时会对应的压栈或弹栈</li>
</ul>
<h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><ul>
<li>线程共享区</li>
<li>存储<strong>对象实例</strong>和<strong>数组</strong>，不能显式地释放，需要被GC回收。</li>
<li>可以是固定的大小，也可以扩大和缩小（当需要扩大又没有足够的空间时，会抛出OutOfMemoryError）</li>
<li>堆空间不需要连续</li>
</ul>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><ul>
<li>线程共享区</li>
<li>存储每个类的结构，如<strong>运行时常量池</strong></li>
<li>存放<strong>常量</strong>和<strong>静态变量</strong>等信息。</li>
<li>当用户设定的容量不满足程序需求的容量的时候，会抛出OutOfMemoryError</li>
</ul>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><ul>
<li>线程私有区</li>
<li>用于支持Native方法（Java语言以外编写的方法）的执行</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.4">Java8官方文档</a></li>
<li><a href="https://www.hollischuang.com/archives/2509">hollischuang.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-整数反转</title>
    <url>/2019/07/05/LeetCode-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
    <content><![CDATA[<p>LeetCode和牛客网是两个比较推荐的刷题网站</p>
<span id="more"></span>

<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>主要考虑<strong>int</strong>取值范围，编码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> pop = x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(num &gt; Integer.MAX_VALUE/<span class="number">10</span> || num == Integer.MAX_VALUE/<span class="number">10</span> &amp;&amp; pop &gt; <span class="number">7</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(num &lt; Integer.MIN_VALUE/<span class="number">10</span> || num == Integer.MIN_VALUE/<span class="number">10</span> &amp;&amp; pop &lt; -<span class="number">8</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            num = num * <span class="number">10</span> + pop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="一些基本数据类型长度及取值范围"><a href="#一些基本数据类型长度及取值范围" class="headerlink" title="一些基本数据类型长度及取值范围"></a>一些基本数据类型长度及取值范围</h3><table>
<thead>
<tr>
<th>类型</th>
<th>长度</th>
<th>最小值</th>
<th>最大值</th>
</tr>
</thead>
<tbody><tr>
<td>byte</td>
<td>8bit</td>
<td>-128</td>
<td>127</td>
</tr>
<tr>
<td>short</td>
<td>16bit</td>
<td>-32768</td>
<td>32767</td>
</tr>
<tr>
<td>int</td>
<td>32bit</td>
<td>-2147483648</td>
<td>2147483647</td>
</tr>
<tr>
<td>long</td>
<td>64bit</td>
<td>-9223372036854775808</td>
<td>9223372036854775807</td>
</tr>
<tr>
<td>char</td>
<td>16bit</td>
<td>0</td>
<td>65535</td>
</tr>
</tbody></table>
<h3 id="以byte为例，解释取值范围"><a href="#以byte为例，解释取值范围" class="headerlink" title="以byte为例，解释取值范围"></a>以byte为例，解释取值范围</h3><p>数值在Java中是以<strong>补码</strong>的方式存储的，第一个数字是符号位，0表示正数，1表示负数，正数原码、反码、补码<strong>相同</strong>；负数反码，符号位<strong>不变</strong>，其他位<strong>取反</strong>；负数补码，反码加1。  </p>
<ul>
<li>最大值01111111，即2的7次方-1，表示127</li>
<li>中间值00000000,表示0</li>
<li>补码11111111，对应原码10000001，表示-1</li>
<li>补码10000001，对应原码11111111，表示-127</li>
<li>补码10000000，表示-128，没有原码和反码</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://leetcode-cn.com/problems/reverse-integer/">整数反转</a></li>
<li><a href="https://leetcode-cn.com/articles/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%9C%B0%E4%BD%BF%E7%94%A8-leetcode/">如何高效地使用 LeetCode</a></li>
<li><a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-4.html#jls-4.2">Java8规范</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-贪心和动态规划</title>
    <url>/2021/02/20/LeetCode-%E8%B4%AA%E5%BF%83%E5%92%8C%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<p>贪心算法在每一次选择中都选择当下最优解，但只会考虑到眼前的情况，并不一定会得到最优解。</p>
<span id="more"></span>

<h2 id="经典例题"><a href="#经典例题" class="headerlink" title="经典例题"></a>经典例题</h2><p>有1、5、10、20、50面额的货币，使用尽量少的货币凑出66元。贪心算法50+10+5+1,4张为最优解。<br>如果面额为1、5、11，使用尽量少的货币凑出15元。贪心算法11+1+1+1+1，使用了5张，但3张为最优解。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f(15)=f(14)+1=5</span><br><span class="line">f(15)=f(10)+1=3</span><br><span class="line">f(15)=f(4)+1=5</span><br><span class="line"></span><br><span class="line">f(n)=min&#123;f(n-1),f(n-5),f(n-11)&#125;+1</span><br></pre></td></tr></table></figure>
<p>这就是动态规划算法，将一个大问题分为几个小问题，分别求小问题的解，即可求解出</p>
<h2 id="leetcode练习"><a href="#leetcode练习" class="headerlink" title="leetcode练习"></a>leetcode练习</h2><p>给定一个三角形 triangle ，找出自顶向下的最小路径和。</p>
<p>每一步只能移动到下一行中相邻的结点上。相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。也就是说，如果正位于当前行的下标 i ，那么下一步可以移动到下一行的下标 i 或 i + 1 。</p>
<h3 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h3><p>为每一步都选择最小的数，结果并不一定正确。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    result += triangle.get(<span class="number">0</span>).get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; triangle.size() ; i++)&#123;</span><br><span class="line">        List&lt;Integer&gt; list = triangle.get(i);</span><br><span class="line">        <span class="keyword">if</span>(list.get(index) &gt; list.get(index + <span class="number">1</span>))&#123;</span><br><span class="line">            index += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result += list.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h3><p>从上往下，求出到每个点的最短距离。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minimumTotal</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; triangle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = triangle.size();</span><br><span class="line">    <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[m][m];</span><br><span class="line">    arr[<span class="number">0</span>][<span class="number">0</span>] = triangle.get(<span class="number">0</span>).get(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; m ; i++)&#123;</span><br><span class="line">        arr[i][<span class="number">0</span>] = triangle.get(i).get(<span class="number">0</span>) + arr[i-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; m ; i++)&#123;</span><br><span class="line">        arr[i][i] = triangle.get(i).get(i) + arr[i-<span class="number">1</span>][i-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span> ; i &lt; m ; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span> ; j &lt; i ; j++)&#123;</span><br><span class="line">            arr[i][j] = Math.min(arr[i-<span class="number">1</span>][j-<span class="number">1</span>],arr[i-<span class="number">1</span>][j]) + triangle.get(i).get(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> result = arr[m-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= m-<span class="number">1</span> ; i++)&#123;</span><br><span class="line">        result = Math.min(result,arr[m-<span class="number">1</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-JDK安装配置</title>
    <url>/2019/09/06/Linux-JDK%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>linux系统下JDK的安装配置。</p>
<span id="more"></span>

<h3 id="选择合适的版本"><a href="#选择合适的版本" class="headerlink" title="选择合适的版本"></a>选择合适的版本</h3><p><a href="https://www.oracle.com/cn/java/technologies/javase/javase-jdk8-downloads.html">Oracle官网</a><br>选择<code>Linux x64    186.06 MB    jdk-8u221-linux-x64.tar.gz</code>，下载到本地。</p>
<h3 id="上传到服务器"><a href="#上传到服务器" class="headerlink" title="上传到服务器"></a>上传到服务器</h3><ul>
<li>新建文件夹 <code>mkdir /usr/local/java/</code></li>
<li>上传至该目录</li>
</ul>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>至目录下执行解压命令<code>tar zxvf /usr/local/java/jdk-8u221-linux-x64.tar.gz</code></p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>编辑<code>/etc/profile</code>文件，添加如下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Java Env</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.8.0_221（文件路径）</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>
<p>使环境变量生效：<code>source /etc/profile</code></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试是否正确安装配置<code>java -version</code></p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-SMTP</title>
    <url>/2019/09/06/Linux-SMTP/</url>
    <content><![CDATA[<p>为了避免大量垃圾邮件泛滥，许多运营商默认屏蔽了<strong>SMTP功能</strong>，不只是<strong>25端口</strong>，所有SMTP出站包都会被<strong>ban掉</strong>。本文记录<strong>vultr解封方法</strong></p>
<span id="more"></span>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>使用telnet命令测试是否被ban</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet smtp.163.com 25</span><br></pre></td></tr></table></figure>
<p>会显示<code>Trying 123.126.97.4...</code>，无法连通。</p>
<h3 id="解封方法"><a href="#解封方法" class="headerlink" title="解封方法"></a>解封方法</h3><p>向管理员提交Tickets，比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi,</span><br><span class="line"></span><br><span class="line">My SMTP port seems to be blocked.</span><br><span class="line">Could you please help me unlock it?</span><br><span class="line"></span><br><span class="line">Thanks!</span><br></pre></td></tr></table></figure>


<p>收到回复的主要内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Please reply to this ticket with the following information:</span><br><span class="line">1. The business name and organization URL(s) under which you offer services.</span><br><span class="line">2. Describe, in as much detail as possible, the nature of the emails you intend to send.</span><br><span class="line">3. The volume of email that you plan to deliver on a daily/monthly basis.</span><br></pre></td></tr></table></figure>

<p>再次reply</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.My personal blog yuangaopeng.com</span><br><span class="line">2.the emails i intend to send is XXXXX</span><br><span class="line">3.The volume would be under XXX emails/month</span><br></pre></td></tr></table></figure>
<p>然后收到回复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">We have removed the default SMTP block on your account</span><br></pre></td></tr></table></figure>

<h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><p>需要重启服务器使SMTP生效</p>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>使用telnet命令测试是否被ban</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet smtp.163.com 25</span><br></pre></td></tr></table></figure>

<p>此时会有如下显示，成功解封</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Connected to smtp.163.com.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br></pre></td></tr></table></figure>

<h3 id="465端口"><a href="#465端口" class="headerlink" title="465端口"></a>465端口</h3><p>出于安全考虑，阿里云也封禁了25端口，并提供了建议<strong>使用第三方邮件服务商提供的465端口</strong>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># springboot邮箱配置</span><br><span class="line">spring:</span><br><span class="line">  mail:</span><br><span class="line">    host: smtp.163.com</span><br><span class="line">    password: xxxxxxx</span><br><span class="line">    username: xxxxx@163.com</span><br><span class="line">    properties:</span><br><span class="line">      mail:</span><br><span class="line">        smtp:</span><br><span class="line">          auth: true</span><br><span class="line">          socketFactory:</span><br><span class="line">            class: javax.net.ssl.SSLSocketFactory</span><br><span class="line">            port: 465</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>linux</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-常用命令</title>
    <url>/2019/08/05/Linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>因<strong>linux</strong>强大的性能和稳定性，绝大多数系统都会部署在linux上，而操作linux系统就需要使用命令。本文列出一些在工作中用到的linux命令，用作参考查阅。</p>
<span id="more"></span>

<h2 id="日志文本"><a href="#日志文本" class="headerlink" title="日志文本"></a>日志文本</h2><h3 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h3><p>命令：<code>vi example.txt</code><br>功能：新建、查看和修改文档</p>
<h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>命令：<code>head -n 100 example.log</code><br>功能：查看日志头100行</p>
<h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>命令：<code>tail -n 100 example.log</code><br>功能：查看日志尾100行<br>参数：-f：动态查看日志</p>
<h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>命令：<code>less example.log</code><br>功能：查看一页日志<br>扩展：g移动到第一行，G移动到最后一行，u向前滚动半页，d向后滚动半页，/向下搜索字符串，?向上搜索字符串，q退出<br>乱码：如果中文乱码使用file命令查看文件编码，如果格式为<code>utf-8</code>，使用<code>export LESSCHARSET=utf-8</code>，如果格式为<code>iso8859</code>，使用<code>export LESSCHARSET=iso8859</code>（仅限于本次登陆操作）</p>
<h2 id="目录、文件"><a href="#目录、文件" class="headerlink" title="目录、文件"></a>目录、文件</h2><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>命令：<code>pwd</code><br>功能：当前工作目录</p>
<h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>命令：<code>ls</code><br>功能：显示当前目录下的所有文件和目录<br>参数：-a：显示隐藏内容，-l：显示详细内容</p>
<h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>命令：<code>mkdir newdir</code><br>功能：创建目录newdir</p>
<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>命令：<code>cp source dest</code><br>功能：复制单个文件<br>命令：<code>cp -r sourcedir destdir</code><br>功能：复制目录及目录中所有内容<br>命令：<code>cp -p source dest</code><br>功能：复制且保留文件属性（如修改时间）</p>
<h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>命令：<code>mv oldName newName</code><br>功能：目录或文件重命名<br>命令：<code>mv /temp/movefile /targetFolder</code><br>功能：目录或文件移动</p>
<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>命令：<code>rm -f file</code><br>功能：强制删除文件<br>命令：<code>rm -rf dir</code><br>功能：强制删除目录及目录中所有内容</p>
<h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p>命令：<code>chmod 777 file.java</code><br>功能：修改文件权限</p>
<h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><p>命令：<code>tar -cvf fileName.tar DirName</code><br>功能：打包<strong>生成<code>*.tar</code>文件</strong><br>命令：<code>tar -xvf fileName.tar</code><br>功能：<strong>还原<code>*.tar</code>文件</strong><br>命令：<code>tar -zcvf fileName.tar DirName</code><br>功能：<code>gzip</code>压缩后,打包<strong>生成<code>*.tar.gz</code>文件</strong><br>命令：<code>tar -zxvf fileName.tar</code><br>功能：<strong>解压<code>*.tar.gz</code>文件</strong></p>
<h2 id="网络、端口、进程"><a href="#网络、端口、进程" class="headerlink" title="网络、端口、进程"></a>网络、端口、进程</h2><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>命令：<code>ping yuangaopeng.com</code><br>功能：测试本机与目标主机连通性</p>
<h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p>命令：<code>netstat -lnput|grep 8080</code><br>功能：查看端口8080的占用情况（包括PID和程序名）</p>
<h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>命令：<code>ps aux</code><br>功能：查看所有进程<br>命令：<code>ps aux|grep sshd</code><br>功能：查看sshd进程</p>
<h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><p>命令：<code>kill 19979</code><br>功能：杀死PID为19979的进程</p>
<h3 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h3><p>命令：<code>nohup java -jar xxx.jar &amp;</code><br>功能：后台启动<code>xxx.jar</code>，不会随窗口关闭，输出日志到<code>nohup.out</code>文件<br>命令：<code>nohup java -jar xxx.jar &gt;/dev/null 2&gt;&amp;1 &amp;</code><br>功能：后台启动<code>xxx.jar</code>，不会随窗口关闭，不输出日志</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok</title>
    <url>/2019/07/18/Lombok/</url>
    <content><![CDATA[<p>Lombok是一个实用的Java类库，使用简单的注解<strong>减少重复代码</strong>，比如仅需一个注解，就省去了setter、getter、toString等方法的编写，提高代码<strong>可读性</strong>和<strong>开发效率</strong>。</p>
<span id="more"></span>  

<h2 id="官网介绍"><a href="#官网介绍" class="headerlink" title="官网介绍"></a>官网介绍</h2><p><a href="www.projectlombok.org">官网</a>介绍如下</p>
<blockquote>
<p>Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.</p>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>结合<strong>IDEA</strong>开发工具，使用<strong>Lombok</strong>，简化<strong>实体类</strong></p>
<h3 id="maven新增依赖"><a href="#maven新增依赖" class="headerlink" title="maven新增依赖"></a>maven新增依赖</h3><p>在项目打包时无需打入，所以scope范围为<strong>provided</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="IDEA插件"><a href="#IDEA插件" class="headerlink" title="IDEA插件"></a>IDEA插件</h3><p>编译器IDEA安装一个lombok插件，可以更方便使用注解类中的方法</p>
<h2 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h2><p>POJO类，使用<strong>@Data</strong>后，可以省去setter、getter、toString、equals、hashCode、canEqual方法的编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TGroup</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String groupName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Slf4j"><a href="#Slf4j" class="headerlink" title="@Slf4j"></a>@Slf4j</h2><p>需要打印日志的类，使用<strong>@Slf4j</strong>后，可以很方便打印日志</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Info&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-linux</title>
    <url>/2020/07/05/MySQL-linux/</url>
    <content><![CDATA[<p>在CentOS7为例，安装配置mysql数据库</p>
<span id="more"></span>  

<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>命令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo rpm -Uvh http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>命令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install mysql mysql-server mysql-libs mysql-server</span><br></pre></td></tr></table></figure>

<h2 id="服务命令"><a href="#服务命令" class="headerlink" title="服务命令"></a>服务命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 开启服务</span><br><span class="line">systemctl start mysqld</span><br><span class="line"># 关闭服务</span><br><span class="line">systemctl enable mysqld</span><br><span class="line"># 重启服务</span><br><span class="line">systemctl restart mysqld</span><br><span class="line"># 查看服务状态</span><br><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure>

<h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 设置密码</span><br><span class="line">/usr/bin/mysqladmin -u root password &#x27;12345678&#x27;</span><br><span class="line"># 登陆</span><br><span class="line">mysql –uroot -p12345678</span><br></pre></td></tr></table></figure>

<h2 id="修改编码类型"><a href="#修改编码类型" class="headerlink" title="修改编码类型"></a>修改编码类型</h2><p>如果数据库中存储中文，需要修改编码类型</p>
<h3 id="查看现在编码类型"><a href="#查看现在编码类型" class="headerlink" title="查看现在编码类型"></a>查看现在编码类型</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;character_set%&#x27;;</span><br></pre></td></tr></table></figure>
<p><img src="/img/mysql/mysql-1.png" alt="">  </p>
<h3 id="在-etc-my-cnf文件中，添加以下配置"><a href="#在-etc-my-cnf文件中，添加以下配置" class="headerlink" title="在/etc/my.cnf文件中，添加以下配置"></a>在/etc/my.cnf文件中，添加以下配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line">init_connect=&#x27;SET NAMES utf8&#x27;</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>

<h3 id="生效"><a href="#生效" class="headerlink" title="生效"></a>生效</h3><p>重启服务后生效<br><img src="/img/mysql/mysql-2.png" alt="">  </p>
<h2 id="创建用户并赋权"><a href="#创建用户并赋权" class="headerlink" title="创建用户并赋权"></a>创建用户并赋权</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE USER &#x27;user_name&#x27;@&#x27;host&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class="line">GRANT privileges ON databasename.tablename TO &#x27;username&#x27;@&#x27;host&#x27;;</span><br></pre></td></tr></table></figure>
<ul>
<li>host：允许登录地址（本机localhost、所有ip’%’）</li>
</ul>
<p>远程登录成功，本地登录失败时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop user &#x27;&#x27;@localhost;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h3 id="端口开放"><a href="#端口开放" class="headerlink" title="端口开放"></a>端口开放</h3><p>telnet测试3306端口是否开放<br>阿里云需要额外在<strong>控制台-安全组规则配置</strong><br><img src="/img/mysql/aliyun.png" alt="">  </p>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-timestamp</title>
    <url>/2019/07/24/MySQL-timestamp/</url>
    <content><![CDATA[<p>在数据库数据发生修改的时候，可以设置<strong>timestamp</strong>和<strong>datetime</strong>自动初始化和更新到当前时间，以时间戳timestamp为例，进行测试。</p>
<span id="more"></span>  

<h2 id="版本和时区"><a href="#版本和时区" class="headerlink" title="版本和时区"></a>版本和时区</h2><ul>
<li>MySQL版本：8.0.13</li>
<li>时区：serverTimezone=Asia/Shanghai</li>
</ul>
<h2 id="三种数据类型"><a href="#三种数据类型" class="headerlink" title="三种数据类型"></a>三种数据类型</h2><p>MySQL主要有三种表示日期时间的数据类型，<strong>date</strong>、<strong>datetime</strong>和<strong>timestamp</strong></p>
<ul>
<li><strong>date</strong>精确到天，格式<code>YYYY-MM-DD</code>,datetime和timestamp精确到秒，格式<code>YYYY-MM-DD HH:MM:SS</code></li>
<li><strong>timestamp</strong>储存占用4个字节，<strong>datetime</strong>储存占用8个字节</li>
<li><strong>timestamp</strong>可表示范围:<code>1970-01-01 00:00:00 ~ 2038-01-09 03:14:07</code>，<strong>datetime</strong>可表示范围<code>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</code></li>
</ul>
<p>总结，<strong>timestamp</strong>更轻量，索引速度更快，可以满足大部分场景，推荐使用</p>
<h2 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> `product_category` (</span><br><span class="line">    `category_id` <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> auto_increment,</span><br><span class="line">    `category_name` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;类目名字&#x27;</span>,</span><br><span class="line">    `category_type` <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;类目编号&#x27;</span>,</span><br><span class="line">    `create_time` <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="built_in">current_timestamp</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    `update_time` <span class="type">timestamp</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="built_in">current_timestamp</span> <span class="keyword">on</span> update <span class="built_in">current_timestamp</span> comment <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">primary</span> key (`category_id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>create_time</code>和<code>update_time</code>在新增数据时初始化为当前时间</li>
<li><code>update_time</code>在修改数据时更新为当前时间</li>
</ul>
<h2 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h2><p>新建以下实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductCategory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">private</span> Integer categoryId;</span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    <span class="keyword">private</span> Integer categoryType;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ProductCategoryRepository继承JpaRepository，@Service注入CategoryServiceImpl<br>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ProductCategory productCategory = <span class="keyword">new</span> ProductCategory();</span><br><span class="line">productCategory.setCategoryName(<span class="string">&quot;classical&quot;</span>);</span><br><span class="line">productCategory.setCategoryType(<span class="number">10</span>);</span><br><span class="line">ProductCategory result = categoryService.save(productCategory);</span><br><span class="line">Assert.assertNotNull(result);</span><br></pre></td></tr></table></figure>
<p>会抛出异常</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ERROR <span class="number">1048</span> (<span class="number">23000</span>): <span class="keyword">Column</span> <span class="string">&#x27;create_time&#x27;</span> cannot be <span class="keyword">null</span></span><br></pre></td></tr></table></figure>

<h2 id="异常解决"><a href="#异常解决" class="headerlink" title="异常解决"></a>异常解决</h2><p>以上代码执行sql相当于</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_category (category_name,category_type,create_time,updateTime) <span class="keyword">VALUES</span> (<span class="string">&#x27;classical&#x27;</span>,<span class="number">10</span>,<span class="keyword">null</span>,<span class="keyword">null</span>)</span><br></pre></td></tr></table></figure>
<p>在数据库中执行sql，产生相同的结果<code>ERROR 1048 (23000)</code></p>
<h3 id="第一种解决方法，实体类删除字段"><a href="#第一种解决方法，实体类删除字段" class="headerlink" title="第一种解决方法，实体类删除字段"></a>第一种解决方法，实体类删除字段</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></table></figure>
<p>对应sql会更改为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product_category (category_name,category_type) <span class="keyword">VALUES</span> (<span class="string">&#x27;classical&#x27;</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>此时可以正常插入，但使用更改后的实体类作为模板，便无法查询这两个时间字段，不推荐。</p>
<h3 id="第二种解决方法，执行以下语句"><a href="#第二种解决方法，执行以下语句" class="headerlink" title="第二种解决方法，执行以下语句"></a>第二种解决方法，执行以下语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> explicit_defaults_for_timestamp<span class="operator">=</span><span class="string">&#x27;OFF&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>解释：MySQL中的系统变量<code>explicit_defaults_for_timestamp</code>，默认值是<code>ON</code>，即在新增数据(insert into)和修改数据(update)时，timestamp类型的字段不可以显示设置为<strong>null</strong>，修改值为<code>OFF</code>，问题解决，但不是标准sql，不推荐。</p>
<h3 id="第三种解决方法，实体类添加注解（推荐）"><a href="#第三种解决方法，实体类添加注解（推荐）" class="headerlink" title="第三种解决方法，实体类添加注解（推荐）"></a>第三种解决方法，实体类添加注解（推荐）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DynamicInsert</span></span><br><span class="line"><span class="meta">@DynamicUpdate</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductCategory</span> </span>&#123;</span><br><span class="line"><span class="comment">//省略...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>添加注解@DynamicInsert表示在insert时动态生成insert语句</li>
<li>添加注解@DynamicUpdate表示在update时动态生成update语句</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/datetime.html">dev.mysql.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL-关键字和保留字</title>
    <url>/2021/01/21/MySQL-%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E4%BF%9D%E7%95%99%E5%AD%97/</url>
    <content><![CDATA[<p>关键字和保留字在SQL中有重要意义。某些关键字，比如SELECT、DELETE、BIGINT，作为表名或列名或内置函数名时需要特殊处理。</p>
<span id="more"></span>

<blockquote>
<p>An identifier may be quoted or unquoted</p>
</blockquote>
<p>如果标识符包含特殊字符或者是保留字，则必须引用。标识符的引用字符是反引号(`)</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>account表中有一个system字段</p>
<p>错误示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">system</span> <span class="keyword">from</span> account;</span><br></pre></td></tr></table></figure>
<p>SYSTEM是MySQL 8.0中新加入的保留字，必须使用反引号引用。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> `<span class="keyword">system</span>` <span class="keyword">from</span> account;</span><br></pre></td></tr></table></figure>
<p>除了限定名称后加点使用列名，比如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> account.system <span class="keyword">from</span> account;</span><br></pre></td></tr></table></figure>


<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/keywords.html#keywords-new-in-current-series">dev.mysql.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-ROW_NUMBER</title>
    <url>/2021/02/03/SQL-ROW_NUMBER/</url>
    <content><![CDATA[<p>Oracle中为行号分配唯一编号，可以使用<code>ROWNUM</code>伪列，不过内置的SQL函数<code>ROW_NUMBER</code>是一个更好的选择。</p>
<span id="more"></span>

<h2 id="ROWNUM"><a href="#ROWNUM" class="headerlink" title="ROWNUM"></a>ROWNUM</h2><p><code>ROWNUM</code>伪列返回查询出来数据的顺序，即按照插入时间排的序。</p>
<h3 id="返回十条数据"><a href="#返回十条数据" class="headerlink" title="返回十条数据"></a>返回十条数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> employees</span><br><span class="line">  <span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;</span> <span class="number">11</span>;</span><br></pre></td></tr></table></figure>

<h3 id="返回十条数据，并排序"><a href="#返回十条数据，并排序" class="headerlink" title="返回十条数据，并排序"></a>返回十条数据，并排序</h3><p>如果没有索引，将会先按插入时间选出10条，再进行排序；如果有索引，将会先排序，再选出10条。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> employees</span><br><span class="line">  <span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;</span> <span class="number">11</span></span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> last_name;</span><br></pre></td></tr></table></figure>

<h3 id="先排序，再选出10条"><a href="#先排序，再选出10条" class="headerlink" title="先排序，再选出10条"></a>先排序，再选出10条</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> employee_id)</span><br><span class="line">  <span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;</span> <span class="number">11</span>;</span><br></pre></td></tr></table></figure>

<h3 id="ROWNUM大于正数"><a href="#ROWNUM大于正数" class="headerlink" title="ROWNUM大于正数"></a>ROWNUM大于正数</h3><p>将不会返回数据，比如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> employees</span><br><span class="line">  <span class="keyword">WHERE</span> ROWNUM <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h2 id="ROW-NUMBER"><a href="#ROW-NUMBER" class="headerlink" title="ROW_NUMBER"></a>ROW_NUMBER</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><img src="/img/oracle/row_number.gif" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ROW_NUMBER( )</span><br><span class="line">   OVER ([ query_partition_clause ] order_by_clause)</span><br></pre></td></tr></table></figure>

<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>查询每个部门工资最高的三条数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, first_name, last_name, salary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    department_id, first_name, last_name, salary,</span><br><span class="line">    <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> department_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">desc</span>) rn</span><br><span class="line">  <span class="keyword">FROM</span> employees</span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span> rn <span class="operator">&lt;=</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><p>MySQL从8.0版本开始，也支持<code>ROW_NUMBER</code>函数</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/ROWNUM-Pseudocolumn.html#GUID-2E40EC12-3FCF-4A4F-B5F2-6BC669021726">docs.oracle.com</a></li>
<li><a href="https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/ROW_NUMBER.html#GUID-D5A157F8-0F53-45BD-BF8C-AE79B1DB8C41">docs.oracle.com</a></li>
<li><a href="https://www.javatpoint.com/mysql-row_number-function">javatpoint.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ</title>
    <url>/2021/03/11/RabbitMQ/</url>
    <content><![CDATA[<p>RabbitMQ是实现了高级消息队列协议（AMQP）的开源消息队列中间件，由Erlang语言编写而成，负责接收和发送消息。</p>
<span id="more"></span>

<h2 id="使用原因"><a href="#使用原因" class="headerlink" title="使用原因"></a>使用原因</h2><p>在基于Java平台之间传递消息，使用JMS就足够了，但如果是不同的厂商或平台，AMQP就派上了用场。<br>主要有三大特性：</p>
<ul>
<li>解耦</li>
<li>异步</li>
<li>削峰</li>
</ul>
<h2 id="安装Erlang"><a href="#安装Erlang" class="headerlink" title="安装Erlang"></a>安装Erlang</h2><p>在windows上安装测试RabbitMQ，首先安装Erlang，并配置环境变量。</p>
<h2 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h2><p>官网下载响应版本的压缩包，解压。</p>
<p>在sbin下执行命令，开启RabbitMQ服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./rabbitmq-server</span><br></pre></td></tr></table></figure>

<p>开启RabbitMQ管理工具：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure>

<p>关闭RabbitMQ服务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./rabbitmqctl stop</span><br></pre></td></tr></table></figure>

<h3 id="端口占用"><a href="#端口占用" class="headerlink" title="端口占用"></a>端口占用</h3><ul>
<li>默认端口5672用于客户端调用。</li>
<li>默认<code>http://localhost:15672</code>用于后台管理系统。</li>
</ul>
<h2 id="准备依赖jar包"><a href="#准备依赖jar包" class="headerlink" title="准备依赖jar包"></a>准备依赖jar包</h2><p>Spring Boot项目，直接增加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>发送消息的是生产者，接收消息的是消费者，并且生产者、消费者、中间件没有必要在同一台主机上。</p>
<h3 id="ConnectionFactory（连接工厂）"><a href="#ConnectionFactory（连接工厂）" class="headerlink" title="ConnectionFactory（连接工厂）"></a>ConnectionFactory（连接工厂）</h3><p>ConnectionFactory用于创建Connection。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CachingConnectionFactory connectionFactory = <span class="keyword">new</span> CachingConnectionFactory(<span class="string">&quot;127.0.0.1&quot;</span> , <span class="number">5672</span>);</span><br><span class="line">connectionFactory.setUsername(<span class="string">&quot;guest&quot;</span>);</span><br><span class="line">connectionFactory.setPassword(<span class="string">&quot;guest&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Connection（连接）"><a href="#Connection（连接）" class="headerlink" title="Connection（连接）"></a>Connection（连接）</h3><p>Connection接口是一条TCP连接，表示应用程序和消息服务器之间的连接。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection connection = connectionFactory.createConnection();</span><br></pre></td></tr></table></figure>

<h3 id="Channel（信道）"><a href="#Channel（信道）" class="headerlink" title="Channel（信道）"></a>Channel（信道）</h3><p>tcp连接的建立需要经过三次握手,连接的释放需要四次挥手，开销昂贵，影响系统性能。所以需要信道，channel是在Connection中的一个虚拟连接，可以多次使用，但每个线程需要一个单独的channel，负责发送AMQP指令。<br>创建不开启事务的Channel：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel = connection.createChannel(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Queue（队列）"><a href="#Queue（队列）" class="headerlink" title="Queue（队列）"></a>Queue（队列）</h3><p>队列中存储还未被消费的信息，是一个巨大的消息缓存区，多个生产者可以发送消息到一个队列，多个消费者也可以从一个队列接收消息。<br>创建一个指定名称的队列，自动绑定到一个空的Exchange，绑定的routing key和队列名相同：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.queueDeclare(<span class="string">&quot;hello&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Exchange（交换机）"><a href="#Exchange（交换机）" class="headerlink" title="Exchange（交换机）"></a>Exchange（交换机）</h3><p>有四种<code>Direct exchange</code>、<code>Fanout exchange</code>、<code>Topic exchange</code>和<code>Headers exchange</code></p>
<ul>
<li>Direct exchange：默认exchange，使用时不需要指定routing key的名字，创建的Queue都有一个默认的routing key。循环发放给不同的消费者。</li>
<li>Fanout exchange：忽略routing key的存在，将message广播到所有的Queue中。</li>
<li>Topic exchange：根据匹配routing key到不同格式，将message发送到一个或者多个Queue中。</li>
<li>Headers exchange：根据message的头信息，分发过滤Message。</li>
</ul>
<p>默认exchange发送消息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">channel.basicPublish(<span class="string">&quot;&quot;</span>, <span class="string">&quot;hello&quot;</span>,<span class="keyword">null</span>,messageA.getBytes());</span><br></pre></td></tr></table></figure>

<p>fanout exchange发送消息，a、b队列同时收到消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String messageA = <span class="string">&quot;ni hao&quot;</span>;</span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;ex&quot;</span>,<span class="string">&quot;fanout&quot;</span>);</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;a&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;b&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">channel.queueBind(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;ex&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">channel.queueBind(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;ex&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">channel.basicPublish(<span class="string">&quot;ex&quot;</span>, <span class="string">&quot;&quot;</span>,<span class="keyword">null</span>,messageA.getBytes());</span><br></pre></td></tr></table></figure>

<p>topic exchange发送消息，满足条件的a和b队列同时收到消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String messageA = <span class="string">&quot;ni hao&quot;</span>;</span><br><span class="line">channel.exchangeDeclare(<span class="string">&quot;ex&quot;</span>,<span class="string">&quot;topic&quot;</span>);</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;a&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;b&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">channel.queueDeclare(<span class="string">&quot;c&quot;</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">channel.queueBind(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;ex&quot;</span>,<span class="string">&quot;a.yuan.*&quot;</span>);</span><br><span class="line">channel.queueBind(<span class="string">&quot;b&quot;</span>,<span class="string">&quot;ex&quot;</span>,<span class="string">&quot;*.yuan.b&quot;</span>);</span><br><span class="line">channel.queueBind(<span class="string">&quot;c&quot;</span>,<span class="string">&quot;ex&quot;</span>,<span class="string">&quot;uana.b*&quot;</span>);</span><br><span class="line">channel.basicPublish(<span class="string">&quot;ex&quot;</span>, <span class="string">&quot;a.yuan.b&quot;</span>,<span class="keyword">null</span>,messageA.getBytes());</span><br></pre></td></tr></table></figure>

<h3 id="Binding（绑定）"><a href="#Binding（绑定）" class="headerlink" title="Binding（绑定）"></a>Binding（绑定）</h3><ul>
<li>队列使用<code>routing key</code>绑定到<code>exchange</code></li>
<li>消息根据<code>routing key</code>被发送到<code>exchange</code>，然后<code>exchange</code>分发消息到队列。</li>
</ul>
<h2 id="spring-boot"><a href="#spring-boot" class="headerlink" title="spring boot"></a>spring boot</h2><p>Spring提供了方便的连接管理（CachingConnectionFactory），消息发布（RabbitTemplate），消息消费（RabbitListener）等工具类。</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p><code>application.yml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    host: 127.0.0.1</span><br><span class="line">    port: 5672</span><br><span class="line">    user: guest</span><br><span class="line">    password: guest</span><br></pre></td></tr></table></figure>

<h3 id="配置一个队列"><a href="#配置一个队列" class="headerlink" title="配置一个队列"></a>配置一个队列</h3><p>配置自定义队列</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">myQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;myQueue&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="发送测试"><a href="#发送测试" class="headerlink" title="发送测试"></a>发送测试</h3><p>使用rabbitTemplate直接发送</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringAmqpTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRabbit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;myQueue&quot;</span>,<span class="string">&quot;hhhhhhhhhhello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="信息消费"><a href="#信息消费" class="headerlink" title="信息消费"></a>信息消费</h3><p>通过@RabbitListener注解，实现信息的消费。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;myQueue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(String in)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Message read from myQueue : &quot;</span> + in);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="spring-boot使用topic-exchange"><a href="#spring-boot使用topic-exchange" class="headerlink" title="spring boot使用topic exchange"></a>spring boot使用topic exchange</h2><p>Spring AMQP提供了Declarables，可以使队列、交换机、绑定三者放在一起。</p>
<h3 id="配置Declarables"><a href="#配置Declarables" class="headerlink" title="配置Declarables"></a>配置Declarables</h3><p>配置两个队列在一个exchange上，两个队列分别有自己的绑定格式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Declarables <span class="title">topicBindings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Queue topicQueue1 = <span class="keyword">new</span> Queue(<span class="string">&quot;a&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">    Queue topicQueue2 = <span class="keyword">new</span> Queue(<span class="string">&quot;b&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    TopicExchange topicExchange = <span class="keyword">new</span> TopicExchange(<span class="string">&quot;ex&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Declarables(</span><br><span class="line">            topicQueue1,</span><br><span class="line">            topicQueue2,</span><br><span class="line">            topicExchange,</span><br><span class="line">            BindingBuilder</span><br><span class="line">                    .bind(topicQueue1)</span><br><span class="line">                    .to(topicExchange).with(<span class="string">&quot;*.important.*&quot;</span>),</span><br><span class="line">            BindingBuilder</span><br><span class="line">                    .bind(topicQueue2)</span><br><span class="line">                    .to(topicExchange).with(<span class="string">&quot;#.error&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="发送测试-1"><a href="#发送测试-1" class="headerlink" title="发送测试"></a>发送测试</h3><p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendRabbit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;topicEx&quot;</span>,<span class="string">&quot;successs&quot;</span>,<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;topicEx&quot;</span>,<span class="string">&quot;y.error&quot;</span>,<span class="string">&quot;occur wrong&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果b队列中添加了一条”occur wrong”的字符串数据。</p>
]]></content>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-count(1)的返回类型</title>
    <url>/2021/01/27/SQL-count(1)%E7%9A%84%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p>在不同数据库中，select(1)可能会有不同的返回类型。</p>
<span id="more"></span>

<h2 id="ResultSet-getObject"><a href="#ResultSet-getObject" class="headerlink" title="ResultSet.getObject"></a>ResultSet.getObject</h2><p>不同的数据库对<code>ResultSet</code>接口有不同的实现。</p>
<ul>
<li>MySQL的驱动jar包为<code>mysql-connector-java-8.0.22.jar</code>，实现方法为<code>com.mysql.cj.jdbc.result.ResultSetImpl</code>。</li>
<li>Oracle的驱动jar包为<code>ojdbc6-11.2.0.4.jar</code>，实现方法为<code>oracle.jdbc.driver.OracleResultSetImpl</code>。</li>
</ul>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line">ResultSet rs = stmt.executeQuery(<span class="string">&quot;select count(1) from task&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    <span class="keyword">int</span> result = (<span class="keyword">int</span>) rs.getObject(<span class="number">1</span>);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line">rs.close();</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br></pre></td></tr></table></figure>

<ul>
<li>如果是MySQL，输出内容为<code>java.lang.Long cannot be cast to java.lang.Integer</code>。</li>
<li>如果是Oracle，输出内容为<code>java.math.BigDecimal cannot be cast to java.lang.Integer</code></li>
</ul>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>MySQL支持SQL标准的整数类型<code>INTEGER</code>(<code>INT</code>) and <code>SMALLINT</code>，作为扩展，还支持三种整数类型<code>TINYINT</code>、<code>MEDIUMINT</code>、<code>BIGINT</code>，需要的字节和范围如下图所示。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>占用空间</th>
<th>有符号数范围</th>
<th>无符号数范围</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td>1字节</td>
<td>-128~127</td>
<td>0~255</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2字节</td>
<td>-32768~32767</td>
<td>0~65535</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3字节</td>
<td>-8388608~8388607</td>
<td>0~16777215</td>
</tr>
<tr>
<td>INT</td>
<td>4字节</td>
<td>-2147483648~2147483647</td>
<td>0~4294967295</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8字节</td>
<td>-2的63次方~2的63次方-1</td>
<td>0~2的64次方-1</td>
</tr>
</tbody></table>
<ul>
<li>COUNT(expr)返回结果不为null的行数，返回类型是<code>BIGINT</code>。</li>
<li>但COUNT(*)返回结果包含null的行数。</li>
</ul>
<p>可以在<code>Object getObject(int columnIndex)</code>方法中，找到如下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> BIGINT:</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getLong(columnIndex);</span><br></pre></td></tr></table></figure>

<p>所以返回<code>Long</code>类型。</p>
<h3 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h3><p>Oracle中count返回<code>number</code>类型。<br>会调用NumberCommonAccessor类的<code>Object getObject(int var1)</code>方法，主要代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.statement.connection.j2ee13Compliant &amp;&amp; <span class="keyword">this</span>.precision != <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.scale == -<span class="number">127</span>) &#123;</span><br><span class="line">    var2 = <span class="keyword">new</span> Double(<span class="keyword">this</span>.getDouble(var1));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    var2 = <span class="keyword">this</span>.getBigDecimal(var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以返回<code>BigDecimal</code>类型。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>可以使用通用代码，先转化为Number再转为int，如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> result = ((Number)rs.getObject(<span class="number">1</span>)).intValue();</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ResultSet接口的<code>Object getObject(int columnIndex)</code>方法，select(1)在Oracle驱动下返回类型是<code>BigDecimal</code>，在MySQL驱动下返回类型是<code>Long</code>。其中ResultSet接口又是很多方法的底层实现，包括<code>Map&lt;String,Object&gt; map = jdbcTemplate.queryForMap(sql);</code>和<code>JdbcUtils.getResultSetValue(rs,1);</code>等方法。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/aggregate-functions.html#function_count">dev.mysql.com</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/integer-types.html">dev.mysql.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-单引号和双引号</title>
    <url>/2021/02/22/SQL-%E5%8D%95%E5%BC%95%E5%8F%B7%E5%92%8C%E5%8F%8C%E5%BC%95%E5%8F%B7/</url>
    <content><![CDATA[<p>Oracle中单引号和双引号有不同的用法，Oracle中的双引号和MySQL中的双引号也会有不用的结果。</p>
<span id="more"></span>  

<h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><p>task表中有字段TASKTYPE，类型为varchar2(255)</p>
<h3 id="不加单引号和双引号"><a href="#不加单引号和双引号" class="headerlink" title="不加单引号和双引号"></a>不加单引号和双引号</h3><p>不会区分大小写，默认大写。以下语句输出结果相同。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> TASKTYPE <span class="keyword">from</span> task;</span><br><span class="line"><span class="keyword">select</span> tasktype <span class="keyword">from</span> task;</span><br></pre></td></tr></table></figure>

<h3 id="加单引号"><a href="#加单引号" class="headerlink" title="加单引号"></a>加单引号</h3><p>加单引号，结果为字符串。不是想要的结果。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;TASKTYPE&#x27;</span> <span class="keyword">from</span> task;</span><br></pre></td></tr></table></figure>

<h3 id="加双引号"><a href="#加双引号" class="headerlink" title="加双引号"></a>加双引号</h3><p>加双引号，结果将严格区分大小写。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> &quot;TASKTYPE&quot; <span class="keyword">from</span> task;</span><br></pre></td></tr></table></figure>

<p>以下语句会报错，标识符不存在</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> &quot;tasktype&quot; <span class="keyword">from</span> task;</span><br></pre></td></tr></table></figure>

<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>task表中有字段TASKTYPE，类型为varchar(255)。</p>
<h3 id="不加单引号和双引号-1"><a href="#不加单引号和双引号-1" class="headerlink" title="不加单引号和双引号"></a>不加单引号和双引号</h3><p>不会区分大小写，默认大写。以下语句输出结果相同。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> TASKTYPE <span class="keyword">from</span> task;</span><br><span class="line"><span class="keyword">select</span> tasktype <span class="keyword">from</span> task;</span><br></pre></td></tr></table></figure>

<h3 id="加单引号或双引号"><a href="#加单引号或双引号" class="headerlink" title="加单引号或双引号"></a>加单引号或双引号</h3><p>加单引号或双引号，结果都为字符串。不是想要的结果。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> &quot;TASKTYPE&quot; <span class="keyword">from</span> task;</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;TASKTYPE&#x27;</span> <span class="keyword">from</span> task;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-层级查询</title>
    <url>/2021/01/29/SQL-%E5%B1%82%E7%BA%A7%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>Oracle中为层级查询提供了层级查询子句。</p>
<span id="more"></span>  

<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><img src="/img/oracle/hierarchical_query_clause.gif" alt=""></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; CONNECT BY [ NOCYCLE ] condition [ START WITH condition ]</span><br><span class="line">| START WITH condition CONNECT BY [ NOCYCLE ] condition</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>condition：包括一个或多个表达式和布尔类型操作符，返回类型为TRUE, FALSE, 或者UNKNOWN。</li>
<li>START WITH：指定一条或多条根数据</li>
<li>prior：一元操作符，和<code>+</code>，<code>-</code>有相同的优先级，为当前列的父亲列计算后面的表达式。</li>
<li>nocycle：如果父列和子列值相同，则需要使用<code>nocycle</code>在<code>connect by</code>后，排除那条数据</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> level, t.taskid, t.parentid, t.OPERATETIME</span><br><span class="line">  <span class="keyword">from</span> t_edf_task t</span><br><span class="line"><span class="keyword">connect</span> <span class="keyword">by</span> prior taskId <span class="operator">=</span> parentid</span><br><span class="line">  <span class="keyword">start</span> <span class="keyword">with</span> taskId <span class="operator">=</span> <span class="string">&#x27;339883&#x27;</span></span><br><span class="line">  <span class="keyword">order</span> <span class="keyword">by</span> OPERATETIME;</span><br></pre></td></tr></table></figure>

<p><img src="/img/oracle/result.png" alt=""></p>
<ul>
<li>LEVEL：伪列展示节点级别</li>
<li>SIBLINGS：关键字在order by中间，类似于深度优先搜索</li>
</ul>
<h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><p>Mysql中暂时没有层级查询的函数</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://docs.oracle.com/en/database/oracle/oracle-database/19/sqlrf/Hierarchical-Queries.html#GUID-E3D35EF7-33C3-4D88-81B3-00030C47AE56">docs.oracle.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>Oracle</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL-截取字符串</title>
    <url>/2021/02/24/SQL-%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>使用<code>SUBSTR</code>函数截取字符串，MySQL和Oracle可能会有不同的结果。</p>
<span id="more"></span>  

<h2 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h2><p>使用<code>SUBSTR</code>函数截取字符串，从<code>position</code>开始，截取长度为<code>substring_length</code>。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; SUBSTR</span><br><span class="line">| SUBSTRB</span><br><span class="line">| SUBSTRC</span><br><span class="line">| SUBSTR2</span><br><span class="line">| SUBSTR4</span><br><span class="line">&#125;</span><br><span class="line">(char, position [, substring_length ])</span><br></pre></td></tr></table></figure>
<ul>
<li><code>position</code>是0的时候，被视为1。</li>
<li><code>position</code>是正数的时候，那一位就是子字符串的第一位。</li>
<li><code>position</code>是负数的时候，从末尾开始数第几位。</li>
<li><code>substring_length</code>省略的时候，会取值到最后一位。</li>
<li><code>substring_length</code>比1小的时候，返回null。</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;ABCDEFG&#x27;</span>,<span class="number">2</span>,<span class="number">4</span>) <span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure>
<p>返回<code>BCDE</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SUBSTR(<span class="string">&#x27;ABCDEFG&#x27;</span>,<span class="number">-4</span>,<span class="number">3</span>) <span class="keyword">FROM</span> DUAL;</span><br></pre></td></tr></table></figure>
<p>返回<code>DEF</code></p>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h3><p>SUBSTR(str,pos), SUBSTR(str FROM pos), SUBSTR(str,pos,len), SUBSTR(str FROM pos FOR len)</p>
<ul>
<li>没有<code>len</code>参数的时候，从<code>str</code>的第<code>pos</code>位开始的全字符串。</li>
<li><code>pos</code>是0的时候，返回为空字符串。</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://docs.oracle.com/cd/B19306_01/server.102/b14200/functions162.htm">docs.oracle.com</a></li>
<li><a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_substr">dev.mysql.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL中的不等于</title>
    <url>/2020/11/13/SQL%E4%B8%AD%E7%9A%84%E4%B8%8D%E7%AD%89%E4%BA%8E/</url>
    <content><![CDATA[<p>SQL中的不等于写法</p>
<span id="more"></span>  

<ul>
<li>在Oracle中<code>&lt;&gt;</code>和<code>!=</code>都可以表示不等于</li>
<li>判断是否为空，必须使用<code>is null</code>或者<code>is not null</code></li>
<li>除了<code>is null</code>和<code>is not null</code>，其他运算符和null结果都是false</li>
</ul>
<p>以下语句，查不到amount等于null的记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * from city where amount &lt;&gt; 800;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以下语句，可以查到amount等于null的记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * from city where amount &lt;&gt; 800 or amount is null;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Batch-学习笔记</title>
    <url>/2018/08/28/Spring%20Batch-learning/</url>
    <content><![CDATA[<p>Spring Batch是一个轻量级的完善的<strong>批处理框架</strong>，旨在帮助企业建立健壮高效的批处理应用。提供了大量可重用的组件，能够支持简单的，复杂的和大数据量的批处理作业。关注批处理任务相关的问题，如事务、并发、监控、执行等。  </p>
<span id="more"></span>    
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>对大批量处理任务进行了精简和优化。</p>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>Spring Batch 核心架构分为三层，应用层，核心层，基础架构层，避免了不同层级间的影响。<br><strong>应用层：</strong> 包括所有的批处理作业，通过Spring框架管理自定义的代码。<br><strong>核心层：</strong> 包括Spring Batch启动和控制所需要的核心类，如：JobLauncher、job、step等。<br><strong>基础架构层：</strong> 提供通用的读（ItemReader）写（ItemWriter）和服务处理（RepeatTemplate） </p>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li><p><strong>丰富的开箱即用组件：</strong> 包括对各类资源的读写，如文本文件，xml文件，数据库等。</p>
</li>
<li><p><strong>面向Chunk的处理：</strong> 支持多次读，一次写。</p>
</li>
<li><p><strong>事务管理能力</strong></p>
</li>
<li><p><strong>元数据管理：</strong> 自动记录job的执行情况，包括job的执行成功、失败、失败异常信息，step执行的成功、失败、失败异常信息等，方便后期的维护与查看。</p>
</li>
<li><p><strong>易监控的批处理应用：</strong> 如直接查看数据库。</p>
</li>
<li><p><strong>丰富的流程定义：</strong> 支持顺序任务、条件分支任务等任务流程，同时支持已经定义的job或step，同时提供继承能力。</p>
</li>
<li><p><strong>健壮的批处理应用：</strong> 支持作业的跳过、重试、重启能力，避免因错误导致批处理的异常中断</p>
</li>
<li><p><strong>易扩展的批处理应用：</strong> 通过并发与并行技术实现应用的横向纵向扩展，可以多线程执行一个Step，多线程并行执行多个Step，远程执行作业，分区执行。</p>
</li>
<li><p><strong>复用企业现有的IT资产</strong></p>
<h3 id="Spring-Batch-2-0"><a href="#Spring-Batch-2-0" class="headerlink" title="Spring Batch 2.0"></a>Spring Batch 2.0</h3><p>当前使用的版本为2.1.9，具有以下特性。</p>
</li>
<li><p>支持非顺序的Step</p>
</li>
<li><p>面向Chunk处理<br><img src="/img/time.jpg" alt="">  </p>
</li>
<li><p>扩展性：多线程执行任务，包括远程分块和分区</p>
</li>
<li><p>可配置性</p>
</li>
</ul>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>job Repository：作业仓库，负责Job、Step执行过程中的状态保存。</li>
<li>job launcher：作业调度器，提供执行Job的入口。</li>
<li>job：作业，由多个Step组成，封装整个批处理操作。</li>
<li>Step：作业步，Job的一个执行环节，多个或一个Step组装成Job。</li>
<li>Tasklet：Step中具体执行逻辑的操作，可以重复执行。</li>
<li>Chunk：给定数量Item的集合，可以定义对Chunk的处理操作等。</li>
<li>Item：一条数据记录。</li>
<li>ItemReader：从数据源中读取Item。</li>
<li>ItemProcessor：对数据进行处理。</li>
<li>ItemWriter：将Item批量写入数据源。</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>step，tasklet，chunk，read，process，write之间的关系<br><img src="https://raw.githubusercontent.com/yuan0824/first/master/picture/batch1.png" alt=""></p>
<h3 id="配置作业job"><a href="#配置作业job" class="headerlink" title="配置作业job"></a>配置作业job</h3><p>job文件的配置是批处理的核心文件，一般格式 <strong>XXX-job.xml</strong> ，由Step组成，Step有读、处理、写，三部分组成，job的属性主要由 <strong>id</strong> ，incrementer，restartable，parent，abstract组成。<br><strong>id</strong>:必不可少，且为唯一的标识<br><strong>incrementer</strong>:作业参数传递器，可以在其中定义一个类，重写getNext方法，并返回JobParameters<br>job的主要子元素包括 <strong>step</strong> ，split，flow，decision，listeners，validator。<br>执行job：有三个操作Job的接口，JobLauncher、JobExplorer、JobOperator，通常使用<br><code>jobOperator.startNextInstance(&quot;XXX-job.xml&quot;);</code></p>
<h3 id="配置作业步step"><a href="#配置作业步step" class="headerlink" title="配置作业步step"></a>配置作业步step</h3><p>step中包含了一个实际运行的批处理任务中所有必需的信息，每个step由tasklet元素描述具体的作业。step的主要属性包括 <strong>id</strong> ，next，parent，job-repository，abstract，id属性同样必不可少，且为唯一的标识。<br>step的主要元素包括 <strong>tasklet</strong> ，partition，job，flow，next，stop，end，fail，listeners。<br>Step执行拦截器，使得在step执行前后能加入自定义的类。  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listeners</span>&gt;</span>  </span><br><span class="line">	<span class="tag">&lt;<span class="name">listener</span> <span class="attr">ref</span>=<span class="string">&quot;ib0001&quot;</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">listeners</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;ib0001&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;com.xxx.xxx.ib0001.Ib0001Listener&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="配置Tasklet"><a href="#配置Tasklet" class="headerlink" title="配置Tasklet"></a>配置Tasklet</h3><p>tasklet元素定义任务的具体执行逻辑，执行逻辑可以自定义实现，也可以使用Chunk标准的读，处理，写操作，使用自定义逻辑的时候，有ref和method属性可以使用；如果使用chunk，直接使用chunk子元素，同时还有listeners子元素。</p>
<h3 id="配置Chunk"><a href="#配置Chunk" class="headerlink" title="配置Chunk"></a>配置Chunk</h3><p>Chunk元素定义面向批的处理操作，属性有 <strong>commit-interval</strong> ，read，processor，write等，commit-interval即提交间隔，读出处理指定的数据后，通过writer批量写入，并提交事务，不设置时间间隔会使效率降低，所以可以说也是 <strong>必须项</strong> 。子元素有reader，processor，writer，listeners等。</p>
<h3 id="读数据ItemReader"><a href="#读数据ItemReader" class="headerlink" title="读数据ItemReader"></a>读数据ItemReader</h3><p>step中对资源的读处理，在Spring Batch框架中提供了各种的读实现，包括文本文件，XML文件，Flat文件，json，数据库等文件。<br><strong>Spring Batch中提供的读组件（常用的）</strong></p>
<table>
<thead>
<tr>
<th>ItemReader</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>org.springframework.batch.item.file.MultiResourceItemReader</td>
<td>多文件读组件</td>
</tr>
<tr>
<td>org.springframework.batch.item.file.FlatFileItemReader</td>
<td>读Flat类型文件</td>
</tr>
<tr>
<td>org.springframework.batch.item.database.JdbcCursorItemReader</td>
<td>基于jdbc游标方式读数据库</td>
</tr>
<tr>
<td><strong>FlatFileItemReader中常用的接口或类</strong></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>关键类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>org.springframework.batch.item.file.mapping.DefaultLineMapper</td>
<td>将一条记录转化为java数据对象，通常由LineTokenizer和FieldSetMapper实现</td>
</tr>
<tr>
<td>org.springframework.batch.item.file.transform.AbstractLineTokenizer</td>
<td>将一条记录分割成多个字段，在DefaultLineMapper中使用</td>
</tr>
<tr>
<td>org.springframework.batch.item.file.mapping.FieldSetMapper</td>
<td>将多个字段值转化为java对象，在DefaultLineMapper中使用</td>
</tr>
<tr>
<td>org.springframework.batch.item.file.LineCallbackHandler</td>
<td>处理文件中记录回调处理操作</td>
</tr>
<tr>
<td>配置LineMapper的代码实例</td>
<td></td>
</tr>
</tbody></table>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lineMapper&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.batch.item.file.mapping.DefaultLineMapper&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;lineTokenizer&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;一个AbstractLineTokenizer的实现类&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;delimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;分割的符号&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;names&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">value</span>&gt;</span>ecifId<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">value</span>&gt;</span>name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">value</span>&gt;</span>idNoType<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">value</span>&gt;</span>idno<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">value</span>&gt;</span>phoneno<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">value</span>&gt;</span>censorFlag<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">value</span>&gt;</span>result<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">value</span>&gt;</span>mesg<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;fieldSetMapper&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;FieldSetMapper的实现类&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;fileId&quot;</span> <span class="attr">value</span>=<span class="string">&quot;自定义&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br></pre></td></tr></table></figure>


<p><strong>AbstractLineTokenizer：</strong>负责将一条记录转化为FieldSet对象，FieldSet对象是一组key-value组合，负责存放每条数据分割后的条目，以key-value形式存在，读取value时，支持直接转化为String，Char等类型。<br><strong>FieldSetMapper：</strong> 实现类可以将取到的数据放入数据库中。<br><strong>LinesToSkip：</strong> 开头跳过指定的行。<br><strong>LineCallbackHandler：</strong> 触发handleLine操作，获取跳过行的内容。<br><strong>MultiResourceItemReader：</strong> 读多文件，关键属性：<strong>resources</strong>，<strong>delegate</strong>,其中resources是需要读取的资源文件列表，delegate是将读取到的文件给指定的ItemReader。<br><strong>JdbcCursorItemReader：</strong>基于游标方式读数据库，重要属性，<strong>dataSource</strong>提供读取的数据库信息，<strong>sql</strong>需要执行的SQL语句，<strong>preparedStatementSetter</strong>是SQL语句参数参数准备，可以使用org.springframework.batch.core.resource.ListPreparedStatementSetter，也可以自定义实现该接口，<strong>rowMapper</strong>可以将结果集ResultSet转化为指定的Pojo类，需要实现rowMapper接口。</p>
<h3 id="写数据ItemWriter"><a href="#写数据ItemWriter" class="headerlink" title="写数据ItemWriter"></a>写数据ItemWriter</h3><p>所有的写操作都要实现** org.springframework.batch.item.ItemWriter <strong>。<br>**Spring Batch中常用的写组件</strong></p>
<table>
<thead>
<tr>
<th>ItemWriter</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>org.springframework.batch.item.file.MultiResourceItemWriter</td>
<td>多文件写组件</td>
</tr>
<tr>
<td>org.springframework.batch.item.file.FlatFileItemWriter</td>
<td>写Flat类型文件</td>
</tr>
<tr>
<td>org.springframework.batch.item.database.JdbcBatchItemWriter</td>
<td>基于jdbc游标方式写数据库</td>
</tr>
</tbody></table>
<p><strong>FlatFileItemWriter中常用的接口或类</strong>  </p>
<table>
<thead>
<tr>
<th>关键类</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>targetFile</td>
<td>定义要输出的文件目录</td>
</tr>
<tr>
<td>lineAggregator</td>
<td>将Item对象转化成文本中的一条数据</td>
</tr>
<tr>
<td>encoding</td>
<td>设置编码类型</td>
</tr>
<tr>
<td>appendAllowed</td>
<td>文本若存在，是否追加，默认false</td>
</tr>
</tbody></table>
<p><strong>lineAggregator</strong>的主要实现 </p>
<ul>
<li><strong>org.springframework.batch.item.file.transform.FormatterLineAggregator：</strong> 将Item中指定的属性当做参数格式化一个字符串，其中属性 <strong>format</strong> 设置输出文件的格式，属性 <strong>fieldExtractor</strong> 将对象转化为Object数组。</li>
<li><strong>org.springframework.batch.item.file.transform.DelimitedLineAggregator：</strong>将Item对象转化为分隔符的一行文本记录，其中属性 <strong>delimiter</strong> 设置分隔符，属性 <strong>fieldExtractor</strong> 将对象转化为Object数组。</li>
</ul>
<h3 id="处理数据ItemProcessor"><a href="#处理数据ItemProcessor" class="headerlink" title="处理数据ItemProcessor"></a>处理数据ItemProcessor</h3><p>主要作用是对读取到的数据进行处理，简单使用如下：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">batch:processor</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;一个ItemProcessor的实现类，重写process方法，返回Pojo类/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">batch:processor</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="作业流Step-Flow"><a href="#作业流Step-Flow" class="headerlink" title="作业流Step Flow"></a>作业流Step Flow</h3><p>一个Job中有多个Step，则需要使用Step Flow。</p>
<ul>
<li>顺序Flow：用 <strong>next</strong> 属性定义当前step执行后的下一个Step。</li>
<li>条件Flow：next的 <strong>on</strong> 属性是定义作业步的ExitStatue，当匹配的时候，则执行 <strong>to</strong> 指定的作业步，实现StepExecutionListener，可以修改Step的退出状态。</li>
</ul>
<p>flow可以使用parent属性调用外部定义</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring Batch</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-p-学习笔记</title>
    <url>/2018/11/09/Spring%20-p/</url>
    <content><![CDATA[<p>p命名空间提供了一个简化，对bean中的property，使其更简。</p>
<span id="more"></span>    
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>未引入之前</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx.xxx&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bbbb&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;b&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>引入之后</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;xxx.xxx&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">p:bbbb-ref</span>=<span class="string">&quot;b&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot-Hibernate集成</title>
    <url>/2019/08/14/Spring%20Boot-Hibernate%E9%9B%86%E6%88%90/</url>
    <content><![CDATA[<p>Spring对全自动ORM框架<strong>Hibernate</strong>有很好的支持，Spring Boot更提供了一个名为<code>spring-boot-starter-data-jpa</code>的starter依赖，用来支持基于<code>Hibernate</code>的<code>Spring Data JPA</code>。</p>
<span id="more"></span>   

<h2 id="Spring-Data-JPA"><a href="#Spring-Data-JPA" class="headerlink" title="Spring Data JPA"></a>Spring Data JPA</h2><ul>
<li>Java Persistence API(JPA)是一个Java持久化规范</li>
<li>Hibernate实现了JPA规范</li>
<li>Spring Data JPA采用Hibernate作为默认JPA实现</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>新建Spring Boot项目</p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>在pom文件中加入以下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在配置文件<code>application.properties</code>中加入以下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/management?serverTimezone=Asia/Shanghai</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">spring.datasource.password=12345678</span><br></pre></td></tr></table></figure>

<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>新建实体类<code>TGroup.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name=&quot;t_group&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TGroup</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Id</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Column(name=&quot;group_name&quot;)</span></span><br><span class="line">	<span class="keyword">private</span> String groupName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><p><strong>Spring Data JPA</strong>主要功能就是提供了一系列方便的<strong>Repository</strong></p>
<ul>
<li>CrudRepository：提供了增删改查功能</li>
<li>PagingAndSortingRepository：继承CrudRepository，并提供了分页和排序功能</li>
<li>JpaRepository：继承PagingAndSortingRepository，并很好的支持JPA</li>
</ul>
<p>新建接口GroupRepository继承<strong>JpaRepository</strong>，而且不用@Repository注解，便注入了Spring容器中，默认注入实现类为<strong>SimpleJpaRespositry</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GroupRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">TGroup</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>新建接口<code>GroupService</code>与其实现类<code>GroupServiceImp</code>，实现类如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupServiceImp</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GroupRepository repository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TGroup&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> repository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>新建测试类GroupServiceImpTest，可以正常使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupServiceImpTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GroupServiceImp groupService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;TGroup&gt; list= groupService.findAll();</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Spring Boot与Hibernate集成其实就是Spring Data JPA的使用，省去映射关系扫描和sessionFactory等配置，提供增删改查、分页等仓库，使用方便，易于扩展。</p>
<p><strong>注</strong>：完整代码已上传，<a href="https://github.com/yuan0824/jpa">项目地址</a>：<a href="https://github.com/yuan0824/jpa">https://github.com/yuan0824/jpa</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Hibernate</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot-Logging</title>
    <url>/2019/08/15/Spring%20Boot-Logging/</url>
    <content><![CDATA[<p>Spring Boot默认使用<strong>logback</strong>作为日志框架。</p>
<span id="more"></span>   

<h2 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h2><p>日志在控制台默认输出如下<br>![](/img/Spring Boot-Logging.png)</p>
<ul>
<li>日期和时间</li>
<li>日志级别：ERROR、WARN、INFO、DEBUG、TRACE</li>
<li>PID</li>
<li>线程名</li>
<li>logger名</li>
<li>日志信息</li>
</ul>
<h2 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h2><p>默认只在控制台输出，不生成日志文件。在配置文件<code>application.properties</code>中配置<code>logging.file</code>和<code>logging.path</code>可以输出至文件。</p>
<ul>
<li>logging.file：指定文件</li>
<li>logging.path：指定目录，名为spring.log</li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote>
<p>logback-spring.xml rather than logback.xml or logback-test.xml</p>
</blockquote>
<p>自定义配置文件名为<strong>logback-spring.xml</strong></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://docs.spring.io/spring-boot/docs/2.1.7.RELEASE/reference/html/boot-features-logging.html">Spring Boot Reference Guide</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot-email</title>
    <url>/2019/08/13/Spring%20Boot-email/</url>
    <content><![CDATA[<p>Spring框架中提供了<strong>JavaMailSender</strong>接口，<strong>Spring Boot</strong>为此接口提供了自动装配，再通过<strong>FreeMarker</strong>模板引擎，以QQ邮箱为例，根据SMTP协议自动<strong>发送邮件</strong>。</p>
<span id="more"></span>   

<h2 id="邮箱设置"><a href="#邮箱设置" class="headerlink" title="邮箱设置"></a>邮箱设置</h2><blockquote>
<p>简单邮件传输协议 (Simple Mail Transfer Protocol, SMTP) 是在Internet传输email的事实标准</p>
</blockquote>
<p>QQ邮箱设置路径：设置、账户、开启服务</p>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>在pom文件中加入以下依赖，默认的<code>freemarker.template.Configuration</code>类被注入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在配置文件<code>application.properties</code>中加入以下配置，<code>spring.mail.host</code>代表默认的<code>JavaMailSender</code>被注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.mail.host=smtp.qq.com</span><br><span class="line">spring.mail.username=610951793@qq.com</span><br><span class="line">spring.mail.password=fhmvfkwxjwmzhhjd</span><br></pre></td></tr></table></figure>
<p>新建<code>email.ftl</code>作为FreeMarker模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你好，</span><br><span class="line">    $&#123;name!&#125;同学，欢迎加入XXX大家庭！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span> <span class="attr">style</span>=<span class="string">&quot;color: #F00; font-size: 24px;&quot;</span>&gt;</span></span><br><span class="line">        希望在未来的日子里，携手共进!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>新建测试类<code>MailTest.java</code>如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender mailSender;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> Configuration cfg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException, IOException, TemplateException </span>&#123;</span><br><span class="line">        <span class="comment">//FreeMarker 数据模型+模板</span></span><br><span class="line">        Map&lt;String,Object&gt; root = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        root.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        Template temp = cfg.getTemplate(<span class="string">&quot;email.ftl&quot;</span>);</span><br><span class="line">        String mail = FreeMarkerTemplateUtils.processTemplateIntoString(temp, root);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//JavaMailSender</span></span><br><span class="line">        MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line">        MimeMessageHelper help = <span class="keyword">new</span> MimeMessageHelper(message , <span class="keyword">true</span>);</span><br><span class="line">        help.setFrom(<span class="string">&quot;610951793@qq.com&quot;</span>);</span><br><span class="line">        help.setTo(<span class="string">&quot;610951793@qq.com&quot;</span>);</span><br><span class="line">        help.setText(mail,<span class="keyword">true</span>);</span><br><span class="line">        mailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果，邮箱收到如下内容的邮件。<br>![](/img/Spring Boot-email.png)</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://docs.spring.io/spring-boot/docs/2.1.7.RELEASE/reference/html/boot-features-email.html">Spring Boot Reference Guide</a></li>
<li><a href="https://docs.spring.io/spring/docs/5.1.8.RELEASE/spring-framework-reference/integration.html#mail">Spring Reference Guide</a></li>
<li><a href="http://freemarker.foofun.cn/pgui_quickstart_all.html">freemarker在线手册</a> </li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot-学习笔记</title>
    <url>/2019/07/11/Spring%20Boot-learning/</url>
    <content><![CDATA[<p>目前Java项目中使用最多的框架就是Spring、Spring MVC，Mybatis，也叫做SSM架构，使用它们搭建项目就不可避免的需要许多的配置文件。而使用<strong>Spring Boot</strong>能大大减少配置，让项目很快地运行，也是Spring大力推荐的技术，更是未来发展趋势。</p>
<span id="more"></span>   
<h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><p>推荐使用依赖管理工具<strong>maven</strong>构建，新建<strong>pom.xml</strong>（如下是官网给出的推荐配置）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">		 <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到，Spring Boot工程的pom文件经常</p>
<ul>
<li>继承<strong>spring-boot-starter-parent</strong>项目，</li>
<li>添加一个或多个<strong>Starters</strong>依赖（比如添加<strong>spring-boot-starter-web</strong>用来构建web项目）</li>
<li>添加插件，使项目可以打包为一个<strong>可执行jar包</strong></li>
</ul>
<h2 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h2><p>新建启动类<strong>Application.java</strong>，配置<strong>@SpringBootApplication</strong>注解在main方法上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SpringApplication.run(Application.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时就构架出一个基于Spring boot的web项目，直接运行main方法启动</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Spring Boot会根据jar包依赖<strong>自动配置</strong>，当然也可以添加自己的配置，覆盖或移除指定的配置。三种配置方式中，Spring boot推荐<strong>Java-based</strong>配置，XML-based配置是没有必要的。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.spring.io/spring-boot/docs/2.1.6.RELEASE/reference/html">Spring Boot Reference Guide</a> </p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot-外部化配置</title>
    <url>/2020/02/12/Spring%20Boot-%E5%A4%96%E9%83%A8%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Spring Boot可以在不同的环境下根据不同的配置文件使用相同的应用，可以使用<strong>properties</strong>、<strong>YAML</strong>、<strong>环境变量</strong>、<strong>命令行参数</strong>进行外部化配置。</p>
<span id="more"></span>   

<h2 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h2><p>Spring Boot获取配置文有先后顺序，主要是</p>
<ul>
<li>命令行参数</li>
<li>Java系统变量</li>
<li>系统环境变量</li>
<li>Jar包外指定profile的配置文件application-{profile}.yml/properties</li>
<li>Jar包内指定profile的配置文件application-{profile}.yml/properties</li>
<li>Jar包外普通的配置文件application.yml/properties</li>
<li>Jar包内普通的配置文件application.yml/properties</li>
</ul>
<h2 id="外部配置优先级"><a href="#外部配置优先级" class="headerlink" title="外部配置优先级"></a>外部配置优先级</h2><ul>
<li>jar包目录的config目录下</li>
<li>jar包目录下</li>
<li>classpath的config目录下</li>
<li>classpath的根目录下</li>
</ul>
<h2 id="指定配置文件名-路径"><a href="#指定配置文件名-路径" class="headerlink" title="指定配置文件名\路径"></a>指定配置文件名\路径</h2><p>如果使用其他配置文件名或路径，需要添加后缀</p>
<h3 id="配置文件名"><a href="#配置文件名" class="headerlink" title="配置文件名"></a>配置文件名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--spring.config.name=myproject</span><br></pre></td></tr></table></figure>

<h3 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--spring.config.location=config/default.properties</span><br></pre></td></tr></table></figure>

<h2 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h2><p>Springboot默认<strong>ISO-8859-1 **编码读取</strong>properties**文件，使中文经常会出现乱码</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul>
<li>手动配置<strong>properties</strong>文件的编码方式为<strong>UTF-8</strong></li>
<li>使用<strong>yml配置文件</strong>代替<strong>properties配置文件</strong></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Testing中资源文件读取问题</title>
    <url>/2018/12/05/Spring%20Testing%20classpath/</url>
    <content><![CDATA[<p>在Junit4整合Spring进行单元测试的时候，配置文件的使用。</p>
<span id="more"></span>
<h2 id="xml配置文件读取"><a href="#xml配置文件读取" class="headerlink" title="xml配置文件读取"></a>xml配置文件读取</h2><p>使用<strong>@ContextConfiguration</strong>注释，配置<strong>locations</strong>属性为包含资源文件的数组</p>
<ul>
<li>如果使用的是相对路径，则为当前测试类所在的包中；如果路径以斜杠开头，则是绝对路径。</li>
<li>路径如果没有前缀，则默认为<strong>ClassPathResource</strong></li>
<li>路径前缀也可以为<strong>classpath:, file:, http:</strong></li>
<li>如果不需要其他属性，则可以省略*<em>locations = *</em></li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>相对路径：<code>context.xml</code><br>绝对路径：<code>/org/example/config.xml</code><br>读取一个文件：<code>@ContextConfiguration(&quot;/context.xml&quot;)</code><br>读取多个文件：<code>@ContextConfiguration(&#123;&quot;/app-config.xml&quot;, &quot;/test-config.xml&quot;&#125;)</code><br>需要其他属性，需要加上*<em>locations = *</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;/test-context.xml&quot;, loader = CustomContextLoader.class)</span></span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.spring.io/spring/docs/5.1.3.RELEASE/spring-framework-reference/testing.html#spring-testing-annotation-contextconfiguration">Spring官方文档</a> : </p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot-多线程</title>
    <url>/2019/10/12/Spring%20Boot-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>一般我们使用多线程的方法是，继承<strong>Thread</strong>类，实现<strong>Runnable</strong>接口等方式，但在Spring中这样使用可能会导致bean无法注入等问题，所以在spring 3之后，就提供了<strong>@Async</strong>注解，很好地实现了多线程。</p>
<span id="more"></span>   

<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用get方法调用api，需要尽可能多得获取数据，插入数据库。</p>
<ul>
<li>未使用多线程，每获取<strong>1000条数据</strong>需要<strong>4分钟</strong></li>
<li>使用多线程后，每获取<strong>1000条数据</strong>需要<strong>16秒</strong></li>
</ul>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>需要异步的方法加上<strong>@Async</strong>注解，类加上<strong>@Scope</strong>(“prototype”)、<strong>@Service</strong>，将此多例注入容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAsync</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Call call;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = k; i &lt; k + <span class="number">100</span>; i++)&#123;</span><br><span class="line">                User user = call.getUser(i);</span><br><span class="line">                <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    list.add(user);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            call.saveAll(list);</span><br><span class="line">            <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">            log.info(<span class="string">&quot;程序开始值:&quot;</span> + k + <span class="string">&quot;程序执行时间:&quot;</span> + (endTime-startTime)/<span class="number">1000</span> + <span class="string">&quot;s&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每个线程获取100条数据</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p><strong>junit单元测试不支持多线程</strong>，执行test方法，test方法执行结束后会无视其他线程直接结束程序。所以需要在spring boot的<strong>启动类</strong>中运行多线程。加上<strong>@EnableAsync</strong>注解，使多线程可用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		ApplicationContext applicationContext = SpringApplication.run(Application.class, args);</span><br><span class="line">		MyAsync m = applicationContext.getBean(MyAsync.class);</span><br><span class="line">		<span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = k ; i &lt; k + <span class="number">1000</span> ; i += <span class="number">100</span>)&#123;</span><br><span class="line">			m.run(i);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从k开始，开启10个线程，获取1000条数据，</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>大量获取数据可能会封ip，推荐使用<strong>代理ip</strong>获取数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Proxy proxy = <span class="keyword">new</span> Proxy(Proxy.Type.HTTP, <span class="keyword">new</span> InetSocketAddress(ip, port));</span><br><span class="line">HttpURLConnection connection = (HttpURLConnection) url.openConnection(proxy);</span><br></pre></td></tr></table></figure>




]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot-Profiles</title>
    <url>/2019/09/11/Spring%20boot-Profiles/</url>
    <content><![CDATA[<p>为不同的环境配置不同的变量信息，之前一直使用<a href="https://yuangaopeng.com/2019/05/24/maven-profile/">maven的Profiles标签</a>解决这个问题，使用Spring Boot后，配置会更方便</p>
<span id="more"></span>   

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>新建<code>application-dev.properties</code>，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">database=mysql</span><br></pre></td></tr></table></figure>

<p>新建<code>application-prod.properties</code>，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">database=oracle</span><br></pre></td></tr></table></figure>

<h2 id="指定配置文件"><a href="#指定配置文件" class="headerlink" title="指定配置文件"></a>指定配置文件</h2><p>新建<code>application.properties</code>，指定默认配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring.profiles.active=dev</span><br></pre></td></tr></table></figure>

<h2 id="linux平台使用"><a href="#linux平台使用" class="headerlink" title="linux平台使用"></a>linux平台使用</h2><p>打包<code>mvn clean package</code><br>添加后缀<code>java -jar xxx.jar --spring.profiles.active=prod</code></p>
]]></content>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中classpath的使用问题</title>
    <url>/2018/12/03/Spring%20classpath/</url>
    <content><![CDATA[<p>在Spring的配置文件中，经常使用<strong>classpath：xxx.xxx</strong>来读取文件。对于maven项目，误区是读取的文件必须在<strong>resources</strong>下，其实并不是。</p>
<span id="more"></span>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><p>对于maven管理的项目，我们分别从三个例子分析，读取的文件位置可以在什么地方。</p>
<p>配置文件中加入以下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;txt&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.beans.factory.config.PropertiesFactoryBean&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;location&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:/txt/readme.txt&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Resource(name=&quot;txt&quot;)</span></span><br><span class="line"><span class="keyword">protected</span> Properties Properties;</span><br></pre></td></tr></table></figure>

<h3 id="第一种情况（resources下）"><a href="#第一种情况（resources下）" class="headerlink" title="第一种情况（resources下）"></a>第一种情况（resources下）</h3><p>在resources下，新建文件夹txt，在txt中放入readme.txt，执行测试代码可以正常输出txt中的readme.txt。</p>
<h3 id="第二种情况（jar包中）"><a href="#第二种情况（jar包中）" class="headerlink" title="第二种情况（jar包中）"></a>第二种情况（jar包中）</h3><p>新建项目，文件夹txt中放入readme.txt，打包生成.jar文件，在测试项目中引入生成的jar包，执行测试代码获取到jar包中readme.txt。</p>
<h3 id="第三种情况（resouces和jar中都存在）"><a href="#第三种情况（resouces和jar中都存在）" class="headerlink" title="第三种情况（resouces和jar中都存在）"></a>第三种情况（resouces和jar中都存在）</h3><p>当resources和jar包中都有这个文件的时候，默认只读取resources下的资源文件。</p>
<h2 id="后记-12月4日补充"><a href="#后记-12月4日补充" class="headerlink" title="后记(12月4日补充)"></a>后记(12月4日补充)</h2><p>对于不同项目来说，其classpath不同，上述结论不适用于所有项目。</p>
<h3 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h3><p>上述实验用到的<strong>PropertiesFactoryBean</strong>返回<strong>java.util.Properties</strong>，依赖注入时用到的<strong>setlocation(Resource location)</strong>，所以我们需要对<strong>Resource</strong>进行简单的研究。</p>
<h3 id="Resource接口"><a href="#Resource接口" class="headerlink" title="Resource接口"></a>Resource接口</h3><p>Spring的Resource接口抽象了对低级资源文件的访问，接口定义如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Resource</span> <span class="keyword">extends</span> <span class="title">InputStreamSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">URL <span class="title">getURL</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">File <span class="title">getFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Resource <span class="title">createRelative</span><span class="params">(String relativePath)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getFilename</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个接口继承于InputStreamSource接口，接口定义如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InputStreamSource</span> </span>&#123;</span><br><span class="line">    <span class="function">InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Resource接口中的一些重要的方法如下：</p>
<ul>
<li><strong>getInputStream()</strong>：定位和打开资源文件，从资源文件中返回<strong>InputStream</strong></li>
<li><strong>exists()</strong>：返回<strong>boolean</strong>，表示资源是否存在</li>
<li><strong>isOpen()</strong>：返回<strong>boolean</strong>，如果是<strong>true</strong>，资源就只能被访问一次，且需要被关闭。对于其一般的实现类，返回的是<strong>false</strong>，除了<strong>InputStreamResource</strong></li>
<li><strong>getDescription()</strong>：返回对这个资源文件的描述</li>
</ul>
<p>其他的方法可以获得一个真正的<strong>URL</strong>对象或者<strong>File</strong>对象，代表资源文件。<br>在Spring框架中，当一个资源文件被需要时，会大量地使用<strong>Resource</strong>接口作为参数类型。当然在我们自己的代码中，也可以使用它的实现类获取文件资源，是<strong>URL</strong>更有用的代替。</p>
<h3 id="内置的Resource实现类"><a href="#内置的Resource实现类" class="headerlink" title="内置的Resource实现类"></a>内置的Resource实现类</h3><ul>
<li><strong>UrlResource</strong>：包含了<strong>java.net.URL</strong>，可以用URL访问对象，如<strong>Files</strong>，<strong>Http</strong>，<strong>Ftp</strong>，一些前缀被使用，用来表名URL的类型，如<strong>file:</strong>，<strong>http:</strong>，<strong>ftp:</strong></li>
<li><strong>ClassPathResource</strong>：这个类代表了一个应该从<strong>classpath</strong>获取的资源文件，使用<strong>classloader</strong>，或者<strong>class</strong>来载入资源</li>
<li>FileSystemResource</li>
<li>ServletContextResource</li>
<li>InputStreamResource</li>
<li>ByteArrayResource</li>
</ul>
<p>前两个实现类都可以直接用构造器显式创建，不过大部分情况下，是用string表示路径来调用api方法（bean依赖注入），隐式创建，如果前缀是<strong>classpath</strong>，则创建<strong>ClassPathResource</strong>。</p>
<h3 id="ClassPathResource"><a href="#ClassPathResource" class="headerlink" title="ClassPathResource"></a>ClassPathResource</h3><p>现在可以知道上述实验是生成了<strong>ClassPathResource</strong>类，再看源码（代码中所用到的path为去掉classpath:前缀的路径）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathResource</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>(path, (ClassLoader)<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ClassPathResource</span><span class="params">(String path, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">	Assert.notNull(path, <span class="string">&quot;Path must not be null&quot;</span>);</span><br><span class="line">	String pathToUse = StringUtils.cleanPath(path);</span><br><span class="line">	<span class="keyword">if</span> (pathToUse.startsWith(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">	  pathToUse = pathToUse.substring(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">this</span>.path = pathToUse;</span><br><span class="line">	<span class="keyword">this</span>.classLoader = (classLoader != <span class="keyword">null</span> ? classLoader : ClassUtils.getDefaultClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    InputStream is;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.clazz != <span class="keyword">null</span>) &#123;</span><br><span class="line">      is = <span class="keyword">this</span>.clazz.getResourceAsStream(<span class="keyword">this</span>.path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.classLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">        is = <span class="keyword">this</span>.classLoader.getResourceAsStream(<span class="keyword">this</span>.path);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        is = ClassLoader.getSystemResourceAsStream(<span class="keyword">this</span>.path);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (is == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> FileNotFoundException(getDescription() + <span class="string">&quot; cannot be opened because it does not exist&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终调用<strong>java.lang.ClassLoader</strong>类中的<strong>getResource</strong>方法，在api中关于查找顺序，有以下的描述  </p>
<blockquote>
<p>This method will first search the parent class loader for the resource; if the parent is null the path of the class loader built-in to the virtual machine is searched. That failing, this method will invoke findResource(String) to find the resource.</p>
</blockquote>
<p>此方法首先搜索资源的父类加载器；如果父类加载器为 null，则搜索的路径就是虚拟机的内置类加载器的路径。如果搜索失败，则此方法将调用 findResource(String) 来查找资源。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Bean Scopes</title>
    <url>/2019/08/19/Spring-Bean%20Scopes/</url>
    <content><![CDATA[<p>Spring5中有六种不同的作用域，两种基本作用域<strong>singleton</strong>、<strong>prototype</strong>，另外四种只能在web项目上使用，分别是<strong>request</strong>、<strong>session</strong>、<strong>application</strong>、<strong>websocket</strong>。除此之外还可以<strong>自定义</strong>作用域。</p>
<span id="more"></span>   

<h2 id="Singleton-Scope"><a href="#Singleton-Scope" class="headerlink" title="Singleton Scope"></a>Singleton Scope</h2><p><strong>单例模式</strong>，定义bean的范围为singleton，意为这个bean的所有请求将返回相同的对象。当没有指定范围时，<strong>默认即为singleton</strong>，所以可以不用显式配置。</p>
<h2 id="Prototype-Scope"><a href="#Prototype-Scope" class="headerlink" title="Prototype Scope"></a>Prototype Scope</h2><p><strong>原型模式</strong>，定义bean的范围为prototype，意为每次请求这个bean将返回不同的实例对象。有如下三种配置方式：<br>使用scope注解配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">personPrototype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以用常量代替字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)</span></span><br></pre></td></tr></table></figure>
<p>还可以使用xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;personSingleton&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.baeldung.scopes.Person&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="基于web项目的scope"><a href="#基于web项目的scope" class="headerlink" title="基于web项目的scope"></a>基于web项目的scope</h2><p>这四种在web项目上使用的scope不常用。</p>
<ul>
<li>request：为每一次<strong>http</strong>请求创建一个新实例</li>
<li>session：为每一次<strong>http session</strong>创建一个新实例</li>
<li>application：为<strong>ServletContext</strong>的生命周期创建一个新实例 </li>
<li>websocket：为<strong>WebSocket session</strong>创建一个新实例</li>
</ul>
<h2 id="Custom-scope"><a href="#Custom-scope" class="headerlink" title="Custom scope"></a>Custom scope</h2><p>上述六种作用域内置、固定，且不建议修改的，但可以<strong>自定义扩展</strong>scope的范围。</p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>新建<code>org.springframework.beans.factory.config.Scope</code>接口的实现类，使用synchronized map，一个变量存储和管理对象，另一变量销毁回调</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TenantScope</span> <span class="keyword">implements</span> <span class="title">Scope</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Object&gt; scopedObjects = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Runnable&gt; destructionCallbacks = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接口中有5个方法需要实现</p>
<ul>
<li>get(String name, ObjectFactory&lt;?&gt; objectFactory)：获取scope中的对象，如不存在则新建</li>
<li>getConversationId()：获取scope的名称</li>
<li>registerDestructionCallback(String name, Runnable callback)：注册回调函数，用来销毁指定对象</li>
<li>remove(String name)：移除scope中的对象</li>
<li>resolveContextualObject(String key)：根据key值返回相关的对象</li>
</ul>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>需要在spring容器中注册后才能使用，使用<code>org.springframework.beans.factory.config.CustomScopeConfigurer</code>声明式注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TenantScopeConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CustomScopeConfigurer <span class="title">customScopeConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CustomScopeConfigurer customScopeConfigurer = <span class="keyword">new</span> CustomScopeConfigurer();</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;tenant&quot;</span>, <span class="keyword">new</span> TenantScope());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置scope</span></span><br><span class="line">        customScopeConfigurer.setScopes(map);</span><br><span class="line">        <span class="keyword">return</span> customScopeConfigurer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过bean注解注入<strong>BeanPostProcessor</strong>和<strong>BeanFactoryPostProcessor</strong>时，应注意使用<strong>static</strong>修饰，否则在这个配置类中@Autowired，@Value将不能工作，CustomScopeConfigurer是BeanFactoryPostProcessor的实现类，所以也必须使用static修饰。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用方法与一般scope使用方法相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;tenant&quot;)</span></span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/spring-framework-reference/core.html#beans-factory-scopes">spring-framework-reference</a></li>
<li><a href="https://www.baeldung.com/spring-bean-scopes">baeldung.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-JDBC</title>
    <url>/2019/07/17/Spring-JDBC/</url>
    <content><![CDATA[<p>在Spring框架中使用JDBC存储数据</p>
<span id="more"></span>   
<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>Java数据库连接（Java Database Connectivity）是Java语言中面向关系型数据库的最基础的数据库操作，主要位于JDK中的<strong>java.sql</strong>包中。</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>加载驱动程序</li>
<li>获得数据库连接</li>
<li>操作数据库，实现增删改查</li>
<li>释放资源</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCDataBaseConnect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/management?serverTimezone=GMT&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">&quot;12345678&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        Connection conn = DriverManager.getConnection(URL, USER, PASSWORD);</span><br><span class="line">        Statement stmt = conn.createStatement();</span><br><span class="line">        ResultSet rs = stmt.executeQuery(<span class="string">&quot;SELECT * from t_group&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            System.out.println(rs.getInt(<span class="string">&quot;id&quot;</span>) + <span class="string">&quot;:&quot;</span> + rs.getString(<span class="string">&quot;group_name&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        rs.close();</span><br><span class="line">        stmt.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul>
<li>对数据库过于频繁的操作，造成资源浪费，影响性能</li>
<li>sql硬编码在程序中，不利于维护</li>
</ul>
<h2 id="Spring中使用JDBC"><a href="#Spring中使用JDBC" class="headerlink" title="Spring中使用JDBC"></a>Spring中使用JDBC</h2><p>Spring框架负责所有底层实现，比如获取连接和释放资源，对原生JDBC进行了很好的优化处理，对数据库的操作更方便和友好</p>
<h3 id="jdbc-properties"><a href="#jdbc-properties" class="headerlink" title="jdbc.properties"></a>jdbc.properties</h3><p>配置属性文件如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc.driverClassName=org.springframework.jdbc.datasource.DriverManagerDataSource</span><br><span class="line">jdbc.url=jdbc:mysql://127.0.0.1:3306/management?serverTimezone=GMT</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=12345678</span><br></pre></td></tr></table></figure>

<h3 id="applicationContext-xml"><a href="#applicationContext-xml" class="headerlink" title="applicationContext.xml"></a>applicationContext.xml</h3><p>配置<strong>DataSource</strong>和<strong>JdbcTemplate</strong>如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>一般情况下，数据库中的一个表对应一个Java类，使数据可以作为类对象进行传递，方便快捷</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TGroup</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String groupName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getGroupName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> groupName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGroupName</span><span class="params">(String groupName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.groupName = groupName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Department [id=&quot;</span> + id + <span class="string">&quot;, groupName=&quot;</span> + groupName + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>Spring中<strong>RowMapper</strong>接口可以将<strong>表中数据</strong>映射为<strong>实体类对象</strong>，这个接口有BeanPropertyRowMapper的实现类，可以方便使用，但为了更高效率，我们需要自定义实现类。</p>
<blockquote>
<p>this class is designed to provide convenience rather than high performance. For best performance, consider using a custom RowMapper implementation.</p>
</blockquote>
<ul>
<li>简便写法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">&quot;select * from t_group&quot;</span>;</span><br><span class="line">RowMapper&lt;TGroup&gt; rowMapper = <span class="keyword">new</span> BeanPropertyRowMapper&lt;TGroup&gt;(TGroup.class);</span><br><span class="line">List&lt;TGroup&gt; groups = jdbcTemplate.query(sql, rowMapper);</span><br></pre></td></tr></table></figure>
<ul>
<li>高效写法（推荐）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;TGroup&gt; groups = jdbcTemplate.query(</span><br><span class="line">        <span class="string">&quot;select id, group_name from t_group&quot;</span>,</span><br><span class="line">        <span class="keyword">new</span> RowMapper&lt;TGroup&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> TGroup <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">                TGroup group = <span class="keyword">new</span> TGroup();</span><br><span class="line">                group.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">                group.setGroupName(rs.getString(<span class="string">&quot;group_name&quot;</span>));</span><br><span class="line">                <span class="keyword">return</span> group;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>


<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Spring框架对JDBC操作进行了封装，并有统一的模板类JdbcTemplate，使对数据库的更方便友好，但功能不够强大，需要和hibernate、mybaties等框架混合使用</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/spring-framework-reference/data-access.html#jdbc">spring-framework-reference</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>数据库</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-学习笔记</title>
    <url>/2018/10/23/Spring-learning/</url>
    <content><![CDATA[<p>Spring是以IoC(Inverse of Control控制反转)和AOP(Aspect Oriented Programming 面向切面编程)为内核的轻量级开源框架,目前最新版本为** Spring Framework 5 **</p>
<span id="more"></span>   
<h2 id="框架结构"><a href="#框架结构" class="headerlink" title="框架结构"></a>框架结构</h2><p>Spring由七个模块组成，可以自由挑选需要的模块和功能，忽略不必要的功能。</p>
<ul>
<li>Core：最基础核心的部分，IoC容器，spEL，i18n</li>
<li>Testing：应用于单元测试和集成测试</li>
<li>Data Access：提供事务，DAO，JDBC，ORM支持</li>
<li>Web Servlet：Spring MVC, WebSocket</li>
<li>Web Reactive：响应式web应用</li>
<li>Integration：集成JMS，JMX，Tasks, Scheduling</li>
<li>Languages：Kotlin, Groovy, Dynamic languages</li>
</ul>
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h2><ul>
<li>spring-beans.jar：Ioc/DI的相关类</li>
<li>spring-core.jar:Spring的核心工具类，需要依赖commons-logging-1.1.1.jar</li>
<li>spring-context.jar：Ioc之上提供更多拓展服务</li>
<li>spring-expression.jar：Spring表达式语言</li>
<li>spring-aop.jar：基于AOP 的Spring特性</li>
<li>spring-aspects.jar：提供对AspectJ的支持</li>
<li>spring-jdbc.jar：对Spring 对JDBC 数据访问进行封装的所有类</li>
<li>spring-web.jar：web开发的核心类</li>
<li>spring-webmvc.jar：Spring MVC框架所有需要用的类</li>
<li>spring-context-support.jar：Spring context的扩展支持</li>
<li>spring-orm.jar：整合第三方的orm实现，如hibernate</li>
<li>spring-oxm.jar：Spring对于object/xml映射的支持，可以让JAVA与XML之间来回切换</li>
<li>spring-test.jar：对JUNIT等测试框架的简单封装</li>
</ul>
<h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><p>新建一个Junit4和Spring应用的项目</p>
<h3 id="Junit4项目"><a href="#Junit4项目" class="headerlink" title="Junit4项目"></a>Junit4项目</h3><p>先简单介绍Junit4，Junit4是单元测试工具，使用简单。<br>jar包：hamcrest-core-xxx.jar   hamcrest-library-xxx.jar    junit-4.xx.jar<br>在使用方法前加@Test，判断测试结果是否和预期结果相同用方法assertEquals。  </p>
<p>新建一个People.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">	      <span class="keyword">this</span>.name = name;</span><br><span class="line">	 &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>新建测试类Jtest.java  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jtest</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		People p = <span class="keyword">new</span> People();</span><br><span class="line">		p.setName(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">		String name = p.getName();</span><br><span class="line">		assertEquals(name, <span class="string">&quot;123&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Spring-junit4项目"><a href="#Spring-junit4项目" class="headerlink" title="Spring+junit4项目"></a>Spring+junit4项目</h3><p>建两个Souce Folder，一个放java源文件src/java，一个放配置文件src/resourecs。<br>导入Spring相对的jar包  </p>
<p>新建一个applicationContext.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans  </span></span></span><br><span class="line"><span class="string"><span class="tag">					http:/www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;123&quot;</span> <span class="attr">class</span>=<span class="string">&quot;junit4.People&quot;</span>&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<p>新建一个Springjunit.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;/applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springjunit</span> </span>&#123;</span><br><span class="line">	<span class="meta">@Resource(name=&quot;123&quot;)</span></span><br><span class="line">	<span class="keyword">protected</span> People p;</span><br><span class="line">	<span class="meta">@Test</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;		</span><br><span class="line">		assertEquals(<span class="string">&quot;123456&quot;</span>, p.getName());</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>这就完成了一次依赖注入，可以设置baen id = “123”，也可以设置bean name = “123”，不过也有一些不同之处。</p>
<ul>
<li>如果设置了id属性，则其值必须唯一</li>
<li>如果没有id属性，有name属性，则name的值作为标识符必须唯一</li>
<li>如果没有id，也没有name属性，则需要指向一个类来定义bean</li>
<li>如果id，name同时存在，则id为标识符，但通过name仍可使用</li>
</ul>
<h2 id="Spring-EL"><a href="#Spring-EL" class="headerlink" title="Spring EL"></a>Spring EL</h2><p>Spring3中使用的表达式语言，SpEL，可以很方便的将属性装配到属性或是构造函数中，获取properties中的值，获取Bean的值，功能强大。</p>
<h3 id="选择属性方式"><a href="#选择属性方式" class="headerlink" title="选择属性方式"></a>选择属性方式</h3><p>systemEnvironment:应用程序所在机器上的所有环境变量<br>systemProperties:应用程序启动时所设置的所有属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;homePath&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;systemEnvironment[&#x27;HOME&#x27;]&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="三元运算符（同EL）"><a href="#三元运算符（同EL）" class="headerlink" title="三元运算符（同EL）"></a>三元运算符（同EL）</h3><p>如果条件表达式为true，值为表达式1，为false，值为表达式2</p>
<p>使用格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">(条件表达式)?表达式1:表达式2；</span><br></pre></td></tr></table></figure>
<h3 id="Elvis运算符"><a href="#Elvis运算符" class="headerlink" title="Elvis运算符"></a>Elvis运算符</h3><p>如果表达式1不为null，值为表达式1；如果表达式1为null，值为表达式2<br>使用格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">表达式1:?表达式2；</span><br></pre></td></tr></table></figure>

<h2 id="对集合的操作"><a href="#对集合的操作" class="headerlink" title="对集合的操作"></a>对集合的操作</h2><p>Spring中提供了一些对集合的操作，使得配置更为简洁，主要分为以下六种** constant <strong>，</strong> property-path <strong>，</strong> list <strong>，</strong> set <strong>，</strong> map <strong>，</strong> properties **</p>
<h3 id="命名空间-1"><a href="#命名空间-1" class="headerlink" title="命名空间"></a>命名空间</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:util=&quot;http://www.springframework.org/schema/util&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/util </span><br><span class="line">                    http://www.springframework.org/schema/util/spring-util-3.2.xsd&quot;</span><br></pre></td></tr></table></figure>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">key-type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value-type</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span>		</span><br><span class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span>	</span><br><span class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxx&quot;</span> /&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/xxx.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="对上下文的操作"><a href="#对上下文的操作" class="headerlink" title="对上下文的操作"></a>对上下文的操作</h2><h3 id="命名空间-2"><a href="#命名空间-2" class="headerlink" title="命名空间"></a>命名空间</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">xsi:schemaLocation=&quot;http://www.springframework.org/schema/context  </span><br><span class="line">                    http://www.springframework.org/schema/context/spring-context-3.2.xsd&quot;</span><br></pre></td></tr></table></figure>
<h2 id="component-scan"><a href="#component-scan" class="headerlink" title="component-scan"></a>component-scan</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;xxx.xxx&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>自动扫描注入，使包下所有带有stereotype（@Service，@Component，@Controller，@Repository）注解的类都会注入Spring容器，不需要定义bean,可以使用@Autowired取出，消除set、get方法，自动装配，节省操作。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;regex&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;xx.xx&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>regex：不扫描注入符合正则表达式的类。<br>assignable：不扫描注入指定类名的类。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面对Spring简单地进行了使用和举例，作为一个非常实用的框架，还有许多需要学习的内容，且不仅仅是Spring本身，还有基于Spring的Spring Boot，Spring Integration，Spring Batch，Spring Cloud等优秀的框架。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-元数据配置</title>
    <url>/2019/07/10/Spring-%E5%85%83%E6%95%B0%E6%8D%AE%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Spring中有三种配置元数据的方式，传统的<strong>基于xml</strong>的配置，从2.5开始的<strong>基于注解</strong>的配置，和从3.0开始的<strong>基于Java类</strong>的配置，本文将分别使用这三种方式配置元数据。</p>
<span id="more"></span>   

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>新建Java类（POJOs），用三种方法将此类作为bean注入Spring容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class People &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="XML-based"><a href="#XML-based" class="headerlink" title="XML-based"></a>XML-based</h3><p>基于xml的配置，新建config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;robin&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.People&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;li&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="Annotation-based"><a href="#Annotation-based" class="headerlink" title="Annotation-based"></a>Annotation-based</h3><p>基于注解的配置，新建config.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>同时还要修改要注入的类，增加一行注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;robin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java-based"><a href="#Java-based" class="headerlink" title="Java-based"></a>Java-based</h3><p>基于Java类的配置，新建MyConfiguration类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> People <span class="title">robin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        People robin = <span class="keyword">new</span> People();</span><br><span class="line">        robin.setName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> robin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>三种方法都有自己的适用场景，基于注解会有更少的配置，基于xml则不会触碰源代码，而基于Java类可以脱离xml文件且不会触碰源代码。目前最推荐的方法还是基于xml配置，但使用<strong>Java类</strong>进行配置可能是一种趋势。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/spring-framework-reference/core.html#beans-factory-metadata">spring-framework-reference</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Try with Resources</title>
    <url>/2021/01/12/Try%20with%20Resources/</url>
    <content><![CDATA[<p><code>Try with Resources</code>语句从JDK1.7引入，让我们可以声明资源Resources在Try代码块中，并且在执行后资源将会关闭。(资源实现AutoCloseable接口)</p>
<span id="more"></span>   


<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TryWith</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;test.txt&quot;</span>))) &#123;</span><br><span class="line">        System.out.println(br.readLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在此之前，必须使用finally代码块，确保资源关闭。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TryWithout</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;test.txt&quot;</span>));</span><br><span class="line">        System.out.println(br.readLine());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line">            br.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多个资源"><a href="#多个资源" class="headerlink" title="多个资源"></a>多个资源</h3><p>多个资源可以同时声明在try后面，中间用<code>;</code>分隔。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TryWithMultiple</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (PrintWriter br = <span class="keyword">new</span> PrintWriter(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">         Scanner scanner = <span class="keyword">new</span> Scanner(<span class="keyword">new</span> File(<span class="string">&quot;testRead.txt&quot;</span>))) &#123;</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            br.print(scanner.nextLine());</span><br><span class="line">        &#125;</span><br><span class="line">        br.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>V2ray</title>
    <url>/2020/04/08/V2ray/</url>
    <content><![CDATA[<p>之前使用Shadowsocks，发现服务器ip有被墙的风险，便开始使用V2Ray，保护ip。</p>
<span id="more"></span>  

<h2 id="为什么要科学上网"><a href="#为什么要科学上网" class="headerlink" title="为什么要科学上网"></a>为什么要科学上网</h2><blockquote>
<p>学会有效的使用google，将节省大量开发时间</p>
</blockquote>
<p>不仅是<strong>google</strong>，<strong>Stackoverflow</strong>，相应的<strong>社区</strong>，<strong>官方的文档</strong>，都是我们遇到问题最应该去的地方。</p>
<h2 id="cloudflare"><a href="#cloudflare" class="headerlink" title="cloudflare"></a>cloudflare</h2><p>cloudflare提供免费的CDN加速，DNS解析等功能。</p>
<h3 id="托管"><a href="#托管" class="headerlink" title="托管"></a>托管</h3><p>注册账号后，把域名托管至此平台</p>
<h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>DNS的作用是根据域名查出ip地址，</p>
<ul>
<li>保持<strong>跟域</strong>和<strong>www</strong>的DNS记录不变，从而确保不影响跟域原功能。</li>
<li>新增DNS二级域名到vps地址。</li>
</ul>
<h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>CDN可以有效加速网站访问速度，可以将GitHub Pages加入CDN，从而加速页面访问。</p>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>选择国外vps作为服务器，做流量中转。</p>
<h3 id="vps"><a href="#vps" class="headerlink" title="vps"></a>vps</h3><ul>
<li><p><a href="https://billing.virmach.com/aff.php?aff=9928">virmach</a>（目前使用且推荐，价格便宜）</p>
</li>
<li><p><a href="https://www.vultr.com">vulter</a></p>
</li>
<li><p><a href="https://bwh88.net/">搬瓦工</a></p>
</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用脚本安装<strong>V2ray</strong>服务器端应用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>验证是否成功运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v2ray status</span><br></pre></td></tr></table></figure>

<h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><p>v2ray包含的其他命令，使用如下命令查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v2ray</span><br></pre></td></tr></table></figure>

<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><p>CentOS8为例，执行以下脚本  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>Windows、Andriod都有其相对应的版本。</p>
<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><ul>
<li><a href="https://github.com/2dust/v2rayN/releases">客户端下载</a></li>
</ul>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>zookeeper-学习笔记</title>
    <url>/2019/05/22/ZooKeeper-learning/</url>
    <content><![CDATA[<p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，主要特点：分布式、开源、高效、可靠，在分布式系统中应用广泛。</p>
<span id="more"></span>  

<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="https://zookeeper.apache.org">官网链接</a>  </p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul>
<li>系统：Linux最优，Windows其次，Mac OS X最差，当前系统Windows。</li>
<li>java：1.7及以上必须，当前版本1.8</li>
</ul>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>zookeeper-3.4.14</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>conf目录下新建<strong>zoo.cfg</strong>，配置如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tickTime=2000</span><br><span class="line">initLimit=10</span><br><span class="line">syncLimit=5</span><br><span class="line">dataDir=F:\ZooKeeper\zookeeper-3.4.14\data</span><br><span class="line">dataLogDir=F:\ZooKeeper\zookeeper-3.4.14\log</span><br><span class="line">clientPort=2181</span><br></pre></td></tr></table></figure>

<h2 id="启动（windows）"><a href="#启动（windows）" class="headerlink" title="启动（windows）"></a>启动（windows）</h2><p>服务器启动：运行<code>zkServer.cmd</code>文件，在2181端口下会启动一个java进程。<br>客户端连接：运行<code>zkCli.cmd</code>文件</p>
]]></content>
      <tags>
        <tag>分布式</tag>
        <tag>ZooKeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>Git-学习笔记</title>
    <url>/2018/07/09/git-learning/</url>
    <content><![CDATA[<p>git是由Linux的创始人Linus Torvalds在2005年由C编写完成，用来管理Linux系统的代码库，随后不断发展完善，并迅速流行起来，后来更是随着2008年github的上线，成为最主流的分支式版本控制系统。   </p>
<span id="more"></span>  

<p><img src="/img/logo.jpg" alt="">  </p>
<h2 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h2><p>我们在学习git之前，需要知道什么是Version Control System(VCS)，即版本控制系统。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>版本控制系统是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul>
<li>记录文件的所有历史变化</li>
<li>可以回退到特定的版本</li>
<li>多个分支并行开发</li>
<li>准确找出问题所在</li>
</ul>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li>本地版本管理系统：用简单的数据库记录每次文件差异，作用有限，不适合大型项目管理。</li>
<li>集中式版本控制系统：有一个集中的服务器，包括所有的文件的版本，协同开发人员都可以取出文件，以及提交更新。操作简单，不过如果中央版本库出现问题，则无法工作。</li>
<li>分布式版本控制系统：每一个计算机都是一个完整的仓库，如果某处故障也可以很快地修复，可以离线工作，适合大型多人团队，因其占用空间小，速度快，也适用于大型项目。</li>
</ul>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>对于软件开发人员来说，版本控制必不可少。作为集中式版本控制系统的代表，SVN简单上手，市场占有率高。但相对于SVN，分布式版本控制系统Git，有着更快的速度，更灵活的分支切换，更强大的功能。所以我们需要对<strong>GIt</strong>进行学习和使用。</p>
<h2 id="Git介绍"><a href="#Git介绍" class="headerlink" title="Git介绍"></a>Git介绍</h2><h3 id="官网介绍"><a href="#官网介绍" class="headerlink" title="官网介绍"></a>官网介绍</h3><p><a href="https://git-scm.com/">Git官网链接</a><br>Git是一个开源的分布式版本控制系统，可以有效、快速的处理任何或小或大的项目。</p>
<h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>git项目主要分为三部分，工作区、暂存区和git仓库。</p>
<ul>
<li>工作区：对项目文件做出的修改将保存在工作区中，直至添加到暂存区。</li>
<li>暂存区：可以叫做下一次commit的预览，当commit的时候，git会从中取出改变的内容。git使用名为index的文件暂存更改的对象。</li>
<li>git仓库：存储一系列文件和目录的数据结构。</li>
</ul>
<h2 id="Git安装和配置"><a href="#Git安装和配置" class="headerlink" title="Git安装和配置"></a>Git安装和配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>git在Windows，Linux，Mac上都可以使用。</p>
<ul>
<li>Windows：下载 exe 安装文件并运行</li>
<li>Linux：用系统提供的包管理工具安装</li>
<li>Mac：使用图形化的 Git 安装工具或通过 MacPorts 安装</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>安装完成后，打开“Git Bash”，弹出命令窗口进行配置</p>
<p>用户信息<br>主要需要配置的是个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;Yuan&quot;  </span><br><span class="line">git config --global user.email 610951793@qq.com   </span><br></pre></td></tr></table></figure>

<p>还可以配置文本编辑器、差异分析工具等内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global core.editor vi  </span><br><span class="line">git config --global merge.tool vimdiff</span><br></pre></td></tr></table></figure>


<h2 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h2><h3 id="取得项目的仓库"><a href="#取得项目的仓库" class="headerlink" title="取得项目的仓库"></a>取得项目的仓库</h3><p>有两种取得 Git 项目仓库的方法。第一种是在现存的目录下，通过导入所有文件来创建新的 Git 仓库。第二种是从已有的 Git 仓库克隆出一个新的镜像仓库来。  </p>
<table>
<thead>
<tr>
<th>功能</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>初始化新仓库</td>
<td><code>git init</code></td>
</tr>
<tr>
<td>从远程仓库复制出新仓库</td>
<td><code>git clone [url]</code></td>
</tr>
</tbody></table>
<p>url示例：<a href="http://github.com/yuan0824/first.git">http://github.com/yuan0824/first.git</a></p>
<h3 id="记录每次更新到仓库"><a href="#记录每次更新到仓库" class="headerlink" title="记录每次更新到仓库"></a>记录每次更新到仓库</h3><p>文件工作目录下的每一个文件都只有两种状态：已跟踪或未跟踪。 已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区。 </p>
<table>
<thead>
<tr>
<th>功能</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>查看index文件（暂存区）中的内容</td>
<td><code>git status</code></td>
</tr>
<tr>
<td>添加文件到index文件（暂存区）</td>
<td><code>git add [fileName]</code></td>
</tr>
<tr>
<td>比较修改后的差异</td>
<td><code>git diff</code></td>
</tr>
<tr>
<td>提交更新</td>
<td><code>git commit -m [mess]</code></td>
</tr>
<tr>
<td>修改最近一次提交的日志</td>
<td><code>git commit --amend</code></td>
</tr>
<tr>
<td>删除文件</td>
<td><code>git rm [fileName]</code></td>
</tr>
<tr>
<td>移动文件</td>
<td><code>git mv [source] [desti]</code></td>
</tr>
<tr>
<td>重命名文件</td>
<td><code>git mv [oldname] [newname]</code></td>
</tr>
<tr>
<td>还原工作区的文件</td>
<td><code>git restore [fileName]</code></td>
</tr>
<tr>
<td>还原在暂存区（index文件）中的内容</td>
<td><code>git restore --staged [fileName]</code></td>
</tr>
<tr>
<td>还原在工作区和暂存区中的内容</td>
<td><code>git restore --staged --worktree [fileName]</code></td>
</tr>
<tr>
<td>重置文件到已修改的状态</td>
<td><code>git reset --soft [commitID]</code></td>
</tr>
<tr>
<td>重置暂存区的文件与上一次的commit文件保持一致</td>
<td><code>git reset [commitID]</code>或<code>git reset --mixed [commitID]</code></td>
</tr>
<tr>
<td>重置工作区的文件与上一次的commit文件保持一致</td>
<td><code>git reset --hard [commitID]</code></td>
</tr>
</tbody></table>
<p><strong>流程如图所示：</strong><br><img src="/img/lifecycle.png" alt="">  </p>
<h2 id="Git分支和合并"><a href="#Git分支和合并" class="headerlink" title="Git分支和合并"></a>Git分支和合并</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Git处理分支的方式轻量，创建新分支这一操作能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 </p>
<h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git-branch"></a>git-branch</h3><p>列出，创建或删除分支</p>
<ul>
<li><code>git branch</code>：列出所有分支（当前分支前带星号）</li>
<li><code>git branch &lt;branch&gt;</code>：创建分支</li>
<li><code>git branch -d &lt;branch&gt;</code>：删除分支</li>
<li><code>git branch -D &lt;branch&gt;</code>：强制删除分支</li>
<li><code>git branch -m &lt;oldbranch&gt; &lt;newbranch&gt;</code>：分支重命名</li>
<li><code>git branch -v</code>：打印各分支最后一次提交信息</li>
<li><code>git branch -vv</code>：打印各分支最后一次提交信息和对应远程分支的路径</li>
</ul>
<h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git-checkout"></a>git-checkout</h3><p>切换分支或还原工作区的文件</p>
<ul>
<li><code>git checkout &lt;branch&gt;</code>：切换到分支branch</li>
<li><code>git checkout &lt;fileName&gt;</code>：撤销对文件的修改（未添加到暂存区）</li>
<li><code>git checkout -f &lt;branch&gt;</code>：强制切换到分支branch（工作区修改的文件会丢失）</li>
<li><code>git checkout -b &lt;branch&gt;</code>：创建并切换到分支branch</li>
<li><code>git checkout -b &lt;branch&gt; &lt;remote&gt;/&lt;branch&gt;</code>：把远程分支复制到本地并切换</li>
</ul>
<h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git-merge"></a>git-merge</h3><p>把两个或多个开发历史合并，此步骤可能会有冲突。</p>
<ul>
<li><code>git merge &lt;branch&gt;</code>：把branch合并到当前分支</li>
<li><code>git merge &lt;branchA&gt; &lt;branchB&gt;</code>：手动合并代码，把branchA合并到branchB</li>
</ul>
<h3 id="git-log"><a href="#git-log" class="headerlink" title="git-log"></a>git-log</h3><p>按提交时间列出所有的更新，最近的更新排在最上面。</p>
<ul>
<li><code>git log</code></li>
</ul>
<h3 id="git-shortlog"><a href="#git-shortlog" class="headerlink" title="git-shortlog"></a>git-shortlog</h3><p>查看简要的提交日志</p>
<ul>
<li><code>git shortlog</code></li>
</ul>
<h3 id="git-stash"><a href="#git-stash" class="headerlink" title="git-stash"></a>git-stash</h3><p>将修改的文件隐藏</p>
<ul>
<li><code>git stash</code>：将所有修改的文件隐藏</li>
<li><code>git stash push</code>：将所有隐藏的修改文件显示</li>
</ul>
<h3 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h3><p>当两个分支对同一个文件进行更改的时候，就会产生冲突。或者在同一个分支中，两个开发者都修改了某个文件，也会发生冲突。<br><strong>解决方法</strong>：当发生分支合并冲突的时候，使用<strong>git status</strong>命令，版本库会告诉我们哪个文件产生了冲突，然后手动将两个文件内容修改一样，再添加到暂存区并提交即可解决分支合并冲突。</p>
<h2 id="分享和更新项目"><a href="#分享和更新项目" class="headerlink" title="分享和更新项目"></a>分享和更新项目</h2><p>与其他开发人员合作开发项目，需要注意的是pull或者merge的时候需要先commit！否则可能会造成代码丢失</p>
<h3 id="git-fetch"><a href="#git-fetch" class="headerlink" title="git-fetch"></a>git-fetch</h3><p>从另一个仓库，下载对象和引用</p>
<ul>
<li>git fetch <repository></li>
</ul>
<h3 id="git-pull"><a href="#git-pull" class="headerlink" title="git-pull"></a>git-pull</h3><p>从另一个仓库或者本地分支下载对象和引用并合并，相当于fetch+merge</p>
<ul>
<li><code>git pull upstream &lt;branch&gt;</code>：把upstream仓库的特定分支拉取并合并到本地当前分支</li>
<li><code>git pull upstream &lt;branch&gt;:develop</code>：把upstream仓库的特定分支拉取并合并到本地develop分支</li>
</ul>
<h3 id="git-push"><a href="#git-push" class="headerlink" title="git-push"></a>git-push</h3><p>更新远端的引用和相关的对象</p>
<ul>
<li><code>git push</code>：推送到当前分支默认远程分支</li>
<li><code>git push -f</code>：强制推送到远端代码</li>
<li><code>git push &lt;branch&gt;</code>：推送到远端的某个指定分支</li>
<li><code>git push origin master</code>：本地的master分支推送到远程origin仓库的master分支</li>
</ul>
<h3 id="git-remote"><a href="#git-remote" class="headerlink" title="git-remote"></a>git-remote</h3><p>管理被跟踪的仓库</p>
<ul>
<li><code>git remote</code>：显示远程仓库名称</li>
<li><code>git remote -v</code>：显示远程仓库信息</li>
<li><code>git remote show &lt;name&gt;</code>：显示特定远程仓库的详细信息</li>
<li><code>git remote add &lt;name&gt; &lt;url&gt;</code>：添加远程仓库</li>
<li><code>git remote remove &lt;name&gt;</code>：删除远程仓库</li>
<li><code>git remote rename &lt;old name&gt; &lt;new name&gt;</code>：远程仓库的重命名</li>
<li><code>git remote set-url &lt;shortname&gt; &lt;url&gt;</code>：远程仓库地址修改</li>
</ul>
<h2 id="Git远程仓库与Git托管平台"><a href="#Git远程仓库与Git托管平台" class="headerlink" title="Git远程仓库与Git托管平台"></a>Git远程仓库与Git托管平台</h2><p>通过 Git 分享你的代码或者与其他开发人员合作，你就需要将数据放到一台其他开发人员能够连接的服务器上。常用的远程仓库主要有两个，<strong>GitHub</strong>和<strong>GitLab</strong>.</p>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>github是一个基于git的代码托管平台，可以实现 Git 托管、问题追踪、代码审查以及其它事情。主要适用于普通的个人开源代码。</p>
<h3 id="用SSH连接到GitHub"><a href="#用SSH连接到GitHub" class="headerlink" title="用SSH连接到GitHub"></a>用SSH连接到GitHub</h3><p><a href="https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh/checking-for-existing-ssh-keys">参阅 GitHub 的 SSH 密钥指南</a>  </p>
<p>连接GitHub需要使用SSH协议作为传输协议，SSH架设相对简单，多数管理员都有使用经验，并且多数操作系统都包含了它及相关的管理工具。 其次，通过 SSH 访问是安全的 —— 所有传输数据都要经过授权和加密。并且SSH协议很高效，在传输前也会尽量压缩数据。  </p>
<ol>
<li>关于SSH： 使用SSH协议，可以连接并认证到远程服务器，用SSH keys访问GitHub，不需要提供用户名和密码。  </li>
<li>检查已存在的SSH keys： 在产生一个SSH key之前，需要查看是否存在SSH keys。  输入<strong>ls -al ~/.ssh</strong>，查看是否有SSH keys存在，不存在要生成一个新的SSH Key。<blockquote>
<p>一般情况下，私钥名为<code>id_rsa</code>，公钥名为<code>id_rsa.pub</code></p>
</blockquote>
</li>
</ol>
<ol start="3">
<li>创建一个新的SSH key，输入 <code>ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</code>，<br>和[密码]。</li>
<li>添加到ssh-agent，输入<strong>ssh-add ~/.ssh/id_rsa</strong>。</li>
<li>添加新SSH key到GitHub账号 ，输入<strong>clip &lt; ~/.ssh/id_rsa.pub</strong>，得到后在GitHub账号下添加。</li>
<li>测试SSH是否连接成功， 输入<strong>ssh -T <a href="mailto:git@github.com">git@github.com</a></strong>，成功则显示You’ve successfully authenticated，否则重新检查前几步操作。</li>
<li>使用SSH key开始工作  </li>
</ol>
<h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><p>github有时无法登录，此时需要设置代理</p>
<p>设置http代理如下：<br><code>git config --global http.proxy 127.0.0.1:10809</code></p>
<h2 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h2><p>GitLab是用来托管git项目的平台，适合在企业或项目组中使用，可以保证代码的安全性，并提供可视化界面，更方便对项目进行管理和监控。因与GitHub大体功能相同。</p>
<h2 id="主要参考资料"><a href="#主要参考资料" class="headerlink" title="主要参考资料"></a>主要参考资料</h2><ol>
<li><a href="https://git-scm.com/docs">官方文档</a>  ：   <a href="https://git-scm.com/docs">https://git-scm.com/docs</a></li>
<li><a href="https://git-scm.com/book">中文推荐文档</a>  ：  <a href="https://git-scm.com/book">https://git-scm.com/book</a></li>
</ol>
]]></content>
      <tags>
        <tag>Git</tag>
        <tag>版本控制</tag>
        <tag>项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-FTP与SSH</title>
    <url>/2019/08/06/linux-FTP%E4%B8%8ESSH/</url>
    <content><![CDATA[<p>在操作远程linux系统的时候，经常会使用<strong>SSH</strong>协议登录，执行linux命令；有时也需要<strong>FTP</strong>协议登录，进行大文件传输，结合使用可以满足大部分需求。</p>
<span id="more"></span>

<h2 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h2><p>在CentOS 7的环境下进行测试</p>
<ul>
<li>OS：CentOS 7 x64</li>
<li>RAM：1024 MB</li>
<li>Storage：25 GB SSD</li>
</ul>
<h2 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h2><p>FTP（文件传输协议）是一个用于在计算机网络上在客户端和服务器之间进行文件传输的<strong>应用层协议</strong>。</p>
<h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p>默认运行在<strong>20</strong>和<strong>21</strong>两个端口</p>
<ul>
<li>20：在客户端和服务器之间传输数据流</li>
<li>21：传输控制流</li>
</ul>
<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>可靠和高效的传输数据，主要用来<strong>传输文件</strong></p>
<h3 id="Linux服务器端工具"><a href="#Linux服务器端工具" class="headerlink" title="Linux服务器端工具"></a>Linux服务器端工具</h3><ul>
<li><strong>vsftpd</strong>是一个较为安全的FTP服务器软件，<strong>安装</strong>命令<code>yum install vsftpd</code></li>
<li><strong>vsftpd</strong>默认设置为<strong>禁止root用户</strong>登录ftp，需要<strong>新建用户</strong></li>
</ul>
<h3 id="Window客户端工具"><a href="#Window客户端工具" class="headerlink" title="Window客户端工具"></a>Window客户端工具</h3><p><strong>WinSCP</strong>是Windows系统下开源的FTP客户端，支持SFTP，FTP，SCP等传输</p>
<h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>SSH（安全外壳协议）是建立在<strong>应用层</strong>基础上的<strong>网络传输协议</strong>。</p>
<h3 id="端口-1"><a href="#端口-1" class="headerlink" title="端口"></a>端口</h3><p>默认端口<strong>22</strong></p>
<h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>客户端与远程主机交互，主要用来<strong>执行linux命令</strong></p>
<h3 id="Linux服务器端"><a href="#Linux服务器端" class="headerlink" title="Linux服务器端"></a>Linux服务器端</h3><p><strong>OpenSSH</strong>是主流的SSH协议的免费开源实现</p>
<h3 id="Window客户端工具-1"><a href="#Window客户端工具-1" class="headerlink" title="Window客户端工具"></a>Window客户端工具</h3><p><strong>Xshall</strong>是一款强大的安全终端模拟软件，有免费的家庭/校园版，支持SSH，TELNET等交互方式。</p>
<h2 id="用户命令"><a href="#用户命令" class="headerlink" title="用户命令"></a>用户命令</h2><p>推荐使用非root用户登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 新建用户</span><br><span class="line">useradd yuan</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 修改密码</span><br><span class="line">passwd yuan</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>jbpm和drools</title>
    <url>/2021/03/01/jbpm%E5%92%8Cdrools/</url>
    <content><![CDATA[<p>JBPM是开源的工作流引擎，drools是基于RETE算法的开源规则引擎。</p>
<span id="more"></span>   

<h1 id="JBPM"><a href="#JBPM" class="headerlink" title="JBPM"></a>JBPM</h1><p>JBPM核心特性</p>
<ul>
<li>轻量（基于Java且完全开源）</li>
<li>支持bpmn2</li>
<li>支持持久层和事务</li>
<li>UI界面</li>
<li>可以基于eclipse和web</li>
<li>规则引擎</li>
</ul>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>在eclipse中安装插件<code>https://downloads.jboss.org/jbpm/release/7.47.0.Final/updatesite/</code>，下载运行时类并配置<code>https://download.jboss.org/jbpm/release/7.47.0.Final/jbpm-7.47.0.Final-bin.zip</code>。此时可以创建一个默认的HelloWorld示例。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>HelloWorld示例目录结构如图<br><img src="/img/jbpm_eclipse.png" alt=""> </p>
<p><code>ProcessMain</code>代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ProcessMain.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> usePersistence = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// load up the knowledge base</span></span><br><span class="line">        KieBase kbase = readKnowledgeBase();</span><br><span class="line">        StatefulKnowledgeSession ksession = newStatefulKnowledgeSession(kbase);</span><br><span class="line">        <span class="comment">// start a new process instance</span></span><br><span class="line">        ksession.startProcess(<span class="string">&quot;com.sample.bpmn.hello&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;Process started ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> KieBase <span class="title">readKnowledgeBase</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();</span><br><span class="line">        kbuilder.add(ResourceFactory.newClassPathResource(<span class="string">&quot;com/sample/sample.bpmn2&quot;</span>), ResourceType.BPMN2);</span><br><span class="line">        <span class="keyword">return</span> kbuilder.newKieBase();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StatefulKnowledgeSession <span class="title">newStatefulKnowledgeSession</span><span class="params">(KieBase kbase)</span> </span>&#123;</span><br><span class="line">        RuntimeEnvironmentBuilder builder = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ( usePersistence ) &#123;</span><br><span class="line">            Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">            properties.put(<span class="string">&quot;driverClassName&quot;</span>, <span class="string">&quot;org.h2.Driver&quot;</span>);</span><br><span class="line">            properties.put(<span class="string">&quot;className&quot;</span>, <span class="string">&quot;org.h2.jdbcx.JdbcDataSource&quot;</span>);</span><br><span class="line">            properties.put(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;sa&quot;</span>);</span><br><span class="line">            properties.put(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            properties.put(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:h2:tcp://localhost/~/jbpm-db&quot;</span>);</span><br><span class="line">            properties.put(<span class="string">&quot;datasourceName&quot;</span>, <span class="string">&quot;jdbc/jbpm-ds&quot;</span>);</span><br><span class="line">            PersistenceUtil.setupPoolingDataSource(properties);</span><br><span class="line">            Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;hibernate.dialect&quot;</span>, <span class="string">&quot;org.hibernate.dialect.H2Dialect&quot;</span>);</span><br><span class="line">            EntityManagerFactory emf = Persistence.createEntityManagerFactory(<span class="string">&quot;org.jbpm.persistence.jpa&quot;</span>);                            </span><br><span class="line">            builder = RuntimeEnvironmentBuilder.Factory.get()</span><br><span class="line">                .newDefaultBuilder()</span><br><span class="line">                .entityManagerFactory(emf);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            builder = RuntimeEnvironmentBuilder.Factory.get()</span><br><span class="line">                .newDefaultInMemoryBuilder();</span><br><span class="line">            DeploymentDescriptor descriptor = </span><br><span class="line">		<span class="keyword">new</span> DeploymentDescriptorManager().getDefaultDescriptor().getBuilder().auditMode(AuditMode.NONE).get();	</span><br><span class="line">            builder.addEnvironmentEntry(<span class="string">&quot;KieDeploymentDescriptor&quot;</span>, descriptor);                </span><br><span class="line">        &#125;</span><br><span class="line">        builder.knowledgeBase(kbase);</span><br><span class="line">        RuntimeManager manager = RuntimeManagerFactory.Factory.get().newSingletonRuntimeManager(builder.get());</span><br><span class="line">        <span class="keyword">return</span> (StatefulKnowledgeSession) manager.getRuntimeEngine(EmptyContext.get()).getKieSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>bpmn2文件直接用图形化页面编辑。</p>
<h1 id="Drools"><a href="#Drools" class="headerlink" title="Drools"></a>Drools</h1><p>基本概念</p>
<ul>
<li>事实(facts)：代表规则的输入数据。</li>
<li>规则(rule)：事实和动作之间的连接，有两种表示方式，一种是用Drools规则语言写的<code>.drl</code>文件，一种是用决策表的<code>excel</code>文件。</li>
<li>KieSession：拥有触发规则的所有资源</li>
</ul>
<h2 id="安装Drools插件"><a href="#安装Drools插件" class="headerlink" title="安装Drools插件"></a>安装Drools插件</h2><p>eclipse对Drools的支持更加友好，所以用eclipse作为开发工具。</p>
<p>步骤：Help -&gt; Install New Software。然后选择合适的版本<br><code>https://download.jboss.org/drools/release/7.47.0.Final/org.drools.updatesite/</code><br>如eclipse插件下载失败，根据报错信息去网站下载jar包，放入eclipse的plugins文件夹下。</p>
<h2 id="配置Drools-Runtimes"><a href="#配置Drools-Runtimes" class="headerlink" title="配置Drools Runtimes"></a>配置Drools Runtimes</h2><p>下载<code>drools-distribution-7.47.0.Final.zip</code>，解压缩,eclipse–&gt;preferences–&gt;drools</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>新建drools项目，HelloWorld示例目录结构如图<br><img src="/img/drools_eclipse.png" alt=""> </p>
<p>DroolsTest类代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DroolsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// load up the knowledge base</span></span><br><span class="line">	        KieServices ks = KieServices.Factory.get();</span><br><span class="line">    	    KieContainer kContainer = ks.getKieClasspathContainer();</span><br><span class="line">        	KieSession kSession = kContainer.newKieSession(<span class="string">&quot;ksession-rules&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// go !</span></span><br><span class="line">            Message message = <span class="keyword">new</span> Message();</span><br><span class="line">            message.setMessage(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">            message.setStatus(Message.HELLO);</span><br><span class="line">            kSession.insert(message);</span><br><span class="line">            kSession.fireAllRules();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            t.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HELLO = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GOODBYE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.message = message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.status = status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>配置文件kmodule.xml如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kmodule</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://jboss.org/kie/6.0.0/kmodule&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">kbase</span> <span class="attr">name</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">packages</span>=<span class="string">&quot;com.sample.rules&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ksession</span> <span class="attr">name</span>=<span class="string">&quot;ksession-rules&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">kbase</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">kbase</span> <span class="attr">name</span>=<span class="string">&quot;dtables&quot;</span> <span class="attr">packages</span>=<span class="string">&quot;com.sample.dtables&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ksession</span> <span class="attr">name</span>=<span class="string">&quot;ksession-dtables&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">kbase</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">kbase</span> <span class="attr">name</span>=<span class="string">&quot;process&quot;</span> <span class="attr">packages</span>=<span class="string">&quot;com.sample.process&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ksession</span> <span class="attr">name</span>=<span class="string">&quot;ksession-process&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">kbase</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">kmodule</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>规则文件Sample.drl如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.sample.rules</span><br><span class="line"> </span><br><span class="line">import com.sample.DroolsTest.Message;</span><br><span class="line"> </span><br><span class="line">rule &quot;Hello World&quot;</span><br><span class="line">    when</span><br><span class="line">        m : Message( status == Message.HELLO, myMessage : message )</span><br><span class="line">    then</span><br><span class="line">        System.out.println( myMessage );</span><br><span class="line">        m.setMessage( &quot;Goodbye cruel world&quot; );</span><br><span class="line">        m.setStatus( Message.GOODBYE );</span><br><span class="line">        update( m );</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">rule &quot;GoodBye&quot;</span><br><span class="line">    when</span><br><span class="line">        Message( status == Message.GOODBYE, myMessage : message )</span><br><span class="line">    then</span><br><span class="line">        System.out.println( myMessage );</span><br><span class="line">end</span><br></pre></td></tr></table></figure>



<h2 id="决策表"><a href="#决策表" class="headerlink" title="决策表"></a>决策表</h2><ul>
<li>决策表使用简洁的语法定义一系列规则，格式为.xls或者csv。</li>
<li>决策表分两部分<code>RuleSet</code>和<code>RuleTable</code>。</li>
</ul>
<h3 id="RuleSet"><a href="#RuleSet" class="headerlink" title="RuleSet"></a>RuleSet</h3><p>常用的关键字</p>
<ul>
<li>RuleSet：生成DRL文件的包名，必须在第一行。</li>
<li>Import：引入的java类，以逗号分隔。</li>
</ul>
<h3 id="RuleTable"><a href="#RuleTable" class="headerlink" title="RuleTable"></a>RuleTable</h3><p>RuleTable左边的行都会被忽略</p>
<h2 id="DRL语言"><a href="#DRL语言" class="headerlink" title="DRL语言"></a>DRL语言</h2><p>定义在.drl文件中业务规则，一个文件可以包含一到多个规则。</p>
<h3 id="规则属性"><a href="#规则属性" class="headerlink" title="规则属性"></a>规则属性</h3><p>属性定义位置在条件和动作前，格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rule &quot;rule_name&quot;</span><br><span class="line">    // Attribute</span><br><span class="line">    // Attribute</span><br><span class="line">    when</span><br><span class="line">        // Conditions</span><br><span class="line">    then</span><br><span class="line">        // Actions</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>常用规则属性有：</p>
<ul>
<li>no-loop：布尔值，默认为false，意为只要满足条件，就会重复执行</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>js-学习笔记</title>
    <url>/2018/05/04/js-learning/</url>
    <content><![CDATA[<p>js即JavaScript，是一种很基础的直译式脚本语言，是一种动态类型、弱类型、基于原型的语言，内置支持类型。是进行前端的开发，必不可少的语言。</p>
<span id="more"></span>  
<h3 id="在html中直接使用"><a href="#在html中直接使用" class="headerlink" title="在html中直接使用"></a>在html中直接使用</h3><p>在body标签的script标签下直接使用<br>输出在页面：<br><code>document.write(&quot;This is a sentence&quot;);</code><br>提供一个功能：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function myFunction()</span><br><span class="line">&#123;</span><br><span class="line">x=document.getElementById(&quot;A text&quot;);  </span><br><span class="line">x.innerHTML=&quot;The text that will be!&quot;;    </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h3 id="js剥离单独存在"><a href="#js剥离单独存在" class="headerlink" title="js剥离单独存在"></a>js剥离单独存在</h3><p>javascript文件的后缀为.js，可以被多个html文件访问，更易管理，使用时仍在body标签的script标签下使用<br><code>&lt;script src=&quot;js文件名.js&quot;&gt;&lt;/script&gt;;</code>  </p>
<h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><ul>
<li>按顺序执行 </li>
<li>代码块中的语句同时执行</li>
<li>大小写敏感</li>
<li>忽略空格  </li>
</ul>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul>
<li>//</li>
<li>/*     */  </li>
</ul>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>存储信息的容器  </p>
<p><code>var name=&quot;yuan&quot;, age=18, job=&quot;CEO&quot;;</code></p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>字符串：单引号 双引号均可</li>
<li>数字：支持小数，支持科学计数法</li>
<li>布尔：true or false</li>
<li>对象：花括号分隔，name、value成对存在<br><code>var person=&#123;name:&quot;yuan&quot;, age:18, job:&quot;CEO&quot;&#125;;</code></li>
<li>Undefined </li>
<li>null  </li>
</ul>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>使用function关键字，函数名和花括号包裹的代码块，可带参或无参    </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function functionname()</span><br><span class="line">&#123;</span><br><span class="line">这里是要执行的代码</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>


<p>参数中使用var是局部变量，只能在函数内部使用。<br>函数外声明的变量是全局变量，所有脚本和函数都能访问。  </p>
<h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>在严格的条件下运行  </p>
<p><code>use strict</code><br>保证安全、提高效率、增加速度，代码更加安全，从而使得本来可以运行的代码可能出现问题。<br>位置：脚本的开头或者函数的开头。  </p>
]]></content>
      <tags>
        <tag>前端</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>maven-Filtering</title>
    <url>/2019/05/24/maven-Filtering/</url>
    <content><![CDATA[<p>maven项目资源文件中，有很多的变量被<code>$&#123;   &#125;</code>包裹，其值可以来自系统变量，工程变量，过滤资源，也可以来自命令行。</p>
<span id="more"></span>   

<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>在resources文件夹下新建<code>data.properties</code>文件，写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=Hello $&#123;name&#125;</span><br></pre></td></tr></table></figure>
<p>pom文件中写入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p>使用<strong>过滤器</strong>让生成的内容<strong>动态改变</strong></p>
<h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>mvn命令添加后缀</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean compile -D name=&quot;world1&quot;</span><br></pre></td></tr></table></figure>
<p>输出文件内容为<code>name=Hello world1</code></p>
<h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><p>pom文件添加属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>world2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>编译后输出文件内容为<code>name=Hello world2</code></p>
<h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>pom文件build标签中添加过滤器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span>src/main/resources/my-filter-values.properties<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>resources下新建<code>my-filter-values.properties</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=world3</span><br></pre></td></tr></table></figure>
<p>编译后输出文件内容为<code>name=Hello world3</code></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>filter文件中不能包含二进制文件，比如图片</li>
<li>如果资源文件包含文本也包含图片，应在两个文件夹中存放</li>
<li>含有被<code>$&#123;   &#125;</code>包裹的文件应单独存放在一个文件夹中</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html">Maven官网</a>    </p>
]]></content>
      <tags>
        <tag>项目管理</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>maven-继承</title>
    <url>/2019/05/30/maven-Inheritance/</url>
    <content><![CDATA[<p>maven可以使用聚合项目进行项目管理，配置多模块，父项目。父pom中有很多元素可以被子项目继承，列举所有可以被继承的元素</p>
<span id="more"></span>   
<h3 id="pom中可以被继承的元素"><a href="#pom中可以被继承的元素" class="headerlink" title="pom中可以被继承的元素"></a>pom中可以被继承的元素</h3><ul>
<li>groupId</li>
<li>version</li>
<li>description</li>
<li>organization</li>
<li>inceptionYear</li>
<li>url</li>
<li>developers</li>
<li>contributors</li>
<li>distributionManagement</li>
<li>issueManagement</li>
<li>ciManagement</li>
<li>scm</li>
<li>mailingLists</li>
<li>properties</li>
<li>dependencies</li>
<li>dependencyManagement</li>
<li>repositories</li>
<li>build</li>
<li>reporting</li>
</ul>
]]></content>
      <tags>
        <tag>项目管理</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-文件权限</title>
    <url>/2020/04/12/linux-%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<p>linux系统为保证其安全性，为每一个文件都设置了其对应的权限。</p>
<span id="more"></span>

<h2 id="用户和组"><a href="#用户和组" class="headerlink" title="用户和组"></a>用户和组</h2><table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th>标识</th>
<th>目录</th>
<th>查看全部</th>
</tr>
</thead>
<tbody><tr>
<td>用户</td>
<td>登录系统的账号</td>
<td>UID</td>
<td><code>/etc/passwd</code></td>
<td><code>cut -d&#39;:&#39; -f 1 /etc/passwd</code></td>
</tr>
<tr>
<td>组</td>
<td>用户的分组</td>
<td>GID</td>
<td><code>/etc/group</code></td>
<td><code>cut -d&#39;:&#39; -f 1 /etc/group</code></td>
</tr>
</tbody></table>
<ul>
<li>一个用户可以属于多个组，一个组也可以包含多个用户。</li>
<li>使用<code>adduser</code>创建<strong>用户</strong>的同时也会创建<strong>用户组</strong>，组名默认和用户名相同</li>
</ul>
<h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>使用<code>ls -l</code>命令查看文件权限<br><img src="/img/linux.png" alt=""><br>输出结果的第一个字段就是描述文件和目录权限的编码。这个字段的第一个字符代表了对象的类型：  </p>
<ul>
<li>-：文件</li>
<li>d：目录</li>
</ul>
<p>后三组字符代表三种访问方式：</p>
<ul>
<li>r：读</li>
<li>w：写</li>
<li>x：执行</li>
</ul>
<p>三组分别代表：</p>
<ul>
<li>文件属于的用户</li>
<li>和文件属于者同组的用户</li>
<li>其他用户</li>
</ul>
<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>使用<code>chmod</code>命令修改文件权限</p>
<h3 id="为用户修改-user"><a href="#为用户修改-user" class="headerlink" title="为用户修改(user)"></a>为用户修改(user)</h3><p>赋予用户可执行的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chmod u+x app.sh</span><br></pre></td></tr></table></figure>

<h3 id="为同组的用户修改-group"><a href="#为同组的用户修改-group" class="headerlink" title="为同组的用户修改(group)"></a>为同组的用户修改(group)</h3><p>赋予同组用户可执行的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chmod g+x app.sh</span><br></pre></td></tr></table></figure>

<h3 id="为其他的用户修改-other"><a href="#为其他的用户修改-other" class="headerlink" title="为其他的用户修改(other)"></a>为其他的用户修改(other)</h3><p>赋予其他用户可执行的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chmod o+x app.sh</span><br></pre></td></tr></table></figure>

<h3 id="为所有的用户修改-all"><a href="#为所有的用户修改-all" class="headerlink" title="为所有的用户修改(all)"></a>为所有的用户修改(all)</h3><p>赋予其他用户可执行的权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chmod a+x app.sh</span><br></pre></td></tr></table></figure>
<p>OR</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ chmod +x app.sh</span><br></pre></td></tr></table></figure>

<h2 id="表示"><a href="#表示" class="headerlink" title="表示"></a>表示</h2><p>文件权限主要有两种表示方法，3组字母或者3个八进制数</p>
<table>
<thead>
<tr>
<th>权限</th>
<th>字母</th>
<th>八进制</th>
</tr>
</thead>
<tbody><tr>
<td>无权限</td>
<td><code>---</code></td>
<td>0</td>
</tr>
<tr>
<td>只有执行权限</td>
<td><code>--x</code></td>
<td>1</td>
</tr>
<tr>
<td>只有写权限</td>
<td><code>-w-</code></td>
<td>2</td>
</tr>
<tr>
<td>写和执行权限</td>
<td><code>-wx</code></td>
<td>3</td>
</tr>
<tr>
<td>只有读权限</td>
<td><code>r--</code></td>
<td>4</td>
</tr>
<tr>
<td>读和执行权限</td>
<td><code>r-x</code></td>
<td>5</td>
</tr>
<tr>
<td>读和写权限</td>
<td><code>rw-</code></td>
<td>6</td>
</tr>
<tr>
<td>所有权限</td>
<td><code>rwx</code></td>
<td>7</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>maven-依赖查找</title>
    <url>/2018/10/21/maven/</url>
    <content><![CDATA[<p>maven寻找依赖网站<br><a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p>
]]></content>
      <tags>
        <tag>项目管理</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>maven-学习笔记</title>
    <url>/2018/10/13/maven-learning/</url>
    <content><![CDATA[<p>maven一个是项目管理工具，基于项目对象模型的概念（POM），使用maven建立项目，可以更方便的管理依赖。</p>
<span id="more"></span>   

<h2 id="官网介绍"><a href="#官网介绍" class="headerlink" title="官网介绍"></a>官网介绍</h2><p><a href="http://maven.apache.org/">maven官网链接：http://maven.apache.org</a>  </p>
<h2 id="目录（和没有maven的java项目比较）"><a href="#目录（和没有maven的java项目比较）" class="headerlink" title="目录（和没有maven的java项目比较）"></a>目录（和没有maven的java项目比较）</h2><p>maven提倡使用一个共同的目录文件，目录结构规范固定。<br><img src="/img/maven1.png" alt="">  </p>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol>
<li>没有maven的java文件和配置文件都在在src下，比较混乱。<br>基于maven的java文件在src/main/java，资源文件在src/main/resources，将其分离。</li>
<li>没有maven的jar包需要手动建立lib文件夹，导入jar包，再添加到Libraries，比较繁琐。<br>基于maven的jar包配置在pom.xml中，管理方便。</li>
<li>java项目有一个bin文件夹，存放编译后的class文件及目录<br>相对的maven项目有一个target文件夹，编译后也会自动生成class文件和目录</li>
</ol>
<h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><ol>
<li>确保java可以正常使用</li>
<li>下载maven(当前最新3.5.4)</li>
<li>设置环境变量</li>
<li>** mvn -v **确保正常使用</li>
</ol>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">语法：mvn [options] [&lt;goal(s)&gt;] [&lt;phase(s)&gt;]</span><br></pre></td></tr></table></figure>
<ul>
<li>mvn -h：显示所有可选择的帮助选项</li>
<li>mvn -B：使用批处理模式构建项目</li>
<li>mvn -U：强制更新到最新的快照版本</li>
<li>mvn package：打包生成target目录和代码</li>
<li>mvn compile：编译</li>
<li>mvn clean：清除产生的项目</li>
<li>mvn dependency:copy-dependencies：在target目录下生成依赖包dependency</li>
</ul>
<p>命令可以叠加，如mvn clean package dependency:copy-dependencies -U，清除并打包生成依赖和包。<br>可以在eclipse中输入，也可以在cmd或Powershell中运行。</p>
<h2 id="settings-xml"><a href="#settings-xml" class="headerlink" title="settings.xml"></a>settings.xml</h2><p>settings.xml是在eclipse配置maven必须的配置，必须的内容如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>localRepository可以设置本地仓库地址，默认为~/.m2/repository<br>Profiles可以设置远程仓库地址<br>mirrors可以设置镜像仓库，提升下载速度，推荐阿里的仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>pom文件是maven项目的核心配置文件，有且只有一个，<br>pom.xml可以管理java代码，配置文件，jar包项目依赖等，必须要有的四个元素modelVersion、groupId、artifactId和version，modelVersion是4.0.0，后三者用来确定项目的唯一性<br>必须内容如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>projectxxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.x-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>添加依赖包(junit4为例)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>配置阿里仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="主要优势"><a href="#主要优势" class="headerlink" title="主要优势"></a>主要优势</h2><p>maven有许多特性，可以方便管理，如parent，properties，modules，scm等。</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>如果我们所有的项目都要用到Spring、junit的jar包，每个项目中都要配置依赖，maven就有了复用和继承的功能，字段** parent ** 实现，这样配置一个基类的依赖，其他项目继承它，就简化了配置</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>有两个自带的内部属性，basedir表示目录，version表示版本，在字段** properties **中可以自定义属性，然后${自定义属性名}进行使用，范围不仅在此项目，如有子项目，还可在子项目中使用</p>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>如果项目较大，可以用** modules **划分模块，方便管理</p>
]]></content>
      <tags>
        <tag>项目管理</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>maven-Profile</title>
    <url>/2019/05/24/maven-profile/</url>
    <content><![CDATA[<p>项目会有很多不同的环境，比如开发(DEV)，集成测试(SIT)，用户测试(UAT)，生产(PROD)，需要为不同的环境传递不同的值，一般的做法是各个环境不同的配置文件，不过不方便管理。maven的Profiles标签，很好的解决了这个问题。</p>
<span id="more"></span>   

<h2 id="给DEV和PROD传不同的值"><a href="#给DEV和PROD传不同的值" class="headerlink" title="给DEV和PROD传不同的值"></a>给DEV和PROD传不同的值</h2><ol>
<li>新建database.properties文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">database=$&#123;database&#125;</span><br></pre></td></tr></table></figure></li>
<li>运用filtering，pom文件新增<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>创建profiles，pom文件新增<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">database</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">database</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">database</span>&gt;</span>oracle<span class="tag">&lt;/<span class="name">database</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><ul>
<li>命令行输入<code>mvn clean compile</code>，根据上文配置，默认profile是dev,输出mysql  </li>
<li>命令行输入<code>mvn clean compile -P prod</code>，则会输出oracle</li>
</ul>
</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.mkyong.com/maven/maven-profiles-example/">mkyong.com</a>    </p>
]]></content>
      <tags>
        <tag>项目管理</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle-学习笔记</title>
    <url>/2019/05/18/oracle/</url>
    <content><![CDATA[<p>oracle Database简称Oracle，是甲骨文公司的一款<strong>关系型数据库</strong>，处理速度快，安全性高，稳定性强，市场占用份额大，可以适用于各类大、中、小、微机环境，接下来介绍一些oracle最基本的使用。</p>
<span id="more"></span>  

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.oracle.com">官网链接</a>，可以从官网直接下载，文件名<code>win64_11gR2_database_1of2.zip</code>,<br><code>win64_11gR2_database_2of2.zip</code>，解压，安装。</p>
<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>安装成功后会产生7个服务</p>
<ul>
<li>OracleDBConsoleoracle</li>
<li>OracleJobSchedulerORACLE</li>
<li>OracleMTSRecoveryService</li>
<li>OracleOraDb11g_home1ClrAgent</li>
<li>OracleOraDb11g_home1TNSListener</li>
<li>OracleServiceORACLE</li>
<li>OracleVssWriterORACLE</li>
</ul>
<p>其中必须运行的是<strong>OracleServiceORACLE</strong>，如果使用<strong>sqldeveloper</strong>，需开启<strong>OracleOraDb11g_home1TNSListener</strong>，其他服务可以选择关闭，并设置这两个服务为手动开启。</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>tnsnames.ora</p>
<h2 id="用户名密码"><a href="#用户名密码" class="headerlink" title="用户名密码"></a>用户名密码</h2><p>安装成功后，一些默认的用户名、密码。也可以直接使用<code>sys/sys as sysdba</code>登录</p>
<table>
<thead>
<tr>
<th>用户名</th>
<th>密码</th>
<th>权限</th>
</tr>
</thead>
<tbody><tr>
<td>sys</td>
<td>change_on_install</td>
<td>SYSDBA 或 SYSOPER</td>
</tr>
<tr>
<td>system</td>
<td>manager</td>
<td>SYSDBA 或 NORMAL</td>
</tr>
<tr>
<td>scott</td>
<td>tiger</td>
<td>NORMAL</td>
</tr>
<tr>
<td>当然也可以新建用户<code>CREATE USER YUAN IDENTIFIED BY 12345678</code>，并赋予权限<code>grant dba to yuan</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td>登录实例，其中<strong>SYSDBA</strong>权限最高，<strong>SYSOPER</strong>次之，<strong>normal</strong>为普通用户。</td>
<td></td>
<td></td>
</tr>
<tr>
<td><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sys/change_on_install as sysdba</span><br><span class="line">system/manager as sysdba</span><br><span class="line">scott/tiger</span><br><span class="line">yuan/12345678</span><br><span class="line"></span><br></pre></td></tr></table></figure></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="dmp文件导入"><a href="#dmp文件导入" class="headerlink" title="dmp文件导入"></a>dmp文件导入</h2><ol>
<li><p>首先需要创建表空间，比如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span>space ts_dbank</span><br><span class="line">datafile <span class="string">&#x27;F:\oracle\base\ts_dbank.dbf&#x27;</span></span><br><span class="line">size <span class="number">50</span>m</span><br><span class="line">autoextend <span class="keyword">ON</span></span><br><span class="line">next <span class="number">50</span>m maxsize <span class="number">20480</span>m</span><br><span class="line">extent management <span class="keyword">local</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建用户(默认表空间)<br><code>CREATE USER YUAN IDENTIFIED BY 12345678 default tablespace ts_dbank</code></p>
</li>
<li><p>授权<br><code>grant dba to yuan</code></p>
</li>
<li><p>导入数据<br><code>impdp yuan/12345678@oracle full= y directory = DIRECTORY_NAME</code></p>
</li>
</ol>
<p>导入数据前，需要把文件放在目录下，如果不知道对应路径，可以使用<code>select * from all_directories</code>查找目录名对应的目录。创建目录命令<code>create or replace directory dump_dir(目录名) as &#39;F:\oracle\tempdump&#39;(目录)</code></p>
<h3 id="2020-11-20-更新"><a href="#2020-11-20-更新" class="headerlink" title="2020-11-20 更新"></a>2020-11-20 更新</h3><p>使用PLSQL可以方便导入，菜单栏Tools-Import<br>避免update时全表更新，PLSQL还可以使用for update更新数据</p>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>oracle</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-FactoryBean</title>
    <url>/2018/12/03/spring%20factorybean/</url>
    <content><![CDATA[<p>Spring容器中有两种<code>bean</code>，<strong>普通bean</strong>和实现FactoryBean接口的<strong>factory bean</strong>，前者返回的是其本身，而后者返回的是<code>getObject()</code>方法创建的对象。</p>
<span id="more"></span>

<h2 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h2><p>FactoryBean接口中有三个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    Class&lt;?&gt; getObjectType();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>getObject()：返回由这个工厂管理的对象实例，并装载进Spring容器中。</li>
<li>getObjectType()：返回由这个工厂管理的对象类型。</li>
<li>isSingleton()：返回由这个工厂管理的对象是否是单例。</li>
</ul>
<h2 id="PropertiesFactoryBean"><a href="#PropertiesFactoryBean" class="headerlink" title="PropertiesFactoryBean"></a>PropertiesFactoryBean</h2><p>以<code>PropertiesFactoryBean</code>为例，学习使用</p>
<h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>需要读取的内容<code>data.properties</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=Hello World</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>向容器注入工厂管理的对象（Java-based）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertiesFactoryBean <span class="title">prop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        PropertiesFactoryBean factory = <span class="keyword">new</span> PropertiesFactoryBean();</span><br><span class="line">        factory.setLocation(<span class="keyword">new</span> ClassPathResource(<span class="string">&quot;data.properties&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>加载配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = Config.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropReadTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Properties prop;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.print(prop.getProperty(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>加密加压解密解压-学习笔记</title>
    <url>/2018/10/14/zip-learning/</url>
    <content><![CDATA[<p>对文件的处理学习</p>
<span id="more"></span>   

<h3 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h3><p>DES全称为Data Encryption Standard，即数据加密标准，是一种使用密钥加密的块算法，相对于DES有3DES，即在DES基础上再加密，安全性极高。</p>
<h3 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h3><p>crypto是密码的意思，在java中有三个包javax.crypto，javax.crypto.interfaces，javax.crypto.spec，为我们提供了解密的便捷。</p>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ul>
<li>3DES加密即将algorithm赋值”DESede”，此时生成秘钥。  </li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SecretKey deskey = new SecretKeySpec(byte[] key, String algorithm);</span><br></pre></td></tr></table></figure>

<ul>
<li>Cipher是单例模式，使用getInstance初始化，transformation必须包含加密算法，如”DESede”</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cipher c1 = Cipher.getInstance(String transformation);</span><br></pre></td></tr></table></figure>

<ul>
<li>用密钥初始化此 Cipher，解密DECRYPT_MODE，加密ENCRYPT_MODE，key即为秘钥</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">init(int opmode, Key key)；</span><br></pre></td></tr></table></figure>

<ul>
<li>读入要解密的文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CipherInputStream(InputStream is, Cipher c) </span><br></pre></td></tr></table></figure>


<ul>
<li>使用ZipInputStream读入zip文件</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZipInputStream(InputStream in) </span><br></pre></td></tr></table></figure>
<ul>
<li>输出即为解密解压或加密加压后的文件</li>
</ul>
<h2 id="文件输出处理"><a href="#文件输出处理" class="headerlink" title="文件输出处理"></a>文件输出处理</h2><p>jar包commons-io-xx.jar中，有一个类org.apache.commons.io.IOUtils，方法copy(InputStream input,<br>OutputStream output)，使用此方法可以立即缓存并开始输出（若大于2GB返回-1），看源码可知，本质还是InputStream.read,OutputStream.write。</p>
<h2 id="压缩文件处理"><a href="#压缩文件处理" class="headerlink" title="压缩文件处理"></a>压缩文件处理</h2><p>java.util.zip包中存在方法对zip压缩文件操作，ZipInputStream，ZipOutputStream,具体读写的源码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public synchronized void write(byte[] b, int off, int len)</span><br><span class="line">        throws IOException</span><br><span class="line">    &#123;</span><br><span class="line">        ensureOpen();</span><br><span class="line">        if (off &lt; 0 || len &lt; 0 || off &gt; b.length - len) &#123;</span><br><span class="line">            throw new IndexOutOfBoundsException();</span><br><span class="line">        &#125; else if (len == 0) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (current == null) &#123;</span><br><span class="line">            throw new ZipException(&quot;no current ZIP entry&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        ZipEntry entry = current.entry;</span><br><span class="line">        switch (entry.method) &#123;</span><br><span class="line">        case DEFLATED:</span><br><span class="line">            super.write(b, off, len);</span><br><span class="line">            break;</span><br><span class="line">        case STORED:</span><br><span class="line">            written += len;</span><br><span class="line">            if (written - locoff &gt; entry.size) &#123;</span><br><span class="line">                throw new ZipException(</span><br><span class="line">                    &quot;attempt to write past end of STORED entry&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            out.write(b, off, len);</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            throw new ZipException(&quot;invalid compression method&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        crc.update(b, off, len);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public int read(byte[] b, int off, int len) throws IOException &#123;</span><br><span class="line">       ensureOpen();</span><br><span class="line">       if (off &lt; 0 || len &lt; 0 || off &gt; b.length - len) &#123;</span><br><span class="line">           throw new IndexOutOfBoundsException();</span><br><span class="line">       &#125; else if (len == 0) &#123;</span><br><span class="line">           return 0;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       if (entry == null) &#123;</span><br><span class="line">           return -1;</span><br><span class="line">       &#125;</span><br><span class="line">       switch (entry.method) &#123;</span><br><span class="line">       case DEFLATED:</span><br><span class="line">           len = super.read(b, off, len);</span><br><span class="line">           if (len == -1) &#123;</span><br><span class="line">               readEnd(entry);</span><br><span class="line">               entryEOF = true;</span><br><span class="line">               entry = null;</span><br><span class="line">           &#125; else &#123;</span><br><span class="line">               crc.update(b, off, len);</span><br><span class="line">           &#125;</span><br><span class="line">           return len;</span><br><span class="line">       case STORED:</span><br><span class="line">           if (remaining &lt;= 0) &#123;</span><br><span class="line">               entryEOF = true;</span><br><span class="line">               entry = null;</span><br><span class="line">               return -1;</span><br><span class="line">           &#125;</span><br><span class="line">           if (len &gt; remaining) &#123;</span><br><span class="line">               len = (int)remaining;</span><br><span class="line">           &#125;</span><br><span class="line">           len = in.read(b, off, len);</span><br><span class="line">           if (len == -1) &#123;</span><br><span class="line">               throw new ZipException(&quot;unexpected EOF&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           crc.update(b, off, len);</span><br><span class="line">           remaining -= len;</span><br><span class="line">           if (remaining == 0 &amp;&amp; entry.crc != crc.getValue()) &#123;</span><br><span class="line">               throw new ZipException(</span><br><span class="line">                   &quot;invalid entry CRC (expected 0x&quot; + Long.toHexString(entry.crc) +</span><br><span class="line">                   &quot; but got 0x&quot; + Long.toHexString(crc.getValue()) + &quot;)&quot;);</span><br><span class="line">           &#125;</span><br><span class="line">           return len;</span><br><span class="line">       default:</span><br><span class="line">           throw new ZipException(&quot;invalid compression method&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到实际是对ZipEntry的操作，所以在输出为zipOutputStream流时，需要注意必须new一个ZipEntry，并使用putNextEntry方法，避免抛出异常。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>加密解密</tag>
      </tags>
  </entry>
  <entry>
    <title>修饰符顺序</title>
    <url>/2019/06/19/%E4%BF%AE%E9%A5%B0%E7%AC%A6%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<p>在使用双重锁实现单例模式的时候，发现有的实例定义有的是<code>static volatile</code>，有的是<code>volatile static</code>，便去看Java8规范，果然<strong>为了保持编写风格的一致性，以及代码的可读性</strong>，对<strong>修饰符</strong>规定了应该的顺序</p>
<span id="more"></span>

<h2 id="规定顺序"><a href="#规定顺序" class="headerlink" title="规定顺序"></a>规定顺序</h2><p>根据Java规范，8.1.1、8.3.1、8.4.3、9.4，正确的顺序应该是</p>
<h3 id="类修饰符"><a href="#类修饰符" class="headerlink" title="类修饰符"></a>类修饰符</h3><ol>
<li>public </li>
<li>protected </li>
<li>private</li>
<li>abstract </li>
<li>static </li>
<li>final（该类不能被继承） </li>
<li>strictfp</li>
</ol>
<h3 id="变量修饰符"><a href="#变量修饰符" class="headerlink" title="变量修饰符"></a>变量修饰符</h3><ol>
<li>public </li>
<li>protected </li>
<li>private</li>
<li>static </li>
<li>final（该变量值不能被改变） </li>
<li>transient </li>
<li>volatile</li>
</ol>
<h3 id="方法修饰符"><a href="#方法修饰符" class="headerlink" title="方法修饰符"></a>方法修饰符</h3><ol>
<li>public </li>
<li>protected </li>
<li>private</li>
<li>abstract </li>
<li>static </li>
<li>final（该方法不能被重写） </li>
<li>synchronized </li>
<li>native </li>
<li>strictfp</li>
</ol>
<h3 id="接口中方法的修饰符"><a href="#接口中方法的修饰符" class="headerlink" title="接口中方法的修饰符"></a>接口中方法的修饰符</h3><ol>
<li>public</li>
<li>abstract </li>
<li>default </li>
<li>static </li>
<li>strictfp</li>
</ol>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="http://checkstyle.sourceforge.net/config_modifier.html">checkstyle官网</a></li>
<li><a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html">Java8官方规范文档</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>内存泄漏</title>
    <url>/2021/01/13/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</url>
    <content><![CDATA[<p>Java有很好的GC垃圾回收器，帮助我们自动地管理内存，定期删除未引用的对象，但并不是万无一失，仍然可能会造成内存泄漏。</p>
<span id="more"></span>   


<h2 id="什么是内存泄漏"><a href="#什么是内存泄漏" class="headerlink" title="什么是内存泄漏"></a>什么是内存泄漏</h2><p>在堆内存中产生了不再使用的对象，但垃圾回收器并没有把它们从内存中释放，因此造成了不必要的内存占用，造成系统性能降低，造成<code>java.lang.OutOfMemoryError</code>错误。  </p>
<h2 id="Java中内存泄漏的类型"><a href="#Java中内存泄漏的类型" class="headerlink" title="Java中内存泄漏的类型"></a>Java中内存泄漏的类型</h2><p>内存泄漏的原因有很多，下面有几种最常见的。</p>
<h3 id="静态变量的大量使用"><a href="#静态变量的大量使用" class="headerlink" title="静态变量的大量使用"></a>静态变量的大量使用</h3><p>静态变量的生命周期通常和整个程序的生命周期相同，以下程序会造成大量数据浪费。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Double&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">populateList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">            list.add(Math.random());</span><br><span class="line">        &#125;</span><br><span class="line">        Log.info(<span class="string">&quot;Debug Point 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Log.info(<span class="string">&quot;Debug Point 1&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> StaticTest().populateList();</span><br><span class="line">        Log.info(<span class="string">&quot;Debug Point 3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>应尽量减少静态变量的使用</li>
<li>使用单例时，尽量使用懒汉式，不使用饿汉式，即应在使用时再创建实例。</li>
</ul>
<h3 id="资源使用后未关闭"><a href="#资源使用后未关闭" class="headerlink" title="资源使用后未关闭"></a>资源使用后未关闭</h3><p>新连接的建立、stream流的打开等资源使用，都需要占用内存，如果不手动关闭，它们将不会被GC回收。</p>
<ul>
<li>使用finally代码块关闭资源</li>
<li>关闭资源时不能报错</li>
<li>JDK版本7或以上，使用try-with-resources代码块</li>
</ul>
<h3 id="equals-和hashCode-不正确使用"><a href="#equals-和hashCode-不正确使用" class="headerlink" title="equals()和hashCode()不正确使用"></a>equals()和hashCode()不正确使用</h3><p>以下程序的map中，同名的对象出现了100次，造成了内存浪费。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>K的Hash值相等，并且K进行equels返回true，才能覆盖V值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenMap_whenEqualsAndHashCodeNotOverridden_thenMemoryLeak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;Person, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">        map.put(<span class="keyword">new</span> Person(<span class="string">&quot;jon&quot;</span>), <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重写类后，map中只存在一个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Person)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> person.name.equals(name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">17</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + name.hashCode();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>定义实体类时，尽量重写equals和hashcode方法</li>
</ul>
<h3 id="引用外部类的内部类"><a href="#引用外部类的内部类" class="headerlink" title="引用外部类的内部类"></a>引用外部类的内部类</h3><p>非静态内部类（匿名类）默认有一个对外部类的引用，如果使用内部类的对象，外部类的对象就不会被回收，造成内存泄漏</p>
<ul>
<li>使用静态内部类</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.baeldung.com/java-memory-leaks">baeldung.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>加权图-最小生成树</title>
    <url>/2019/04/27/%E5%8A%A0%E6%9D%83%E5%9B%BE-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
    <content><![CDATA[<p>图的生成树是它的一棵含有其所有顶点的无环连通子图。加权图的最小生成树是它的一棵权值最小的生成树，以加权图为例，学习最小生成树之<strong>Prim算法</strong>。</p>
<span id="more"></span>  

<h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p>最小生成树有两种基本的求解方法，一种是Prim算法，一种是Kruskal算法，而这两种方法都属于贪心算法。先找到一条边，不断重复直到找到所有的边。不过需要注意的是，这两种算法都不能处理有向图。</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>加权图的边需要进行比较，所以要实现Comparable接口，并重写compareTo方法，边可以表示如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeightEdge</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">WeightEdge</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> v;             <span class="comment">//顶点之一</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> w;             <span class="comment">//另一个顶点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> weight;        <span class="comment">//边的权重</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeightEdge</span><span class="params">(<span class="keyword">int</span> v , <span class="keyword">int</span> w , <span class="keyword">int</span> weight)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.v = v;</span><br><span class="line">        <span class="keyword">this</span>.w = w;</span><br><span class="line">        <span class="keyword">this</span>. weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">either</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">other</span><span class="params">(<span class="keyword">int</span> vertex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(vertex == v)  <span class="keyword">return</span> w;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vertex == w)  <span class="keyword">return</span> v;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Inconsistent edge&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%d-%d %d&quot;</span> , v , w , weight);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(WeightEdge that)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.weight &lt; that.weight) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.weight &gt; that.weight) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>加权图表示如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EdgeWeightedGraph</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> v;                     <span class="comment">//顶点数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> e;                     <span class="comment">//边的数目</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Edge&gt;[] adj;    <span class="comment">//邻接表</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EdgeWeightedGraph</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.v = v;</span><br><span class="line">        <span class="keyword">this</span>.e = <span class="number">0</span>;</span><br><span class="line">        adj = <span class="keyword">new</span> LinkedList[v];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; v ; i++)&#123;</span><br><span class="line">            adj[i] = <span class="keyword">new</span> LinkedList&lt;Edge&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(Edge edge)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> v = edge.either();</span><br><span class="line">        <span class="keyword">int</span> w = edge.other(v);</span><br><span class="line">        adj[v].add(edge);</span><br><span class="line">        adj[w].add(edge);</span><br><span class="line">        e++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LinkedList&lt;Edge&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adj[v];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="prim算法"><a href="#prim算法" class="headerlink" title="prim算法"></a>prim算法</h2><p>以prim算法为例，求最小生成树，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimMST</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span>[] marked;              <span class="comment">//最小生成树的顶点</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Edge&gt; mst;          <span class="comment">//最小生成树的边</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Edge&gt; pq;           <span class="comment">//横切边</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> value;                     <span class="comment">//最小生成树的权重</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrimMST</span><span class="params">(EdgeWeightedGraph graph)</span></span>&#123;</span><br><span class="line">        pq = <span class="keyword">new</span> LinkedList&lt;Edge&gt;();</span><br><span class="line">        mst = <span class="keyword">new</span> LinkedList&lt;Edge&gt;();</span><br><span class="line">        marked = <span class="keyword">new</span> <span class="keyword">boolean</span>[graph.getV()];</span><br><span class="line">        visit(graph , <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(!pq.isEmpty())&#123;</span><br><span class="line">            Edge e = Collections.min(pq);</span><br><span class="line">            pq.remove(e);</span><br><span class="line">            <span class="keyword">int</span> v = e.either();</span><br><span class="line">            <span class="keyword">int</span> w = e.other(v);</span><br><span class="line">            <span class="keyword">if</span>(marked[v] &amp;&amp; marked[w]) <span class="keyword">continue</span>;</span><br><span class="line">            mst.add(e);</span><br><span class="line">            <span class="keyword">if</span>(!marked[v]) visit(graph , v);</span><br><span class="line">            <span class="keyword">if</span>(!marked[w]) visit(graph , w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问点v，将其未遍历的边添加至队列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> graph 加权图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v 顶点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(EdgeWeightedGraph graph , <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        marked[v] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(Edge e : graph.adj(v))&#123;</span><br><span class="line">            <span class="keyword">if</span>(!marked[e.other(v)])&#123;</span><br><span class="line">                pq.add(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LinkedList&lt;Edge&gt; <span class="title">getEdge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mst;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Edge edge : mst)&#123;</span><br><span class="line">            value += edge.getWeight();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>完整代码已上传，<a href="https://github.com/yuan0824/graph/tree/master/EdgeWeightedGraph/src">项目地址</a>：<a href="https://github.com/yuan0824/graph">https://github.com/yuan0824/graph</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>算法（第4版）-人民邮电出版社</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>基于JMS的activeMQ</title>
    <url>/2021/03/03/%E5%9F%BA%E4%BA%8EJMS%E7%9A%84activeMQ/</url>
    <content><![CDATA[<p>Java消息服务(Java Message Service)是面向消息中间件的API，用于在两个应用程序，或是分布式系统中发送消息，进行异步通信。</p>
<span id="more"></span>

<h2 id="JMS提供者"><a href="#JMS提供者" class="headerlink" title="JMS提供者"></a>JMS提供者</h2><p>连接面向消息中间件的，JMS接口的一个实现。提供者可以是Java平台的JMS实现，也可以是非Java平台的面向消息中间件的适配器。  </p>
<p>常见的JMS提供者有：</p>
<ul>
<li>Kafka</li>
<li>Apache ActiveMQ</li>
<li>JBoss HornetQ</li>
<li>WebLogic Server JMS</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>以activemq为例，JMS的基本步骤如下：</p>
<h3 id="准备依赖jar包"><a href="#准备依赖jar包" class="headerlink" title="准备依赖jar包"></a>准备依赖jar包</h3><p>Spring Boot项目，直接增加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="启动activemq"><a href="#启动activemq" class="headerlink" title="启动activemq"></a>启动activemq</h3><p>使用<code>activemq.bat</code>启动。</p>
<ul>
<li>默认端口8161用于自带后台管理系统。</li>
<li>默认端口61616用于java的tcp调用。</li>
<li>默认用户名admin</li>
<li>默认密码admin</li>
</ul>
<h3 id="ConnectionFactory（连接工厂）"><a href="#ConnectionFactory（连接工厂）" class="headerlink" title="ConnectionFactory（连接工厂）"></a>ConnectionFactory（连接工厂）</h3><p>ConnectionFactory接口用于创建Connection。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;tcp://127.0.0.1:61616&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Connection（连接）"><a href="#Connection（连接）" class="headerlink" title="Connection（连接）"></a>Connection（连接）</h3><p>Connection接口表示应用程序和消息服务器之间的连接。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//获取连接</span></span><br><span class="line">connection = connectionFactory.createConnection();</span><br><span class="line"><span class="comment">//打开连接</span></span><br><span class="line">connection.start();</span><br></pre></td></tr></table></figure>

<h3 id="Session（会话）"><a href="#Session（会话）" class="headerlink" title="Session（会话）"></a>Session（会话）</h3><p>表示一个单线程的上下文，用于发送和接收数据。也允许用户创建消费生产者来发送消息，创建消息消费者接收消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Session session = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//创建会话</span></span><br><span class="line">session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br></pre></td></tr></table></figure>

<h3 id="Destination（目标）"><a href="#Destination（目标）" class="headerlink" title="Destination（目标）"></a>Destination（目标）</h3><p>消息目标是消息发送和接受的地点，可以是队列，也可以是主题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取目标，参数是队列名，需提前在activeMQ中创建。</span></span><br><span class="line">Destination destination = session.createQueue(<span class="string">&quot;FirstQueue&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="MessageProducer（消息生产者）"><a href="#MessageProducer（消息生产者）" class="headerlink" title="MessageProducer（消息生产者）"></a>MessageProducer（消息生产者）</h3><p>由会话创建的对象，为某个目标创建，或创建通用的生产者，在发送时指定目标。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MessageProducer producer = <span class="keyword">null</span>;</span><br><span class="line">producer = session.createProducer(destination);</span><br></pre></td></tr></table></figure>

<h3 id="Message（消息）"><a href="#Message（消息）" class="headerlink" title="Message（消息）"></a>Message（消息）</h3><p>消费者和生产者之间传送的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成消息</span></span><br><span class="line">TextMessage textMessage = session.createTextMessage(<span class="string">&quot;Helloooooooo&quot;</span>);</span><br><span class="line"><span class="comment">//发送消息</span></span><br><span class="line">producer.send(textMessage);</span><br></pre></td></tr></table></figure>

<h3 id="关闭资源"><a href="#关闭资源" class="headerlink" title="关闭资源"></a>关闭资源</h3><p>在资源使用完毕后，需要关闭资源。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (producer != <span class="keyword">null</span>) &#123;</span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Spring-boot集成"><a href="#Spring-boot集成" class="headerlink" title="Spring boot集成"></a>Spring boot集成</h2><p>JMS按功能大致分为两部分，消息的生产和消费。</p>
<p>配置文件<code>application.yml</code>如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  activemq:</span><br><span class="line">    broker-url: tcp://127.0.0.1:61616</span><br><span class="line">    user: admin</span><br><span class="line">    password: admin</span><br></pre></td></tr></table></figure>

<h3 id="JmsTemplate"><a href="#JmsTemplate" class="headerlink" title="JmsTemplate"></a>JmsTemplate</h3><p>JmsTemplate类是Spring JMS的核心类。用于消息生产和同步消息的接收。在发送和同步接收消息的时候，处理了资源的创建和释放，简化了JMS的使用。</p>
<p>测试代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringJMSTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span></span>&#123;</span><br><span class="line">        jmsTemplate.send(<span class="string">&quot;FirstQueue&quot;</span>, session -&gt; session.createTextMessage(<span class="string">&quot;Helloooooooo&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MessageConverter"><a href="#MessageConverter" class="headerlink" title="MessageConverter"></a>MessageConverter</h3><p>MessageConverter接口在<strong>Java对象</strong>和<strong>JMS message</strong>之间定义了一个简单的协议。默认的实现类SimpleMessageConverter支持以下类型之间的转化：String和TextMessage、byte[]和BytesMesssage、java.util.Map和MapMessage。通过使用MessageConverter，让应用可以更关注于被发送和接收的业务逻辑对象。</p>
<p>测试代码如下：</p>
<p>dto对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5101052610913704018L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Goods</span><span class="params">(String name, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Goods&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, size=&quot;</span> + size +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现MessageConverter接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsMessageConverter</span> <span class="keyword">implements</span> <span class="title">MessageConverter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">toMessage</span><span class="params">(Object o, Session session)</span> <span class="keyword">throws</span> JMSException, MessageConversionException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> session.createObjectMessage((Serializable) o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">fromMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> JMSException, MessageConversionException </span>&#123;</span><br><span class="line">        ObjectMessage objectMessage = (ObjectMessage)message;</span><br><span class="line">        <span class="keyword">return</span> objectMessage.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dto作为信息发送接收</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAndConvertGoods</span><span class="params">()</span></span>&#123;</span><br><span class="line">    jmsTemplate.setMessageConverter(<span class="keyword">new</span> GoodsMessageConverter());</span><br><span class="line">    Goods tv = <span class="keyword">new</span> Goods(<span class="string">&quot;tv&quot;</span>, <span class="number">75</span>);</span><br><span class="line">    jmsTemplate.convertAndSend(<span class="string">&quot;FirstQueue&quot;</span>, tv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveAndConvertGoods</span><span class="params">()</span></span>&#123;</span><br><span class="line">    jmsTemplate.setMessageConverter(<span class="keyword">new</span> GoodsMessageConverter());</span><br><span class="line">    Goods goods = (Goods) jmsTemplate.receiveAndConvert(<span class="string">&quot;FirstQueue&quot;</span>);</span><br><span class="line">    System.out.println(goods);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>activeMQ为安全考虑，需要配置信任的dto路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  activemq:</span><br><span class="line">    packages:</span><br><span class="line">      trust-all: true</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>并发</title>
    <url>/2019/08/20/%E5%B9%B6%E5%8F%91/</url>
    <content><![CDATA[<p>并发编程的目的就是为了能提高程序的<strong>执行效率</strong>和提高程序的<strong>运行速度</strong>。</p>
<span id="more"></span>  

<h2 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h2><p><strong>进程</strong>是资源分配（占有资源）的最小单位，<strong>线程</strong>是CPU调度（程序执行）的最小单位</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul>
<li>进程：进程是程序的一次<strong>执行过程</strong>。</li>
<li>线程：线程是程序执行的最小单位。</li>
</ul>
<h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><ul>
<li>进程的执行需要<strong>依赖</strong>线程，一个进程至少有一个线程。</li>
<li>线程被<strong>包含</strong>在进程中，是进程的实际运作单位。</li>
</ul>
<h3 id="JVM分析区别"><a href="#JVM分析区别" class="headerlink" title="JVM分析区别"></a>JVM分析区别</h3><p>JVM的内存结构主要分为5个部分：<strong>PC寄存器</strong>、<strong>虚拟机栈</strong>、<strong>堆</strong>、<strong>方法区</strong>、<strong>本地方法栈</strong></p>
<ul>
<li>进程的<strong>堆</strong>和<strong>方法区</strong>被多个线程共享，为<strong>线程共享区</strong>。</li>
<li>每个线程有自己的<strong>PC寄存器</strong>、<strong>虚拟机栈</strong>和<strong>本地方法栈</strong>，为<strong>线程私有区</strong></li>
</ul>
<h3 id="线程的6种状态"><a href="#线程的6种状态" class="headerlink" title="线程的6种状态"></a>线程的6种状态</h3><p>New、Runnable（Ready+Running）、Blocked、Waiting、Timed Waiting、Terminated</p>
<ul>
<li>线程初始化，但还未调用<strong>Thread.start()</strong>方法，称为<strong>New状态</strong></li>
<li>线程获取时间片后，由Ready转为Running，时间片用完或者调用yield()方法，由Running转为Ready，但由于时间片分区很小（0.01s），线程切换快，所以统一为<strong>Runnable状态</strong></li>
<li>等待获取锁，来进入synchronized代码块/synchronized方法，此时为<strong>Blocked状态</strong></li>
<li>线程调用<strong>Object.wait()</strong>、<strong>Thread.join()</strong>、<strong>LockSupport.park()</strong>方法后进入<strong>Waiting状态</strong>，等待其他线程执行某些特定方法，如<strong>Object.notify()</strong>、<strong>Object.notifyAll()</strong>、<strong>LockSupport.unpark(Thread thread)</strong></li>
<li>与<strong>waiting状态</strong>不同的是，会在指定的时间内返回的状态为<strong>Timed Waiting状态</strong>，也可通过某些特定方法返回。</li>
<li>线程执行完毕后，即为<strong>Terminated状态</strong></li>
</ul>
<h2 id="start-方法与run-方法"><a href="#start-方法与run-方法" class="headerlink" title="start()方法与run()方法"></a>start()方法与run()方法</h2><p>start()方法和run()方法都是<strong>java.lang.Thread</strong>类下的方法</p>
<ul>
<li>start()方法会启动一个新线程，只能启动一次</li>
<li>run()方法与普通的方法一样，可以重复调用，且不能启动新线程。</li>
</ul>
<h2 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h2><p>synchronized关键字是解决并发问题的常用工具，被修饰的方法或代码块在任意时刻只能有一个线程执行。</p>
<h2 id="sleep-方法和wait-方法"><a href="#sleep-方法和wait-方法" class="headerlink" title="sleep()方法和wait()方法"></a>sleep()方法和wait()方法</h2><p>sleep是Thread类的方法，有两个，毫秒参数，或者毫秒与纳秒参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(<span class="keyword">long</span> millis, <span class="keyword">int</span> nanos)</span></span></span><br></pre></td></tr></table></figure>
<p>wait是Object类的方法，有三个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span></span></span><br></pre></td></tr></table></figure>
<ul>
<li>sleep()方法不会释放锁，wait()方法会释放锁。</li>
<li>sleep()方法可以在任何地方使用，wait()方法只能在同步方法或同步代码块中使用。</li>
<li>sleep()方法必须指定时间，wait()方法可以不指定时间，直到notify()或notifyAll()被调用。</li>
</ul>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>两个或两个以上的进程在执行过程中，因争夺资源而相互等待的现象。</p>
<h3 id="产生条件"><a href="#产生条件" class="headerlink" title="产生条件"></a>产生条件</h3><ul>
<li>互斥条件：该资源任意时刻只能由一个线程占用。</li>
<li>请求和保持条件：因请求资源阻塞时，对已获得的资源保持不放。</li>
<li>不剥夺条件：已获得的资源在未使用完前，不能被其他线程强行剥夺，只有自己使用完毕后释放资源。</li>
<li>环路等待条件：若干线程循环等待资源。</li>
</ul>
<h3 id="如何避免"><a href="#如何避免" class="headerlink" title="如何避免"></a>如何避免</h3><ul>
<li>破坏互斥条件</li>
<li>破话请求和保持条件</li>
<li>破坏不剥夺条件</li>
<li>破坏循环等待条件</li>
</ul>
<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>提前创建若干个线程，并在任务结束时不销毁线程。</p>
<h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><p>降低资源消耗：降低线程创建和销毁的消耗。<br>提高响应速度：任务可以立即执行。<br>提高线程的可管理性：对线程进行统一的分配、调优和监控。</p>
<h3 id="线程池的创建"><a href="#线程池的创建" class="headerlink" title="线程池的创建"></a>线程池的创建</h3><p>通过工具类<strong>Executors</strong>创建线程池</p>
<ul>
<li>FixedThreadPool：固定线程数量的线程池</li>
<li>CachedThreadPool：可以缓存的线程池</li>
<li>ScheduledThreadPool：支持定时和周期任务执行的定长线程池</li>
<li>SingleThreadExecutor：一个线程的线程池</li>
</ul>
<p>但根据《阿里巴巴开发手册》，线程池不允许使用<strong>Executors</strong>去创建，而是通过<strong>ThreadPoolExecutor</strong>的方式</p>
<h3 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h3><p>构造器源码分析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">            <span class="keyword">null</span> :</span><br><span class="line">            AccessController.getContext();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一共有七个参数</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>corePoolSize</td>
<td>int</td>
<td>核心线程数</td>
</tr>
<tr>
<td>maximumPoolSize</td>
<td>int</td>
<td>线程池允许的最大线程数</td>
</tr>
<tr>
<td>keepAliveTime</td>
<td>long</td>
<td>当线程数超过核心线程数时且没有新任务，在这个时间后才会销毁</td>
</tr>
<tr>
<td>unit</td>
<td>TimeUnit</td>
<td>keepAliveTime的时间单位</td>
</tr>
<tr>
<td>workQueue</td>
<td>BlockingQueue<Runnable></td>
<td>新任务进来时，如线程超过核心线程数，会放入这个队列中</td>
</tr>
<tr>
<td>threadFactory</td>
<td>ThreadFactory</td>
<td>创建新线程的工厂</td>
</tr>
<tr>
<td>handler</td>
<td>RejectedExecutionHandler</td>
<td>拒绝策略</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>排序-八大排序算法</title>
    <url>/2019/03/02/%E6%8E%92%E5%BA%8F-%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>排序算法是最基本且重要的算法，主要有八种，分别是<strong>冒泡排序</strong>、<strong>选择排序</strong>、<strong>插入排序</strong>、<strong>希尔排序</strong>、<strong>归并排序</strong>、<strong>快速排序</strong>、<strong>堆排序</strong>和<strong>基数排序</strong>。</p>
<span id="more"></span>
<h1 id="八大排序算法"><a href="#八大排序算法" class="headerlink" title="八大排序算法"></a>八大排序算法</h1><p>分别介绍各个算法的基本思想、实现和稳定性，其中<strong>快速排序</strong>效率最高，最应该掌握。</p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>从左向右比较相邻元素，如果第一个数比第二个数大，交换位置，一趟排序使最大值位于最右边，每趟排序个数减一，直至个数为一。</p>
<h3 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length - <span class="number">1</span> ; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; arr.length - i - <span class="number">1</span> ; j ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>稳定</p>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择最小元素与左边第一位交换位置，然后从剩余元素中选最小元素，放在已排序元素后，直至待排序元素为空。</p>
<h3 id="java实现-1"><a href="#java实现-1" class="headerlink" title="java实现"></a>java实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> minIndex = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span> ; j &lt; arr.length ; j ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                    minIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            arr[i] = arr[minIndex];</span><br><span class="line">            arr[minIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="稳定性-1"><a href="#稳定性-1" class="headerlink" title="稳定性"></a>稳定性</h3><p>不稳定</p>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>从第二个元素开始，插入已排序好得数组，直至全部插入。</p>
<h3 id="java实现-2"><a href="#java实现-2" class="headerlink" title="java实现"></a>java实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span> <span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; arr.length ; i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j = i - <span class="number">1</span> ; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp ; j--) &#123;</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="稳定性-2"><a href="#稳定性-2" class="headerlink" title="稳定性"></a>稳定性</h3><p>稳定</p>
<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>取数组长度的为增量，每次减半后按增量为元素分组，对每组进行插入排序，直至增量为一。</p>
<h3 id="java实现-3"><a href="#java实现-3" class="headerlink" title="java实现"></a>java实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> d = arr.length;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            d = d / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span> ; x &lt; d ; x++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = x + d ; i &lt; arr.length; i = i + d) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                    <span class="keyword">int</span> j;</span><br><span class="line">                    <span class="keyword">for</span> (j = i - d ; j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; temp ; j = j - d) &#123;</span><br><span class="line">                        arr[j + d] = arr[j];</span><br><span class="line">                    &#125;</span><br><span class="line">                    arr[j + d] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (d != <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="稳定性-3"><a href="#稳定性-3" class="headerlink" title="稳定性"></a>稳定性</h3><p>不稳定</p>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>把数组不断递归拆分，直至无法拆分，把子数组合并在一起。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(low == high)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">        sort(arr, low, mid);</span><br><span class="line">        sort(arr, mid + <span class="number">1</span>, high);</span><br><span class="line">        merge(arr, low, mid + <span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] leftArray = <span class="keyword">new</span> <span class="keyword">int</span>[mid - low];</span><br><span class="line">        <span class="keyword">int</span>[] rightArray = <span class="keyword">new</span> <span class="keyword">int</span>[high - mid + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = low ; i &lt; mid ; i++) &#123;</span><br><span class="line">            leftArray[i - low] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = mid ; i &lt;= high ; i++) &#123;</span><br><span class="line">            rightArray[i - mid] = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span>  k = low;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; leftArray.length &amp;&amp; j &lt; rightArray.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (leftArray[i] &lt; rightArray[j]) &#123;</span><br><span class="line">                arr[k] = leftArray[i];</span><br><span class="line">                i++;</span><br><span class="line">                k++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr[k] = rightArray[j];</span><br><span class="line">                j++;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; leftArray.length) &#123;</span><br><span class="line">            arr[k] = leftArray[i];</span><br><span class="line">            i++;</span><br><span class="line">            k++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; rightArray.length) &#123;</span><br><span class="line">            arr[k] = rightArray[j];</span><br><span class="line">            k++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="稳定性-4"><a href="#稳定性-4" class="headerlink" title="稳定性"></a>稳定性</h3><p>稳定</p>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>取数组第一位为key值，将小于key值的数放在左边，大于key值得数放在右边，再分别对左右两部分进行快速排序，直至无法切分。</p>
<h3 id="java实现-4"><a href="#java实现-4" class="headerlink" title="java实现"></a>java实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lo = low;</span><br><span class="line">        <span class="keyword">int</span> hi = high;</span><br><span class="line">        <span class="keyword">int</span> key = arr[low];</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">while</span>(low &lt; high &amp;&amp; arr[high] &gt;= key) &#123;</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[low] = arr[high];</span><br><span class="line">            <span class="keyword">while</span>(low &lt; high &amp;&amp; arr[low] &lt;= key) &#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[high] = arr[low];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[high] = key;</span><br><span class="line">        <span class="keyword">if</span>(hi &gt; high+<span class="number">1</span>) sort(arr,high+<span class="number">1</span>,hi);</span><br><span class="line">        <span class="keyword">if</span>(lo &lt; low-<span class="number">1</span>) sort(arr,lo,low-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="稳定性-5"><a href="#稳定性-5" class="headerlink" title="稳定性"></a>稳定性</h3><p>不稳定</p>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>构造最大堆，堆顶元素与末尾元素交换后，去除尾元素，重新构造最大堆，直至堆为空。</p>
<h3 id="java实现-5"><a href="#java实现-5" class="headerlink" title="java实现"></a>java实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == arr || <span class="number">1</span> &gt;= arr.length) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 构建最大堆</span></span><br><span class="line">        buildMaxHeap(arr);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span> ; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            swap(arr, <span class="number">0</span>, i);</span><br><span class="line">            heapify(arr, <span class="number">0</span>, i - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length / <span class="number">2</span> - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i--) &#123;</span><br><span class="line">            heapify(arr, i, arr.length - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断非叶子节点的左右子节点是否满足最大堆特性</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> li = index * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ri = li + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> max = li;</span><br><span class="line">        <span class="keyword">if</span> (li &gt; len) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 左右两个子结点中较大的值</span></span><br><span class="line">        <span class="keyword">if</span> (ri &lt;= len &amp;&amp; arr[ri] &gt; arr[li])&#123;</span><br><span class="line">            max = ri;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 较大值与父结点比较</span></span><br><span class="line">        <span class="keyword">if</span> (arr[max] &gt; arr[index]) &#123;</span><br><span class="line">            swap(arr, max, index);</span><br><span class="line">            heapify(arr, max, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="稳定性-6"><a href="#稳定性-6" class="headerlink" title="稳定性"></a>稳定性</h3><p>不稳定</p>
<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>确定最大元素的位数，即排序的次数。将所有元素分配给10个桶，再依次取出，重复此步骤至需要排序的次数。</p>
<h3 id="java实现-6"><a href="#java实现-6" class="headerlink" title="java实现"></a>java实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadixSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = findMax(arr);</span><br><span class="line">        <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(max &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            max /= <span class="number">10</span>;</span><br><span class="line">            time++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] temp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line">        <span class="keyword">int</span>[] order = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span> divisor = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; time; i++) &#123;</span><br><span class="line">            <span class="comment">//分配</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> ele : arr) &#123;</span><br><span class="line">                <span class="keyword">int</span> digit = ((ele / divisor) % <span class="number">10</span>);</span><br><span class="line">                temp[digit][order[digit]++] = ele;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//收集</span></span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(k &lt; order[j])&#123;</span><br><span class="line">                    arr[index++] = temp[j][k++];  <span class="comment">// 按照先进先出依次取出桶中的元素</span></span><br><span class="line">                &#125;</span><br><span class="line">                order[j] = <span class="number">0</span>;  <span class="comment">// 计数器归零</span></span><br><span class="line">            &#125;</span><br><span class="line">            divisor *= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findMax</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; array.length ; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i] &gt; array[max])&#123;</span><br><span class="line">                max = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[max];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="稳定性-7"><a href="#稳定性-7" class="headerlink" title="稳定性"></a>稳定性</h3><p>稳定</p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>完整代码已上传，<a href="https://github.com/yuan0824/sort">项目地址</a>：<a href="https://github.com/yuan0824/sort">https://github.com/yuan0824/sort</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>算法（第4版）-人民邮电出版社</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库-事务</title>
    <url>/2019/08/12/%E6%95%B0%E6%8D%AE%E5%BA%93-%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<p>事务全称数据库事务，是包含一系列数据库操作的执行单元</p>
<span id="more"></span>   

<h3 id="ACID特性"><a href="#ACID特性" class="headerlink" title="ACID特性"></a>ACID特性</h3><p>数据库事务必须满足的四大特性</p>
<ul>
<li>原子性（Atomicity）：事务作为一个整体，包含在其中的对数据库的操作要么全都执行，要么全都不执行</li>
<li>一致性（Consistency）：事务在完成的时候，所有数据都要保持一致状态，即数据都应该满足完整性约束</li>
<li>隔离性（Isolation）：多个事务并发执行时，事务之间互不影响</li>
<li>持久性（Durability）：事务完成以后，对数据库的修改永久保存</li>
</ul>
<h3 id="读现象"><a href="#读现象" class="headerlink" title="读现象"></a>读现象</h3><p>多个事务读取时可能出现三种读现象</p>
<ul>
<li>脏读：一个事务读取到了另一个事务<strong>修改但未提交</strong>的数据</li>
<li>不可重复度：一个事务读取两次，但因其他事务<strong>修改</strong>导致读取数据不相同</li>
<li>幻读：一个事务读取两次，但因其他事务<strong>新增或删除</strong>导致读取数据不相同</li>
</ul>
<h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>SQL标准中定义了四种隔离级别。级别越低，系统开销越小，级别越高，隔离性越强。</p>
<ul>
<li>未提交读（Read Uncommitted）：最低级，可能发生脏读</li>
<li>提交读（Read Committed）：可能发生不可重复读</li>
<li>可重复读（Repeatable Read）：可能发生幻读</li>
<li>可串行化（Serializable）：可避免幻读</li>
</ul>
<p>mysql默认隔离级别是<strong>可重复读</strong>，oracle默认隔离级别是<strong>提交读</strong></p>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>无向图-深广度优先算法</title>
    <url>/2019/04/26/%E6%97%A0%E5%90%91%E5%9B%BE-%E6%B7%B1%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>图是一种重要的数据结构，主要分为四种：无向图、有向图、加权图、加权有向图。无向图是由一组顶点和一组能将两个顶点相连的边组成，以无向图为例，学习<strong>深度优先算法</strong>和<strong>广度优先算法</strong>。</p>
<span id="more"></span>  
<h2 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h2><p>一般有两种表示方法</p>
<h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><ul>
<li>使用V(顶点数)乘V的布尔型矩阵，如果顶点v和顶点w之间有相连接的边时，定义v行w列的值为true，否则为false。</li>
<li>这种方法占用内存过大，不推荐使用。</li>
</ul>
<h3 id="邻接表数组"><a href="#邻接表数组" class="headerlink" title="邻接表数组"></a>邻接表数组</h3><ul>
<li>数组和链表的结合，数组中存放V(顶点数)个链表，将每个顶点的所有相邻点保存在该顶点对应元素的链表中。</li>
<li>性能较优，推荐使用。</li>
</ul>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>可以将无向图表示为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UndirectedGraph</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> v;    <span class="comment">//顶点数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> e;    <span class="comment">//边的数目</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Integer&gt;[] adj;    <span class="comment">//邻接表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UndirectedGraph</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.v = v;</span><br><span class="line">        <span class="keyword">this</span>.e = <span class="number">0</span>;</span><br><span class="line">        adj = <span class="keyword">new</span> LinkedList[v];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; v ; i++)&#123;</span><br><span class="line">            adj[i] = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v , <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">        adj[v].add(w);</span><br><span class="line">        adj[w].add(v);</span><br><span class="line">        e++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LinkedList&lt;Integer&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adj[v];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h2><p><strong>深度优先搜索</strong>可以用<strong>递归</strong>实现<strong>遍历顺序</strong>，给定一个起点，标记为已访问，递归访问没有被标记的顶点，主要代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(UndirectedGraph graph , <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    marked[v] = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> w : graph.adj(v))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!marked[w]) &#123;</span><br><span class="line">            edgeTo.add(w);</span><br><span class="line">            dfs(graph,w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h2><p><strong>广度优先搜索</strong>不能递归实现，需要<strong>借助队列</strong>实现<strong>遍历顺序</strong>，此外还可以解决<strong>最短路径问题</strong>。</p>
<h3 id="遍历顺序主要代码"><a href="#遍历顺序主要代码" class="headerlink" title="遍历顺序主要代码"></a>遍历顺序主要代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(UndirectedGraph graph , <span class="keyword">int</span> s)</span></span>&#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; temp = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">    marked[s] = <span class="keyword">true</span>;</span><br><span class="line">    temp.add(s);</span><br><span class="line">    edgeTo.add(s);</span><br><span class="line">    <span class="keyword">while</span> (!temp.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">int</span> v = temp.remove();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> w : graph.adj(v))&#123;</span><br><span class="line">            <span class="keyword">if</span>(!marked[w])&#123;</span><br><span class="line">                marked[w] = <span class="keyword">true</span>;</span><br><span class="line">                temp.add(w);</span><br><span class="line">                edgeTo.add(w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最短路径主要代码"><a href="#最短路径主要代码" class="headerlink" title="最短路径主要代码"></a>最短路径主要代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> LinkedList&lt;Integer&gt; <span class="title">pathTo</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!marked[v]) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x = v;x != s ; x = edgeTo[x])&#123;</span><br><span class="line">        list.addFirst(x);</span><br><span class="line">    &#125;</span><br><span class="line">    list.addFirst(s);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>完整代码已上传，<a href="https://github.com/yuan0824/graph/tree/master/UndirectedGraph/src">项目地址</a>：<a href="https://github.com/yuan0824/graph">https://github.com/yuan0824/graph</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>算法（第4版）-人民邮电出版社</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>无向图-送货类问题</title>
    <url>/2019/04/28/%E6%97%A0%E5%90%91%E5%9B%BE-%E9%80%81%E8%B4%A7%E7%B1%BB%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>从编号为1的交叉路口出发，每次必须沿街道去往街道另一端的路口，再从新的路口出发去往下一个路口，直到所有的街道都经过了正好一次。</p>
<span id="more"></span>  
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>为了增加公司收入，F公司新开设了物流业务。由于F公司在业界的良好口碑，物流业务一开通即受到了消费者的欢迎，物流业务马上遍及了城市的每条街道。然而，F公司现在只安排了小明一个人负责所有街道的服务。任务虽然繁重，但是小明有足够的信心，他拿到了城市的地图，准备研究最好的方案。城市中有n个交叉路口，m条街道连接在这些交叉路口之间，每条街道的首尾都正好连接着一个交叉路口。除开街道的首尾端点，街道不会在其他位置与其他街道相交。每个交叉路口都至少连接着一条街道，有的交叉路口可能只连接着一条或两条街道。</p>
<h2 id="边的数据结构"><a href="#边的数据结构" class="headerlink" title="边的数据结构"></a>边的数据结构</h2><p>把每一条道路看作一条边，两个顶点一大一小，可表示为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Edge</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> v;               <span class="comment">//小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> w;               <span class="comment">//大</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Edge</span><span class="params">(<span class="keyword">int</span> v , <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(v &lt; w)&#123;</span><br><span class="line">            <span class="keyword">this</span>.v = v;</span><br><span class="line">            <span class="keyword">this</span>.w = w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v &gt; w) &#123;</span><br><span class="line">            <span class="keyword">this</span>.w = v;</span><br><span class="line">            <span class="keyword">this</span>.v = w;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Inconsistent edge&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%d-%d&quot;</span> , v , w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.toString().equals(<span class="keyword">this</span>.toString()))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="图的数据结构"><a href="#图的数据结构" class="headerlink" title="图的数据结构"></a>图的数据结构</h2><p>顶点从1开始，问题可以表示为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UndirectedGraph</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> v;    <span class="comment">//顶点数目</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> e;    <span class="comment">//边的数目</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Integer&gt;[] adj;    <span class="comment">//邻接表</span></span><br><span class="line">    <span class="keyword">private</span> LinkedList&lt;Edge&gt; edge;   <span class="comment">//所有的边</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UndirectedGraph</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.v = v;</span><br><span class="line">        <span class="keyword">this</span>.e = <span class="number">0</span>;</span><br><span class="line">        adj = <span class="keyword">new</span> LinkedList[v];</span><br><span class="line">        edge = <span class="keyword">new</span> LinkedList&lt;Edge&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; v ; i++)&#123;</span><br><span class="line">            adj[i] = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> v , <span class="keyword">int</span> w)</span></span>&#123;</span><br><span class="line">        adj[v].add(w);</span><br><span class="line">        adj[w].add(v);</span><br><span class="line">        edge.add(<span class="keyword">new</span> Edge(v,w));</span><br><span class="line">        e++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> LinkedList&lt;Integer&gt; <span class="title">adj</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> adj[v];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getV</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getE</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LinkedList&lt;Edge&gt; <span class="title">edge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> edge;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="具体解决"><a href="#具体解决" class="headerlink" title="具体解决"></a>具体解决</h2><p>如果存在，则可输出路径，不存在则抛出异常，主要代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">(Graph graph , <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!graph.adj(v).isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> w = Collections.min(graph.adj(v));</span><br><span class="line">        graph.adj(v).remove(<span class="keyword">new</span> Integer(w));</span><br><span class="line">        graph.adj(w).remove(<span class="keyword">new</span> Integer(v));</span><br><span class="line">        edge.remove(<span class="keyword">new</span> Edge(v, w));</span><br><span class="line">        vertex.add(w);</span><br><span class="line">        search(graph, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(graph.adj(v).isEmpty() &amp;&amp; !edge.isEmpty())  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;unsatisfactory route&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><p>测试数据1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliverGoodsTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Graph graph = <span class="keyword">new</span> Graph(<span class="number">4</span>);</span><br><span class="line">        graph.addEdge(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        graph.addEdge(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">        graph.addEdge(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        graph.addEdge(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">        graph.addEdge(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">        DeliverGoods deliverGoods = <span class="keyword">new</span> DeliverGoods(graph);</span><br><span class="line">        System.out.println(deliverGoods.getVertex());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/DeliverGoods1.png" alt="">  </p>
<p>输出<br><code>[1, 2, 4, 1, 3, 4]</code></p>
<p>测试数据2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliverGoodsTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Graph graph = <span class="keyword">new</span> Graph(<span class="number">4</span>);</span><br><span class="line">        graph.addEdge(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        graph.addEdge(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        graph.addEdge(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">        graph.addEdge(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">        graph.addEdge(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">        graph.addEdge(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        DeliverGoods deliverGoods = <span class="keyword">new</span> DeliverGoods(graph);</span><br><span class="line">        System.out.println(deliverGoods.getVertex());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/img/DeliverGoods2.png" alt="">  </p>
<p>输出<br><code>Exception in thread &quot;main&quot; java.lang.RuntimeException: unsatisfactory route</code></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>送货类问题也是无向图很好的应用场景，深广度搜索本质遍历所有的点，而送货类问题本质是遍历所有的边。</p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><p>完整代码已上传，<a href="https://github.com/yuan0824/graph/tree/master/UndirectedGraph/src">项目地址</a>：<a href="https://github.com/yuan0824/graph">https://github.com/yuan0824/graph</a></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>算法（第4版）-人民邮电出版社</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>日志管理</title>
    <url>/2019/08/06/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>在遇到问题，经常需要使用debug功能来确定问题，服务器上的系统就必须要打日志，有良好的日志才能更快定位到问题。<strong>slf4j+logback是目前最推荐的日志框架</strong>，也是Spring Boot中记录日志的方式。</p>
<span id="more"></span>  

<h2 id="slf4j"><a href="#slf4j" class="headerlink" title="slf4j"></a>slf4j</h2><p>SLF4J全称Simple Logging Facade for Java，即Java语言的简单日志门面，为多种日志记录框架（如logback、log4j）提供了抽象。</p>
<h3 id="使用原因"><a href="#使用原因" class="headerlink" title="使用原因"></a>使用原因</h3><p>在阿里巴巴规范关于日志的第一条内容如下<br><img src="/img/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86.png" alt=""><br>不能直接使用Java日志库，而必须引入日志门面模式。不仅仅是简化日志库的使用，更能限制和统一日志处理方式。</p>
<h3 id="slf4j-simple"><a href="#slf4j-simple" class="headerlink" title="slf4j-simple"></a>slf4j-simple</h3><p>使用slf4j自带日志库<code>slf4j-simple</code>进行日志记录<br>引入maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Logger logger = LoggerFactory.getLogger(Test.class);</span><br><span class="line">        logger.info(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><p>在slf4j中，应使用占位符动态记录日志。<br>使用字符串拼接，效率低</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">    logger.debug(<span class="string">&quot;Processing trade with id: &quot;</span> + id + <span class="string">&quot; symbol: &quot;</span> + symbol);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用占位符，效率高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;Processing trade with id: &#123;&#125; and symbol : &#123;&#125; &quot;</span>, id, symbol);</span><br></pre></td></tr></table></figure>

<p>为了更好的可读性，更易排查问题，经常使用如下格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.debug(<span class="string">&quot;Processing trade with id:[&#123;&#125;] and symbol : [&#123;&#125;] &quot;</span>, id, symbol);</span><br></pre></td></tr></table></figure>


<h2 id="logback"><a href="#logback" class="headerlink" title="logback"></a>logback</h2><p>slf4j-simple功能有限，所以需要一个更强大的日志库。<strong>log4j是主流的Java日志库，而logback更像是log4j的取代者</strong></p>
<h3 id="取代原因"><a href="#取代原因" class="headerlink" title="取代原因"></a>取代原因</h3><ul>
<li>内核重写后的logback有更快的实现</li>
<li>测试充分</li>
<li>Logback-classic实现了SLF4j</li>
<li>官网参考手册和api充分</li>
</ul>
<p><img src="/img/%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%861.png" alt=""></p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Logback分为三个模块，<strong>logback-core</strong>，<strong>logback-classic</strong>，<strong>logback-access</strong>，</p>
<ul>
<li>logback-core是其他两个模块的基础</li>
<li>logback-classic模块集成slf4j</li>
<li>logback-access模块集成Servlet容器（Tomcat）</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>引入maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--这个依赖直接包含了 logback-core 以及 slf4j-api的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>java类中使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Test.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>可以使用编码方式配置，也可以使用<code>XML</code>或<code>Groovy</code>配置，加载配置的步骤如下：</p>
<ol>
<li>在classpath中寻找<code>logback-test.xml</code></li>
<li>如果没找到，继续在classpath中寻找<code>logback.groovy</code></li>
<li>如果没找到，继续在classpath中寻找<code>logback.xml</code></li>
<li>如果没找到，继续在classpath中寻找com.qos.logback.classic.spi.Configurator接口的第一个实现类</li>
<li>上述都没有，则自动加载BasicConfigurator进行配置</li>
</ol>
<p>推荐在<code>src/test/resources</code>目录中使用<code>logback-test.xml</code>，用于测试；在<code>src/main/resources</code>目录中使用<code>logback.xml</code>，用于生产。</p>
<p>最简单的logback.xml示例如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><p>设置日志级别可以选择需要打印的日志</p>
<h3 id="slf4j-1"><a href="#slf4j-1" class="headerlink" title="slf4j"></a>slf4j</h3><p>slf4j中Logger接口有5种级别，trace，debug，info，warn，error，即在打印日志时，只能设置Logger这5种级别。（默认日志级别为debug）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.slf4j; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trace</span><span class="params">(String message)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(String message)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(String message)</span></span>; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(String message)</span></span>; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(String message)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>级别顺序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR</span><br></pre></td></tr></table></figure>

<h3 id="logback-1"><a href="#logback-1" class="headerlink" title="logback"></a>logback</h3><p>logback的<code>ch.qos.logback.classic.Level</code>类中有7种级别，off，error，warn，info，debug，trace，all，即在配置文件种可以设置root标签为这7类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ch.qos.logback.classic;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Level</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Level OFF = <span class="keyword">new</span> Level(<span class="number">2147483647</span>, <span class="string">&quot;OFF&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Level ERROR = <span class="keyword">new</span> Level(<span class="number">40000</span>, <span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Level WARN = <span class="keyword">new</span> Level(<span class="number">30000</span>, <span class="string">&quot;WARN&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Level INFO = <span class="keyword">new</span> Level(<span class="number">20000</span>, <span class="string">&quot;INFO&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Level DEBUG = <span class="keyword">new</span> Level(<span class="number">10000</span>, <span class="string">&quot;DEBUG&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Level TRACE = <span class="keyword">new</span> Level(<span class="number">5000</span>, <span class="string">&quot;TRACE&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Level ALL = <span class="keyword">new</span> Level(-<span class="number">2147483648</span>, <span class="string">&quot;ALL&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结合使用"><a href="#结合使用" class="headerlink" title="结合使用"></a>结合使用</h3><p>测试类如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Test.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;Trace&quot;</span>);</span><br><span class="line">        logger.debug(<span class="string">&quot;Debug&quot;</span>);</span><br><span class="line">        logger.info(<span class="string">&quot;Info&quot;</span>);</span><br><span class="line">        logger.warn(<span class="string">&quot;Warn&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件logback-test.xml中</p>
<ul>
<li><code>&lt;root level=&quot;all&quot;&gt;</code>，打印所有级别日志；</li>
<li><code>&lt;root level=&quot;off&quot;&gt;</code>，所有级别日志都不打印，</li>
<li><code>&lt;root level=&quot;debug&quot;&gt;</code>，打印包含debug及以上级别的日志</li>
<li><code>&lt;root level=&quot;xxx&quot;&gt;</code>，打印包含xxx及以上级别的日志</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.slf4j.org/">slf4j官网</a></li>
<li><a href="https://logback.qos.ch/">logback官网</a></li>
<li><a href="https://blog.csdn.net/zbajie001/article/details/79596109">logback和log4j比较</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>有线和无线</title>
    <url>/2019/06/12/%E6%9C%89%E7%BA%BF%E5%92%8C%E6%97%A0%E7%BA%BF/</url>
    <content><![CDATA[<p>笔记本同时连接有线和无线的时候，可以设置它们的优先级，来决定使用哪个网络，以及同时使用无线和有线，来实现内网和外网的同时连接。</p>
<span id="more"></span>  

<h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><p>当同时连接网线和Wifi的时候，使用cmd命令<code>route print</code>，查看路由信息，会发现两条网络目标和网络掩码都是<code>0.0.0.0</code>的数据，其中一个是无线，一个是有线，并且有各自的跃点数，可以发现默认的连接网络是跃点数较小的那个，即<strong>跃点数越小，优先级越高</strong>。可以在网络连接处更改跃点数，决定使用哪个网络。</p>
<h2 id="同时使用"><a href="#同时使用" class="headerlink" title="同时使用"></a>同时使用</h2><p>以管理员身份运行cmd，删除内网数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">route delete 0.0.0.0 mask 0.0.0.0 179.x.x.x</span><br></pre></td></tr></table></figure>
<p>添加永久路由，使访问179开头的内网时，使用内部网络</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">route add -p 179.0.0.0 mask 255.0.0.0 179.x.x.x</span><br></pre></td></tr></table></figure>
<p>此时就可以同时访问内网和外网了。</p>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>科学上网</title>
    <url>/2019/05/24/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<p>之前使用赛风之类的vpn，速度并不理想，便开始尝试使用Shadowsocks，目前使用良好，如遇到问题，会考虑尝试ShadowsocksR或者V2Ray。</p>
<span id="more"></span>  

<h2 id="为什么要科学上网"><a href="#为什么要科学上网" class="headerlink" title="为什么要科学上网"></a>为什么要科学上网</h2><blockquote>
<p>学会有效的使用google，将节省大量开发时间</p>
</blockquote>
<p>不仅是<strong>google</strong>，<strong>Stackoverflow</strong>，相应的<strong>社区</strong>，<strong>官方的文档</strong>，都是我们遇到问题最应该去的地方。</p>
<h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><p>选择国外vps作为服务器，做流量中转。</p>
<h3 id="vps"><a href="#vps" class="headerlink" title="vps"></a>vps</h3><p><a href="https://billing.virmach.com/aff.php?aff=9928">VirMach VPS Hosting</a></p>
<ul>
<li><a href="https://billing.virmach.com">virmach</a></li>
<li><a href="https://www.vultr.com/?ref=8090169">vulter</a>（目前使用且推荐，可以一键换ip）</li>
<li><a href="https://bwh88.net/">搬瓦工</a></li>
</ul>
<p>在vps上不仅可以搭建ss服务器，也可以搭建自己的个人博客，或者部署其他任何应用。</p>
<h3 id="加速"><a href="#加速" class="headerlink" title="加速"></a>加速</h3><p>如果速度不理想，可以启用加速。锐速不再更新，推荐使用谷歌BBR进行加速。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载</span><br><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 赋权</span><br><span class="line">chmod +x bbr.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 执行</span><br><span class="line">./bbr.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 三合一</span><br><span class="line">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装ss服务器端应用，也是三条命令（端口最好大于1000）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载</span><br><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 赋权</span><br><span class="line">chmod +x shadowsocks.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 执行</span><br><span class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 三合一</span><br><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh &amp;&amp; chmod +x shadowsocks.sh &amp;&amp; ./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure>


<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>运行shadowsocks.sh命令如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start 后台启动</span><br></pre></td></tr></table></figure>

<p>同样有如下两个命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d stop 后台停止</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d restart 后台重启</span><br></pre></td></tr></table></figure>

<h3 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h3><table>
<thead>
<tr>
<th>问题</th>
<th>解决方法</th>
<th>测试地址</th>
<th>命令</th>
</tr>
</thead>
<tbody><tr>
<td>ip被墙</td>
<td>换ip</td>
<td><a href="https://tools.ipip.net/ping.php">ip测试地址</a>或ping.pe</td>
<td>ping x.x.x.x</td>
</tr>
<tr>
<td>tcp阻断</td>
<td>换端口</td>
<td><a href="http://port.ping.pe/">tcp测试地址</a></td>
<td>telnet x.x.x.x port</td>
</tr>
</tbody></table>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>Windows、Andriod都有其相对应的版本。</p>
<h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><ul>
<li><a href="https://github.com/shadowsocks">客户端下载</a></li>
</ul>
]]></content>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>精度丢失</title>
    <url>/2021/01/12/%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1/</url>
    <content><![CDATA[<p>Java中有两种浮点类型，float和double，都是以二进制的形式存储，是近似值。</p>
<span id="more"></span>   


<h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><ul>
<li>对于整数而言，十进制转二进制，二进制转十进制都不会有问题。</li>
<li>对于小数，十进制转二进制可能会存在精度丢失的问题。</li>
</ul>
<h3 id="BigDecimal"><a href="#BigDecimal" class="headerlink" title="BigDecimal"></a>BigDecimal</h3><p>为了获取精确的值，需要使用BigDecimal。<br>错误使用如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> BigDecimal(<span class="number">1.1</span>)</span><br><span class="line"><span class="keyword">new</span> BigDecimal(<span class="keyword">new</span> Double(<span class="string">&quot;0.1&quot;</span>))</span><br></pre></td></tr></table></figure>
<p>正确使用如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> BigDecimal(<span class="string">&quot;1.1&quot;</span>)</span><br><span class="line">BigDecimal.valueOf(<span class="keyword">new</span> Double(<span class="string">&quot;0.1&quot;</span>))</span><br></pre></td></tr></table></figure>




]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>记一道笔试题</title>
    <url>/2019/01/15/%E8%AE%B0%E4%B8%80%E9%81%93%E7%AC%94%E8%AF%95%E9%A2%98/</url>
    <content><![CDATA[<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<span id="more"></span>
<h3 id="给出答案"><a href="#给出答案" class="headerlink" title="给出答案"></a>给出答案</h3><p>第一反应是先进行排序，在依次比较相邻的奇数位和偶数位，不相同则即为所求，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findsingle</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">	bubbleSort(arr);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length - <span class="number">1</span>; i+=<span class="number">2</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[i] != arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">			<span class="keyword">return</span> arr[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> arr[arr.length-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length - <span class="number">1</span> ; i ++) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ; j &lt; arr.length - i - <span class="number">1</span> ; j ++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">				<span class="keyword">int</span> temp = arr[j];          </span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;    </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>忽视了效率的问题，使用set可能更为有效，代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findsingle</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">	HashSet&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;Integer&gt;();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!set.add(i))&#123;</span><br><span class="line">			set.remove(i);</span><br><span class="line">		&#125;		</span><br><span class="line">	&#125;</span><br><span class="line">	Iterator&lt;Integer&gt; it = set.iterator();</span><br><span class="line">	<span class="keyword">return</span> it.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-中介者模式</title>
    <url>/2019/09/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>中介者模式</strong>（Mediator pattern），属于<strong>行为型模式</strong>，去除多个对象之间复杂调用关系，增加中介者，强制所有对象通过中介者交互。</p>
<span id="more"></span>

<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt=""><br>涉及到了四个角色，<strong>Mediator</strong>（中介者）、<strong>ConcreteMediator</strong>（具体中介者）、<strong>Colleague</strong>（同事）、<strong>ConcreteColleague</strong>（具体同事）</p>
<h3 id="同事"><a href="#同事" class="headerlink" title="同事"></a>同事</h3><p>Colleague，包含对中介者的引用，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">(Mediator mediator)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="中介者"><a href="#中介者" class="headerlink" title="中介者"></a>中介者</h3><p>Mediator，接口或抽象类，包含与同事通讯的方法，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message,Department department)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体同事"><a href="#具体同事" class="headerlink" title="具体同事"></a>具体同事</h3><p>ConcreteColleague，具体同事之间互不感知，必须和中介进行通讯，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Finance</span> <span class="keyword">extends</span> <span class="title">Department</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Finance</span><span class="params">(Mediator mediator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(mediator);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">grant</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;财政部拨款&quot;</span>);</span><br><span class="line">        mediator.notify(<span class="string">&quot;需要重建房屋&quot;</span>,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获得消息</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">GetMessage</span><span class="params">(String message)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;财政部获得消息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体中介者"><a href="#具体中介者" class="headerlink" title="具体中介者"></a>具体中介者</h3><p>ConcreteMediator，封装不同组件之间的关系，保存所有同事的引用，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Government</span> <span class="keyword">implements</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Construction construction;</span><br><span class="line">    <span class="keyword">private</span> Defense defense;</span><br><span class="line">    <span class="keyword">private</span> Finance finance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setConstruction</span><span class="params">(Construction construction)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.construction = construction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDefense</span><span class="params">(Defense defense)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.defense = defense;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFinance</span><span class="params">(Finance finance)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finance = finance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dealDisaster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理灾害&quot;</span>);</span><br><span class="line">        finance.grant();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">defend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;处理入侵&quot;</span>);</span><br><span class="line">        defense.fight();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">develop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发展&quot;</span>);</span><br><span class="line">        construction.buildPalace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message, Department department)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(department == construction)</span><br><span class="line">        &#123;</span><br><span class="line">            finance.GetMessage(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(department == defense)</span><br><span class="line">        &#123;</span><br><span class="line">            finance.GetMessage(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(department == finance)</span><br><span class="line">        &#123;</span><br><span class="line">            construction.GetMessage(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>对如上代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Government government = <span class="keyword">new</span> Government();</span><br><span class="line"></span><br><span class="line">        Construction construction = <span class="keyword">new</span> Construction(government);</span><br><span class="line">        Defense defense = <span class="keyword">new</span> Defense(government);</span><br><span class="line">        Finance finance = <span class="keyword">new</span> Finance(government);</span><br><span class="line"></span><br><span class="line">        government.setConstruction(construction);</span><br><span class="line">        government.setDefense(defense);</span><br><span class="line">        government.setFinance(finance);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        defense.fight();</span></span><br><span class="line"><span class="comment">//        construction.buildPalace();</span></span><br><span class="line"><span class="comment">//        finance.grant();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        government.develop();</span></span><br><span class="line"><span class="comment">//        government.defend();</span></span><br><span class="line">        government.dealDisaster();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">处理灾害</span><br><span class="line">财政部拨款</span><br><span class="line">建造部获得消息：需要重建房屋</span><br></pre></td></tr></table></figure>

<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><ul>
<li>降低了具体同事类之间的耦合，所有具体类只依赖于中介者</li>
<li>中介类可能变得很大</li>
</ul>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/mediator">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://refactoring.guru/design-patterns/mediator">refactoring.guru</a></li>
<li><a href="https://www.kancloud.cn/digest/java-designer-patten/163187">kancloud.cn</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-享元模式</title>
    <url>/2019/09/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>享元模式</strong>（Flyweight pattern），属于<strong>结构型模式</strong>，可以减少创建对象的数量，从而减少堆内存占用和提高效率。</p>
<span id="more"></span>


<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.png" alt=""><br>涉及到了两个角色，<strong>flyweight</strong>（享元类）、<strong>flyweightFactory</strong>（享元工厂）</p>
<h2 id="享元类"><a href="#享元类" class="headerlink" title="享元类"></a>享元类</h2><p>flyweight，享元类可以被多个对象共享，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookOrder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    BookOrder(String name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;卖了一本书，书名为&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="享元工厂"><a href="#享元工厂" class="headerlink" title="享元工厂"></a>享元工厂</h2><p>flyweightFactory，用数据池（如Map）管理所有享元对象，存在则返回，不存在则新增。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookOrderFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, BookOrder&gt; pool;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookOrderFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pool = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookOrder <span class="title">getBookOrder</span><span class="params">(String bookname)</span></span>&#123;</span><br><span class="line">        BookOrder bookOrder = pool.get(bookname);</span><br><span class="line">        <span class="keyword">if</span>(bookOrder == <span class="keyword">null</span>)&#123;</span><br><span class="line">            bookOrder = <span class="keyword">new</span> BookOrder(bookname);</span><br><span class="line">            pool.put(bookname, bookOrder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bookOrder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>客户端必须通过享元工厂创建享元对象，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BookOrderFactory factory = <span class="keyword">new</span> BookOrderFactory();</span><br><span class="line">        List&lt;BookOrder&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(factory.getBookOrder(<span class="string">&quot;三国&quot;</span>));</span><br><span class="line">        list.add(factory.getBookOrder(<span class="string">&quot;水浒&quot;</span>));</span><br><span class="line">        list.add(factory.getBookOrder(<span class="string">&quot;三国&quot;</span>));</span><br><span class="line">        list.add(factory.getBookOrder(<span class="string">&quot;水浒&quot;</span>));</span><br><span class="line">        list.add(factory.getBookOrder(<span class="string">&quot;水浒&quot;</span>));</span><br><span class="line">        list.add(factory.getBookOrder(<span class="string">&quot;三国&quot;</span>));</span><br><span class="line">        <span class="keyword">for</span>(BookOrder order : list)&#123;</span><br><span class="line">            order.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好处：本来需要创建6个对象，现在只需要创建2个享元对象</p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/flyweight">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://ja.wikipedia.org/wiki/Flyweight_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">wikipedia.org</a></li>
<li><a href="https://www.jianshu.com/p/f88b903a166a">jianshu.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-代理模式</title>
    <url>/2019/08/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>代理模式</strong>（Proxy pattern）属于<strong>结构型模式</strong>，通过<strong>代理类</strong>，在不修改已有代码的前提下，在类的前后增加业务逻辑，即<strong>无侵入式的扩展代码</strong>。</p>
<span id="more"></span>

<h1 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h1><p>传统的代理模式也就是静态代理</p>
<ul>
<li>控制对象的存取，并提供<strong>额外功能</strong>，如对资源缓存，检查先决条件等。</li>
<li>缺点是需要对每一个目标类编写代理类，工作量大。</li>
</ul>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.png" alt=""><br>涉及到了三个角色，<strong>Subject</strong>（抽象接口）、<strong>realSubject</strong>（目标类）、<strong>Proxy</strong>（代理类）</p>
<h3 id="抽象接口"><a href="#抽象接口" class="headerlink" title="抽象接口"></a>抽象接口</h3><p>Subject，目标类和代理类都需要实现的接口，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Internet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(String domain)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="目标类"><a href="#目标类" class="headerlink" title="目标类"></a>目标类</h3><p>realSubject，真正需要实现的业务逻辑，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealInternet</span> <span class="keyword">implements</span> <span class="title">Internet</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(String domain)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Connecting to &quot;</span>+ domain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h3><p>Proxy，内部有目标类的引用，并提供一些额外功能，如设置一系列屏蔽域名，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInternet</span> <span class="keyword">implements</span> <span class="title">Internet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RealInternet realInternet = <span class="keyword">new</span> RealInternet();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; bannedSites;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        bannedSites = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        bannedSites.add(<span class="string">&quot;google.com&quot;</span>);</span><br><span class="line">        bannedSites.add(<span class="string">&quot;twitter.com&quot;</span>);</span><br><span class="line">        bannedSites.add(<span class="string">&quot;youtube.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(String domain)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(bannedSites.contains(domain))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Access Denied&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        realInternet.connect(domain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>对如上代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Internet internet = <span class="keyword">new</span> ProxyInternet();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            internet.connect(<span class="string">&quot;twitch.tv&quot;</span>);</span><br><span class="line">            internet.connect(<span class="string">&quot;youtube.com&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Connecting to twitch.tv</span><br><span class="line">Access Denied</span><br></pre></td></tr></table></figure>


<h1 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h1><p><strong>为了解决N个目标类必须有N个代理类的问题</strong>，可以使用<strong>JDK动态代理</strong>，直接通过代理<strong>目标类</strong>的<strong>字节码文件</strong>，创建代理实例（反射），从而跳过代理类<strong>直接创建代理对象</strong>。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>使用JDK动态代理，实现与上述静态代理相同的功能，其中<strong>抽象接口和目标类相同，不需要代理类</strong></p>
<h3 id="InvocationHandler"><a href="#InvocationHandler" class="headerlink" title="InvocationHandler"></a>InvocationHandler</h3><p>实现<code>java.lang.reflect.InvocationHandler</code>接口，用于创建代理对象，实例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object delegate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; bannedSites;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Handler</span><span class="params">(Object delegate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newInstance</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(</span><br><span class="line">                obj.getClass().getClassLoader(),</span><br><span class="line">                obj.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> Handler(obj));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        bannedSites = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        bannedSites.add(<span class="string">&quot;google.com&quot;</span>);</span><br><span class="line">        bannedSites.add(<span class="string">&quot;twitter.com&quot;</span>);</span><br><span class="line">        bannedSites.add(<span class="string">&quot;youtube.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(bannedSites.contains(args[<span class="number">0</span>].toString()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Access Denied&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        method.invoke(delegate, args);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时动态代理完成，可以看到InvocationHandler接口的实现类针对的是<strong>接口</strong>，为所有实现这个接口的目标类所通用。</p>
<h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><p>对如上代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Internet internet = (Internet)Handler.newInstance(<span class="keyword">new</span> RealInternet());</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            internet.connect(<span class="string">&quot;twitch.tv&quot;</span>);</span><br><span class="line">            internet.connect(<span class="string">&quot;youtube.com&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Connecting to twitch.tv</span><br><span class="line">Access Denied</span><br></pre></td></tr></table></figure>

<h1 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h1><p>JDK动态代理针对接口，但如果<strong>目标类没有实现接口</strong>，推荐使用CGLIB动态代理</p>
<h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><p>使用CGLIB动态代理，实现与上述两种方式相同的功能</p>
<h3 id="引入jar包"><a href="#引入jar包" class="headerlink" title="引入jar包"></a>引入jar包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="目标类-1"><a href="#目标类-1" class="headerlink" title="目标类"></a>目标类</h3><p>需要代理的类，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealInternet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(String domain)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Connecting to &quot;</span>+ domain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="MethodInterceptor"><a href="#MethodInterceptor" class="headerlink" title="MethodInterceptor"></a>MethodInterceptor</h3><p>实现<code>net.sf.cglib.proxy.MethodInterceptor</code>接口，定义拦截策略，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; bannedSites;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newInstance</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">        TargetInterceptor targetInterceptor = <span class="keyword">new</span> TargetInterceptor();</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        enhancer.setCallback(targetInterceptor);</span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        bannedSites = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        bannedSites.add(<span class="string">&quot;google.com&quot;</span>);</span><br><span class="line">        bannedSites.add(<span class="string">&quot;twitter.com&quot;</span>);</span><br><span class="line">        bannedSites.add(<span class="string">&quot;youtube.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(bannedSites.contains(objects[<span class="number">0</span>].toString()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Access Denied&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        methodProxy.invokeSuper(o , objects);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端-2"><a href="#客户端-2" class="headerlink" title="客户端"></a>客户端</h3><p>对如上代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RealInternet realInternet = (RealInternet)TargetInterceptor.newInstance(RealInternet.class);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            realInternet.connect(<span class="string">&quot;twitch.tv&quot;</span>);</span><br><span class="line">            realInternet.connect(<span class="string">&quot;youtube.com&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Connecting to twitch.tv</span><br><span class="line">Access Denied</span><br></pre></td></tr></table></figure>

<h1 id="Spring中的面向切面编程"><a href="#Spring中的面向切面编程" class="headerlink" title="Spring中的面向切面编程"></a>Spring中的面向切面编程</h1><blockquote>
<p>Spring AOP is proxy-based</p>
</blockquote>
<p>Spring AOP基于代理，使用<strong>JDK动态代理</strong>或者<strong>CGLIB</strong>进行切面处理</p>
<h2 id="基于编程式实现"><a href="#基于编程式实现" class="headerlink" title="基于编程式实现"></a>基于编程式实现</h2><p>与上述编码风格相似，抽象接口和目标类不变，实现相同功能。</p>
<h3 id="MethodBeforeAdvice"><a href="#MethodBeforeAdvice" class="headerlink" title="MethodBeforeAdvice"></a>MethodBeforeAdvice</h3><p>实现接口<code>org.springframework.aop.MethodBeforeAdvice</code>，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockBeforeAdvice</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; bannedSites;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        bannedSites = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        bannedSites.add(<span class="string">&quot;google.com&quot;</span>);</span><br><span class="line">        bannedSites.add(<span class="string">&quot;twitter.com&quot;</span>);</span><br><span class="line">        bannedSites.add(<span class="string">&quot;youtube.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method m, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(bannedSites.contains(args[<span class="number">0</span>].toString()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Access Denied&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端-3"><a href="#客户端-3" class="headerlink" title="客户端"></a>客户端</h3><p>对如上代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ProxyFactory factory = <span class="keyword">new</span> ProxyFactory(<span class="keyword">new</span> RealInternet());</span><br><span class="line">        factory.addInterface(Internet.class);</span><br><span class="line">        factory.addAdvice(<span class="keyword">new</span> BlockBeforeAdvice());</span><br><span class="line">        Internet internet = (Internet) factory.getProxy();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            internet.connect(<span class="string">&quot;twitch.tv&quot;</span>);</span><br><span class="line">            internet.connect(<span class="string">&quot;youtube.com&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Connecting to twitch.tv</span><br><span class="line">Access Denied</span><br></pre></td></tr></table></figure>

<h2 id="基于注解实现"><a href="#基于注解实现" class="headerlink" title="基于注解实现"></a>基于注解实现</h2><p>Spring提供了基于注解的实现</p>
<h3 id="启用对-Aspect的支持"><a href="#启用对-Aspect的支持" class="headerlink" title="启用对@Aspect的支持"></a>启用对@Aspect的支持</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="声明一个Aspect"><a href="#声明一个Aspect" class="headerlink" title="声明一个Aspect"></a>声明一个Aspect</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotVeryUsefulAspect</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="声明一个Pointcut"><a href="#声明一个Pointcut" class="headerlink" title="声明一个Pointcut"></a>声明一个Pointcut</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* transfer(..))&quot;)</span> <span class="comment">// the pointcut expression</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">anyOldTransfer</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// the pointcut signature</span></span><br></pre></td></tr></table></figure>
<p>Spring AOP支持的pointcut表达式有execution、within、this、target、args、@target、@args、@within、@annotation。</p>
<h3 id="声明Advice"><a href="#声明Advice" class="headerlink" title="声明Advice"></a>声明Advice</h3><p>以下两组代码功能相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;block()&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBlock</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bannedSites.contains(joinPoint.getArgs()[<span class="number">0</span>].toString()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Access Denied&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;block()&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBlock</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(bannedSites.contains(joinPoint.getArgs()[<span class="number">0</span>].toString()))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Access Denied&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    joinPoint.proceed();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Advice和Pointcut表达式连接在一起，有@Before、@AfterReturning、@AfterThrowing、@After、@Around。</p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>使用注解@Aspect配置切面，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; bannedSites;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        bannedSites = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        bannedSites.add(<span class="string">&quot;google.com&quot;</span>);</span><br><span class="line">        bannedSites.add(<span class="string">&quot;twitter.com&quot;</span>);</span><br><span class="line">        bannedSites.add(<span class="string">&quot;youtube.com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.springAnnoProxy.Internet.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">block</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;block()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBlock</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(bannedSites.contains(joinPoint.getArgs()[<span class="number">0</span>].toString()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Access Denied&quot;</span>);<span class="comment">//此处如果设置为`Exception`，则会抛出`UndeclaredThrowableException`，且值为`null`，所以需要设置为`RuntimeException`，才能获取异常信息。  </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在配置文件中加入@EnableAspectJAutoProxy注解，启用对@Aspect支持，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.springAnnoProxy&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Internet <span class="title">internet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RealInternet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对如上代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ApplicationContext application = <span class="keyword">new</span> AnnotationConfigApplicationContext(Config.class);</span><br><span class="line">        Internet internet = (Internet) application.getBean(<span class="string">&quot;internet&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            internet.connect(<span class="string">&quot;twitch.tv&quot;</span>);</span><br><span class="line">            internet.connect(<span class="string">&quot;youtube.com&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Connecting to twitch.tv</span><br><span class="line">Access Denied</span><br></pre></td></tr></table></figure>


<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/proxy">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/Proxy_pattern">维基百科</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html">Java官方文档</a></li>
<li><a href="http://cglib.sourceforge.net/">cglib官网</a></li>
<li><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/spring-framework-reference/core.html#aop-proxying">Spring Reference</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-单例模式</title>
    <url>/2019/06/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>单例模式</strong>（Singleton Pattern）属于<strong>创建型模式</strong>，只涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其<strong>唯一的对象</strong>的方式，可以直接访问，不需要实例化该类的对象。</p>
<span id="more"></span>

<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul>
<li>该类只有一个实例</li>
<li>该类必须自己创建自己的实例</li>
<li>该类创建的实例被其他所有对象所共享</li>
</ul>
<h1 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h1><ul>
<li>内存中只有一个实例，减小了内存的开销</li>
<li>避免对共享资源过多的占用</li>
</ul>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul>
<li>与数据库建立连接</li>
<li>对配置文件的读取</li>
<li>网站计数器</li>
<li>Windows的回收站和资源管理器</li>
<li>Spring bean对象</li>
</ul>
<h1 id="构建方式"><a href="#构建方式" class="headerlink" title="构建方式"></a>构建方式</h1><p>分为两种构造方式，懒汉式和饿汉式</p>
<h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p>立即加载，全局的单例实例在类装载时构建</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>懒加载，全局的单例实例在第一次被使用时构建</p>
<h3 id="DCL-双重检查锁"><a href="#DCL-双重检查锁" class="headerlink" title="DCL(双重检查锁)"></a>DCL(双重检查锁)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton INSTANCE = <span class="keyword">null</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>)&#123;</span><br><span class="line">             <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">                 <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>)&#123; </span><br><span class="line">                     INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><code>INSTANCE = new Singleton();</code>具体实现大致分为三个步骤</p>
<ol>
<li>分配对象内存空间（<strong>new</strong>指令）</li>
<li>初始化对象（<strong>invokespecial</strong>指令）</li>
<li>设置instance指向分配的内存地址（<strong>putstatic</strong>指令）</li>
</ol>
<p>可能存在指令重排，导致1-3-2的情况出现，导致错误，所以需要使用<strong>volatile</strong>关键字来禁止指令重排，保证正确性。  </p>
<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>使用DCL过于繁琐，也可以使用<strong>静态内部类</strong>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h1><p>以上三种实现方法都是<strong>线程安全</strong>且效率较高，但也存在一些问题，一是反射安全，二是序列化安全，如果考虑到这两点，应该使用<strong>枚举</strong>实现单例。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java8中的单例"><a href="#Java8中的单例" class="headerlink" title="Java8中的单例"></a>Java8中的单例</h1><p>Java8原生代码中的单例模式</p>
<h2 id="java-lang-Runtime"><a href="#java-lang-Runtime" class="headerlink" title="java.lang.Runtime"></a>java.lang.Runtime</h2><p>经典饿汉式单例，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runtime</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Runtime currentRuntime = <span class="keyword">new</span> Runtime();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title">getRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Runtime</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>唯一不同之处是省去了<strong>final</strong>关键字，final关键字保证实例不发生改变，因为只有构造方法，没有setter方法，所以不用担心被修改，可以省略。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>windows系统下调用外部程序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;notepad&quot;</span>);  <span class="comment">//打开记事本</span></span><br><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;mspaint&quot;</span>);  <span class="comment">//打开画图</span></span><br><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;explorer&quot;</span>);  <span class="comment">//打开资源管理器</span></span><br><span class="line">Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);  <span class="comment">//打开计算器</span></span><br></pre></td></tr></table></figure>


<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">维基百科</a></li>
<li><a href="https://stackoverflow.com/questions/13870491/is-the-final-keyword-necessary-in-the-java-singleton-class">stackoverflow</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-原型模式</title>
    <url>/2019/08/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>原型模式</strong>（Prototype Pattern）属于<strong>创建型模式</strong>，通过<strong>复制</strong>已经存在的实例返回新实例。</p>
<span id="more"></span>

<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>如果通过<strong>new</strong>新建对象<strong>耗时长</strong>或<strong>复杂度高</strong>，应该考虑使用<strong>原型模式</strong></p>
<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.png" alt=""><br>可以注意到涉及到了三个角色，<strong>Prototype</strong>（抽象原型类）、<strong>ConcretePrototype</strong>（具体原型类）、<strong>Client</strong>（客户端）</p>
<h2 id="抽象原型类"><a href="#抽象原型类" class="headerlink" title="抽象原型类"></a>抽象原型类</h2><p>Prototype，即抽象原型类。是所有具体原型类的父类，可以是接口、抽象类，或者具体的类，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cookie</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Cookie) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="具体原型类"><a href="#具体原型类" class="headerlink" title="具体原型类"></a>具体原型类</h2><p>ConcretePrototype， 即具体原型类。重写生成新实例的方法，实例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoconutCookie</span> <span class="keyword">extends</span> <span class="title">Cookie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String category = <span class="string">&quot;coconut&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (CoconutCookie) <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="客户类"><a href="#客户类" class="headerlink" title="客户类"></a>客户类</h2><p>使用复制实例的方法生成新的实例，用户可以根据需要选择具体原型类，具有较好的可扩展性，实例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> CoconutCookie();</span><br><span class="line">        CoconutCookie coconutCookie = (CoconutCookie)cookie.clone();</span><br><span class="line">        System.out.println(coconutCookie.category);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="深浅克隆"><a href="#深浅克隆" class="headerlink" title="深浅克隆"></a>深浅克隆</h1><ul>
<li>浅克隆（shallow clone）复制一个对象，但对象内部的属性被共享，指向相同的引用。</li>
<li>深克隆（deep Clone）复制一个对象，包括内部属性都重新创建。</li>
<li>上文调用的<code>super.clone();</code>就是浅克隆。</li>
<li>一般通过重写clone方法实现深克隆。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F">维基百科</a></li>
<li><a href="https://stackoverflow.com/questions/19176177/what-is-better-shallow-or-deep-cloning">stackoverflow</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-命令模式</title>
    <url>/2019/06/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>命令模式</strong>（Command pattern），属于<strong>行为型模式</strong>，将请求封装为对象，从而对请求进行排队和撤销等操作。</p>
<span id="more"></span>


<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.png" alt=""><br>涉及到了五个角色，<strong>Command</strong>（命令）、<strong>Invoker</strong>（调用者）、<strong>ConcreteCommand</strong>（具体命令）、<strong>Receiver</strong>（接收者）、<strong>Client</strong>（客户端）</p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>Command，接口，经常只含有一个执行方法，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接收者"><a href="#接收者" class="headerlink" title="接收者"></a>接收者</h3><p>Receiver，包含具体的业务逻辑，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">turnOn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The light is on&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">turnOff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;The light is off&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体命令"><a href="#具体命令" class="headerlink" title="具体命令"></a>具体命令</h3><p>ConcreteCommand，实现各种请求的具体命令，定义以下两个实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Light light;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwitchOnCommand</span><span class="params">(Light light)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.turnOn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Light light;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwitchOffCommand</span><span class="params">(Light light)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.turnOff();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用者"><a href="#调用者" class="headerlink" title="调用者"></a>调用者</h3><p>Invoker，用于初始化请求，包含对命令的引用，但不包括对命令的创建，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Switch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command switchOnCommand;</span><br><span class="line">    <span class="keyword">private</span> Command switchOffCommand;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setOnCommand</span><span class="params">(Command switchOnCommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.switchOnCommand = switchOnCommand;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setOffCommand</span><span class="params">(Command switchOffCommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.switchOffCommand = switchOffCommand;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        switchOnCommand.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        switchOffCommand.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>创建和配置具体的命令对象，传递所有的请求参数至命令的构造器中，生成的命令对象可能与一或多个调用者相关联，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Light light = <span class="keyword">new</span> Light();</span><br><span class="line">        Command onCommand = <span class="keyword">new</span> SwitchOnCommand(light);</span><br><span class="line">        Command offCommand = <span class="keyword">new</span> SwitchOffCommand(light);</span><br><span class="line">        Switch mySwitch = <span class="keyword">new</span> Switch();</span><br><span class="line">        mySwitch.setOnCommand(onCommand);</span><br><span class="line">        mySwitch.setOffCommand(offCommand);</span><br><span class="line"></span><br><span class="line">        mySwitch.on();</span><br><span class="line">        mySwitch.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The light is on</span><br><span class="line">The light is off</span><br></pre></td></tr></table></figure>



<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/command">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/Command_pattern">维基百科</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-备忘录模式</title>
    <url>/2019/09/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>备忘录模式</strong>（Memento pattern），属于<strong>行为型模式</strong>，不破坏封闭的前提下，捕获一个对象的内部状态，并在对象之外保存，可以在适当的时候恢复。</p>
<span id="more"></span>


<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>涉及到了三个角色，<strong>Originator</strong>（发起者）、<strong>Memento</strong>（备忘录）、<strong>Caretaker</strong>（管理者）</p>
<h3 id="发起者"><a href="#发起者" class="headerlink" title="发起者"></a>发起者</h3><p>Originator，用于创建和使用备忘录，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">saveStateToMemento</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getStateFromMemento</span><span class="params">(Memento Memento)</span></span>&#123;</span><br><span class="line">        state = Memento.getState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h3><p>Memento，用于存储发起者的内部状态，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String state)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="管理者"><a href="#管理者" class="headerlink" title="管理者"></a>管理者</h3><p>Caretaker，负责管理备忘录，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以存储list<Memento>，多个快照。</p>
<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>对如上代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Originator originator = <span class="keyword">new</span> Originator();</span><br><span class="line">        Caretaker caretaker = <span class="keyword">new</span> Caretaker();</span><br><span class="line">        originator.setState(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">        caretaker.setMemento(originator.saveStateToMemento());</span><br><span class="line">        originator.setState(<span class="string">&quot;second&quot;</span>);</span><br><span class="line">        System.out.println(originator.getState());</span><br><span class="line">        originator.getStateFromMemento(caretaker.getMemento());</span><br><span class="line">        System.out.println(originator.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">second</span><br><span class="line">first</span><br></pre></td></tr></table></figure>


<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/memento">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://segmentfault.com/a/1190000015189132">segmentfault.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-外观模式（门面模式）</title>
    <url>/2019/08/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F%EF%BC%88%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F%EF%BC%89/</url>
    <content><![CDATA[<p><strong>外观模式</strong>（Facade Pattern）也叫做<strong>门面模式</strong>，属于<strong>结构型模式</strong>，为子系统提供统一的接口，使<strong>子系统更容易使用</strong>。</p>
<span id="more"></span>

<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>子系统逻辑复杂，使用繁琐，耦合性强。如对各种复杂的日志库提供统一的日志门面SLF4J。</p>
<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><ul>
<li>简化：对复杂的子系统进行简化</li>
<li>限制：限制了子系统中的一些方法，防止发生意想不到的错误</li>
</ul>
<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.png" alt=""><br>可以注意到涉及到了三个角色</p>
<ul>
<li><strong>Facade</strong>：为子系统提供一个统一的对外接口</li>
<li><strong>Clients</strong>：通过对外接口对子系统进行访问</li>
<li><strong>Packages</strong>：通过对外接口访问的子系统</li>
</ul>
<h2 id="子系统"><a href="#子系统" class="headerlink" title="子系统"></a>子系统</h2><p>子系统不是一个单独的类，是类的集合，不能感知门面的存在，对客户端隐藏。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPU</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">freeze</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;复杂的冷却&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;复杂的执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">load</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;复杂的内存载入&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Displayer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;复杂的显示器启动处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="门面"><a href="#门面" class="headerlink" title="门面"></a>门面</h2><p>门面把复杂且巨大的子系统封装，只提供简单的接口暴露给客户端。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CPU cpu = <span class="keyword">new</span> CPU();</span><br><span class="line">        cpu.freeze();</span><br><span class="line">        <span class="keyword">new</span> Memory().load();</span><br><span class="line">        <span class="keyword">new</span> Displayer().display();</span><br><span class="line">        cpu.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>客户端只需要调用门面类，不需要知道具体内部实现。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Computer().startComputer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/facade">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%A4%96%E8%A7%80%E6%A8%A1%E5%BC%8F">维基百科</a></li>
<li><a href="https://medium.com/@andreaspoyias/design-patterns-a-quick-guide-to-facade-pattern-16e3d2f1bfb6">medium.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-工厂方法模式</title>
    <url>/2019/08/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>工厂方法模式</strong>（Factory method pattern）属于<strong>创建型模式</strong>，使用工厂方法创建对象，不向客户端暴露具体逻辑，不指定具体的实现类。</p>
<span id="more"></span>

<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.png" alt=""><br>涉及到了四个角色，</p>
<ul>
<li><strong>Product</strong>：抽象产品</li>
<li><strong>ConcreteProduct</strong>：具体产品</li>
<li><strong>Creator</strong>：抽象工厂</li>
<li><strong>ConcreteCreator</strong>：具体工厂</li>
</ul>
<h2 id="抽象产品"><a href="#抽象产品" class="headerlink" title="抽象产品"></a>抽象产品</h2><p>Product，需要生成的抽象产品。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="具体产品"><a href="#具体产品" class="headerlink" title="具体产品"></a>具体产品</h2><p>Creator，抽象产品的实现类。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;圆形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;矩形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><p>Creator，接口或者抽象类，用来创建产品（可能含有其他功能）。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Shape <span class="title">CreateShape</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="具体工厂"><a href="#具体工厂" class="headerlink" title="具体工厂"></a>具体工厂</h2><p>ConcreteCreator，重写抽象工厂的方法来返回不同种类的产品（不一定是<code>new</code>操作）。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleFactory</span> <span class="keyword">implements</span> <span class="title">ShapeFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">CreateShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RectangleFactory</span> <span class="keyword">implements</span> <span class="title">ShapeFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">CreateShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>测试生成product对象，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ShapeFactory shapeFactory = <span class="keyword">new</span> CircleFactory();</span><br><span class="line">        Shape shape = shapeFactory.CreateShape();</span><br><span class="line">        shape.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：圆形</p>
<h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><ul>
<li>耦合性降低</li>
<li>满足单一职责</li>
<li>满足开闭原则</li>
</ul>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>具体工厂只能生成特定的具体产品</p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/factoryMethod">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/Factory_method_pattern">维基百科</a></li>
<li><a href="https://refactoring.guru/design-patterns/factory-method">refactoring.guru</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-建造者模式</title>
    <url>/2019/08/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>建造者模式</strong>（Builder Pattern）属于<strong>创建型模式</strong>，将对象的创建过程抽象出来，从而构造出不同属性的对象。</p>
<span id="more"></span>

<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul>
<li>KFC中各种食物组合</li>
<li>计算机各种硬件组合</li>
<li>房间各种家具组合</li>
</ul>
<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt=""><br>可以注意到涉及到了四个角色</p>
<ul>
<li><strong>Builder</strong>：抽象建造者</li>
<li><strong>ConcreteBuilder</strong>：具体建造者</li>
<li><strong>Product</strong>：产品</li>
<li><strong>Director</strong>：指挥者</li>
</ul>
<h2 id="产品"><a href="#产品" class="headerlink" title="产品"></a>产品</h2><p>Product，建造者模式需要生成的产品。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String CPU;</span><br><span class="line">    <span class="keyword">private</span> String memory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCPU</span><span class="params">(String CPU)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.CPU = CPU;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemory</span><span class="params">(String memory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(<span class="keyword">float</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Computer&#123;&quot;</span> + <span class="string">&quot;CPU=&#x27;&quot;</span> + CPU + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, memory=&#x27;&quot;</span> + memory + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, size=&quot;</span> + size + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="抽象建造者"><a href="#抽象建造者" class="headerlink" title="抽象建造者"></a>抽象建造者</h2><p>Builder，定义了创建产品所需要的所有步骤。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildCPU</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildMemory</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildSize</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Computer <span class="title">getComputer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="具体建造者"><a href="#具体建造者" class="headerlink" title="具体建造者"></a>具体建造者</h2><p>ConcreteBuilder，可以从抽象建造者接口实现任意数量的具体建造者。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DellComputerBuilder</span> <span class="keyword">implements</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DellComputerBuilder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer = <span class="keyword">new</span> Computer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildCPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setCPU(<span class="string">&quot;i7-8750&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setMemory(<span class="string">&quot;8&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setSize((<span class="keyword">float</span>) <span class="number">15.6</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">getComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第二个具体建造者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HPComputerBuilder</span> <span class="keyword">implements</span> <span class="title">ComputerBuilder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HPComputerBuilder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computer = <span class="keyword">new</span> Computer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildCPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setCPU(<span class="string">&quot;i9-9900&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildMemory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setMemory(<span class="string">&quot;16&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.setSize((<span class="keyword">float</span>) <span class="number">14</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">getComputer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="指挥者"><a href="#指挥者" class="headerlink" title="指挥者"></a>指挥者</h2><p>Director，负责生成最后的product对象。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ComputerBuilder computerBuilder;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(ComputerBuilder computerBuilder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computerBuilder = computerBuilder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeComputer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.computerBuilder.buildCPU();</span><br><span class="line">        <span class="keyword">this</span>.computerBuilder.buildMemory();</span><br><span class="line">        <span class="keyword">this</span>.computerBuilder.buildSize();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">getComputer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.computerBuilder.getComputer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>测试生成product对象，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Director director = <span class="keyword">new</span> Director(<span class="keyword">new</span> DellComputerBuilder());</span><br><span class="line">        director.makeComputer();</span><br><span class="line">        Computer computer = director.getComputer();</span><br><span class="line">        System.out.println(computer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：<code>Computer&#123;CPU=&#39;i7-8750&#39;, memory=&#39;8&#39;, size=15.6&#125;</code></p>
<h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><ul>
<li>使用时不需要知道完整的建造过程，<strong>简化使用</strong></li>
<li>具体建造者<strong>相互独立，易于扩展</strong></li>
<li>product对象总会被<strong>完整地实例化</strong></li>
</ul>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><ul>
<li>代码行数增加</li>
<li>需要对每个不同种类的产品创建单独的具体建造者</li>
</ul>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/builder">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E7%94%9F%E6%88%90%E5%99%A8%E6%A8%A1%E5%BC%8F">维基百科</a></li>
<li><a href="https://www.geeksforgeeks.org/builder-design-pattern/">geeksforgeeks.org</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-抽象工厂模式</title>
    <url>/2019/09/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>抽象工厂模式</strong>（Abstract factory pattern）属于<strong>创建型模式</strong>，通过实现抽象工厂接口，一个具体工厂可以有多种产品</p>
<span id="more"></span>

<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.png" alt=""><br>涉及到了四个角色，</p>
<ul>
<li><strong>AbstractFactory</strong>：抽象工厂</li>
<li><strong>ConcreteFactory</strong>：具体工厂</li>
<li><strong>Product</strong>：抽象产品</li>
<li><strong>ConcreteProduct</strong>：具体产品</li>
</ul>
<h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><p>AbstractFactory，含有多个产生抽象产品方法的接口。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="function">Chair <span class="title">createChair</span><span class="params">()</span> </span>;</span><br><span class="line">    <span class="function">Desk <span class="title">createDesk</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="具体工厂"><a href="#具体工厂" class="headerlink" title="具体工厂"></a>具体工厂</h2><p>ConcreteFactory，实现AbstractFactory。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryForHome</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Chair <span class="title">createChair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HomeChair();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Desk <span class="title">createDesk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HomeDesk();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryForSchool</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Chair <span class="title">createChair</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SchoolChair();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Desk <span class="title">createDesk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SchoolDesk();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="抽象产品"><a href="#抽象产品" class="headerlink" title="抽象产品"></a>抽象产品</h2><p>Product，为一组不同但相关的具体产品提供抽象。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Chair</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sitOn</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Desk</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">putSth</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="具体产品"><a href="#具体产品" class="headerlink" title="具体产品"></a>具体产品</h2><p>ConcreteProduct，抽象产品的各种实现。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeChair</span> <span class="keyword">implements</span> <span class="title">Chair</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sitOn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;chair of home&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeDesk</span> <span class="keyword">implements</span> <span class="title">Desk</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putSth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;desk of home&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchoolChair</span> <span class="keyword">implements</span> <span class="title">Chair</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sitOn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;chair of school&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchoolDesk</span> <span class="keyword">implements</span> <span class="title">Desk</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putSth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;desk of school&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>测试生成product对象，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractFactory factory = <span class="keyword">new</span> FactoryForHome();</span><br><span class="line">        Chair chair = factory.createChair();</span><br><span class="line">        chair.sitOn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：<code>chair of home</code></p>
<h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><ul>
<li>使用时不需要知道完整的建造过程，<strong>简化使用</strong></li>
<li>具体建造者<strong>相互独立，易于扩展</strong></li>
<li>product对象总会被<strong>完整地实例化</strong></li>
</ul>
<h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>需要创建很多接口和类</p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/abstractFactory">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/Abstract_factory_pattern">维基百科</a></li>
<li><a href="https://refactoring.guru/design-patterns/abstract-factory">refactoring.guru</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-桥模式</title>
    <url>/2019/09/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>桥模式</strong>（Bridge pattern），属于<strong>结构型模式</strong>。将一个巨大的类分为<strong>抽象部分</strong>和<strong>实现部分</strong>，使他们可以独立地改变。</p>
<span id="more"></span>


<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%A8%A1%E5%BC%8F.png" alt=""><br>涉及到了四个角色，<strong>Abstraction</strong>（抽象类）、<strong>RefinedAbstraction</strong>（抽象类的继承类）、<strong>Implementor</strong>（实现类）、<strong>ConcreteImplementor</strong>（具体实现类）</p>
<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>Abstraction，定义抽象接口，包含实现类的引用，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Color color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Shape</span><span class="params">(Color color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="抽象类的继承类"><a href="#抽象类的继承类" class="headerlink" title="抽象类的继承类"></a>抽象类的继承类</h2><p>RefinedAbstraction，定义实现类接口，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(Color color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(color);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        color.printColor();</span><br><span class="line">        System.out.println(<span class="string">&quot; Circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(Color color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        color.printColor();</span><br><span class="line">        System.out.print(<span class="string">&quot; Rectangle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h2><p>Implementor，声明所有具体实现类的通用接口。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printColor</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="具体实现类"><a href="#具体实现类" class="headerlink" title="具体实现类"></a>具体实现类</h2><p>ConcreteImplementor，包含所有特定平台代码。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">Color</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Red&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blue</span> <span class="keyword">implements</span> <span class="title">Color</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Blue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>对上述代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Shape redCircle = <span class="keyword">new</span> Circle(<span class="keyword">new</span> Red());</span><br><span class="line">        Shape blueRectangle = <span class="keyword">new</span> Rectangle(<span class="keyword">new</span> Blue());</span><br><span class="line">        redCircle.draw();</span><br><span class="line">        blueRectangle.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Red Circle</span><br><span class="line">Blue Rectangle</span><br></pre></td></tr></table></figure>


<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/bridge">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/Bridge_pattern">wikipedia.org</a></li>
<li><a href="https://www.tutorialspoint.com/design_pattern/bridge_pattern.htm">tutorialspoint.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-模板方法模式</title>
    <url>/2019/08/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>模板方法模式</strong>（Template method pattern）属于<strong>行为型模式</strong>，通过在方法中<strong>封装逻辑</strong>来实现复杂的算法。</p>
<span id="more"></span>

<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.png" alt=""><br>涉及到了两个角色，<strong>AbstractClass</strong>（抽象类）、<strong>ConcreteClass</strong>（实现类）</p>
<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>AbstractClass，算法的结构框架将被定义在其中，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBusinessHandeler</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OneDay</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</span><br><span class="line">        weakUp();</span><br><span class="line">        doSomething();</span><br><span class="line">        sleep();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">weakUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡醒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>execute()方法即为<strong>模板方法</strong>，定义了一系列步骤。为了防止被重写，经常被定义为<strong>final</strong></p>
<h2 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h2><p>ConcreteClass，如上基类确定了步骤，实现类即需要重写其中的抽象方法，定义以下两个实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentOneDay</span> <span class="keyword">extends</span> <span class="title">OneDay</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkerOneDay</span> <span class="keyword">extends</span> <span class="title">OneDay</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以<strong>继承</strong>的方式促进了<strong>代码重用</strong>和<strong>解耦</strong>。<br>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/templateMethod">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/Template_method_pattern">维基百科</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-状态模式</title>
    <url>/2019/09/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>状态模式</strong>（State pattern），属于<strong>行为型模式</strong>，对象内部状态发生改变的时候，其行为也发生改变。</p>
<span id="more"></span>


<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.png" alt=""><br>涉及到了三个角色，<strong>Context</strong>（上下文）、<strong>State</strong>（状态）、<strong>ConcreteState</strong>（具体状态）</p>
<h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><p>Context，包含对具体状态的引用，并将特定任务委派给它，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</span><br><span class="line">        state.handle(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>State，接口，规定抽象行为，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(TVContext context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体状态"><a href="#具体状态" class="headerlink" title="具体状态"></a>具体状态</h3><p>ConcreteState，状态特定方法实现，定义以下两个实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVStartState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(TVContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TV is turned ON&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVStopState</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(TVContext context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;TV is turned OFF&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>对如上代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TVContext context = <span class="keyword">new</span> TVContext();</span><br><span class="line">        context.setState(<span class="keyword">new</span> TVStartState());</span><br><span class="line">        context.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TV is turned ON</span><br></pre></td></tr></table></figure>

<h2 id="与策略模式比较"><a href="#与策略模式比较" class="headerlink" title="与策略模式比较"></a>与策略模式比较</h2><p>策略模式和状态模式都可以消除大量的<code>if-else</code>语句，结构也相似，但两者还是有很大差别。</p>
<ul>
<li><strong>策略模式</strong>解决算法自由切换的问题，<strong>状态模式</strong>解决因内部状态改变而引起行为改变的问题</li>
<li><strong>策略模式</strong>的算法需要平行，<strong>状态模式</strong>的对象需要能用状态和行为描述</li>
</ul>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/state">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/State_pattern">维基百科</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-策略模式</title>
    <url>/2019/08/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>策略模式</strong>（Strategy pattern），属于<strong>行为型模式</strong>，对象有某种行为，但在不同的场景中，该行为有不同的算法。</p>
<span id="more"></span>

<h1 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h1><p>使用Java代码实现基本功能</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.png" alt=""><br>涉及到了三个角色，<strong>Context</strong>（上下文）、<strong>Strategy</strong>（策略）、<strong>ConcreteStrategy</strong>（具体策略）</p>
<h3 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h3><p>Context，用来操作策略的上下文，封装对象行为，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeStrategy</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategy.doOperation(num1, num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h3><p>Strategy，接口，规定抽象行为，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体策略"><a href="#具体策略" class="headerlink" title="具体策略"></a>具体策略</h3><p>ConcreteStrategy，实现策略，定义以下两个实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationAdd</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationSubstract</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>对如上代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperationAdd());</span><br><span class="line">        System.out.println(context.executeStrategy(<span class="number">7</span>, <span class="number">2</span>));</span><br><span class="line">        context = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperationSubstract());</span><br><span class="line">        System.out.println(context.executeStrategy(<span class="number">7</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h1 id="JDK简化"><a href="#JDK简化" class="headerlink" title="JDK简化"></a>JDK简化</h1><p>使用匿名内部类可以<strong>省去具体策略</strong>，JDK8中的<strong>Lambda表达式</strong>可以可以很好的<strong>代替匿名内部类</strong>，从而有效<strong>减少代码冗余</strong></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>使用JDK8中的Lambda表达式，删除具体策略<strong>OperationAdd</strong>和<strong>OperationSubstract</strong>，在客户端测试</p>
<h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><p>在客户端实现具体策略，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context((<span class="keyword">int</span> num1, <span class="keyword">int</span> num2) -&gt; num1 + num2);</span><br><span class="line">        System.out.println(context.executeStrategy(<span class="number">7</span>, <span class="number">2</span>));</span><br><span class="line">        context = <span class="keyword">new</span> Context((<span class="keyword">int</span> num1, <span class="keyword">int</span> num2) -&gt; num1 - num2);</span><br><span class="line">        System.out.println(context.executeStrategy(<span class="number">7</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9</span><br><span class="line">5</span><br></pre></td></tr></table></figure>

<h1 id="Spring使用"><a href="#Spring使用" class="headerlink" title="Spring使用"></a>Spring使用</h1><p>根据Spring的依赖注入特性，可以通过修改<strong>配置文件</strong>（XML-based或Java-based），<strong>改变</strong>在客户端使用的<strong>策略</strong></p>
<h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><p>策略接口和具体实现类不变，修改上下文，增加配置文件，进行测试</p>
<h3 id="上下文-1"><a href="#上下文-1" class="headerlink" title="上下文"></a>上下文</h3><p>将上下文注入Spring，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num1 ,<span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num1 = num1;</span><br><span class="line">        <span class="keyword">this</span>.num2 = num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeStrategy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategy.doOperation(num1, num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置文件（Java-based）"><a href="#配置文件（Java-based）" class="headerlink" title="配置文件（Java-based）"></a>配置文件（Java-based）</h3><p>选择需要在客户端使用的策略，注入Spring，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.springStrategy&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Strategy <span class="title">strategy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OperationAdd();  <span class="comment">//在此选择具体策略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端-2"><a href="#客户端-2" class="headerlink" title="客户端"></a>客户端</h3><p>对如上代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(Config.class);</span><br><span class="line">        Context context = (Context)applicationContext.getBean(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">        context.setNum(<span class="number">7</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(context.doOperation());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure>

<h1 id="替换大量if语句"><a href="#替换大量if语句" class="headerlink" title="替换大量if语句"></a>替换大量if语句</h1><p>当代码中存在大量的<code>if，else</code>语句时，就可以考虑使用策略模式重构了</p>
<h2 id="重构前"><a href="#重构前" class="headerlink" title="重构前"></a>重构前</h2><p><code>if</code>语句复杂且难以维护，而且可能会变得更大更复杂</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(String policy)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;i&quot;</span>.equals(policy))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;身份证&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;n&quot;</span>.equals(policy))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;c&quot;</span>.equals(policy))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;银行卡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&quot;m&quot;</span>.equals(policy))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;手机号&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;其他&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><p>用简单和易于维护得代码实现</p>
<h3 id="策略-1"><a href="#策略-1" class="headerlink" title="策略"></a>策略</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">doOperation</span><span class="params">(String policy)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体策略-1"><a href="#具体策略-1" class="headerlink" title="具体策略"></a>具体策略</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdcardStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doOperation</span><span class="params">(String policy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;身份证&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doOperation</span><span class="params">(String policy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MobileStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doOperation</span><span class="params">(String policy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;手机号&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CardStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doOperation</span><span class="params">(String policy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;银行卡&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherStrategy</span> <span class="keyword">implements</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doOperation</span><span class="params">(String policy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;其他&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="工厂"><a href="#工厂" class="headerlink" title="工厂"></a>工厂</h3><p>使用工厂类帮助实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String , Strategy&gt; strategyMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        strategyMap.put(<span class="string">&quot;i&quot;</span>, <span class="keyword">new</span> IdcardStrategy());</span><br><span class="line">        strategyMap.put(<span class="string">&quot;n&quot;</span>, <span class="keyword">new</span> NameStrategy());</span><br><span class="line">        strategyMap.put(<span class="string">&quot;c&quot;</span>, <span class="keyword">new</span> CardStrategy());</span><br><span class="line">        strategyMap.put(<span class="string">&quot;m&quot;</span>, <span class="keyword">new</span> MobileStrategy());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;Strategy&gt; <span class="title">creator</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(strategyMap.get(type));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="上下文-2"><a href="#上下文-2" class="headerlink" title="上下文"></a>上下文</h3><p>此时可以将代码改为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doOperation</span><span class="params">(String policy)</span></span>&#123;</span><br><span class="line">    Strategy strategy = <span class="keyword">new</span> StrategyFactory().creator(policy).orElse(<span class="keyword">new</span> OtherStrategy());</span><br><span class="line">    <span class="keyword">return</span> strategy.doOperation(policy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>策略模式不需要<code>if，else</code>语句，便于维护</li>
<li>良好的扩展性，且新增具体策略时，不需要修改上下文和抽象策略</li>
<li>客户端需要知道所有的具体策略，来自己决定使用哪个策略</li>
</ul>
<p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/strategy">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F">维基百科</a></li>
<li><a href="https://www.baeldung.com/java-strategy-pattern">baeldung.com</a></li>
<li><a href="https://www.baeldung.com/java-replace-if-statements">baeldung.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-组合模式</title>
    <url>/2019/09/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>组合模式</strong>（Composite pattern），属于<strong>结构型模式</strong>，将对象组合成为树状结构，可以像单独对象一样处理树状结构。</p>
<span id="more"></span>


<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.png" alt=""><br>涉及到了三个角色，<strong>Component</strong>（组件）、<strong>Leaf</strong>（叶子结点）、<strong>Composite</strong>（组合）</p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>Component，组件接口包含树中所有元素的公共操作，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printDepartmentName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="叶子结点"><a href="#叶子结点" class="headerlink" title="叶子结点"></a>叶子结点</h2><p>Leaf，组件接口方法的实现，也是真正完成工作的结点，即不包括对其他结点的引用。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinancialDepartment</span> <span class="keyword">implements</span> <span class="title">Department</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FinancialDepartment</span><span class="params">(<span class="keyword">int</span> id, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printDepartmentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(id + <span class="string">&quot; &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SalesDepartment</span> <span class="keyword">implements</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SalesDepartment</span><span class="params">(<span class="keyword">int</span> id, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printDepartmentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(id + <span class="string">&quot; &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><p>Composite，实现组件接口方法，并可以对元素进行管理。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ManagerDepartment</span> <span class="keyword">implements</span> <span class="title">Department</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Department&gt; childDepartments;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ManagerDepartment</span><span class="params">(<span class="keyword">int</span> id, String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.childDepartments = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printDepartmentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        childDepartments.forEach(Department::printDepartmentName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDepartment</span><span class="params">(Department department)</span> </span>&#123;</span><br><span class="line">        childDepartments.add(department);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeDepartment</span><span class="params">(Department department)</span> </span>&#123;</span><br><span class="line">        childDepartments.remove(department);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Department&gt; <span class="title">getChild</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> childDepartments;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JDK1.8后引入<strong>forEach</strong>方法<br>before：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Department department : childDepartments)&#123;</span><br><span class="line">    department.printDepartmentName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>after：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">childDepartments.forEach(Department::printDepartmentName);</span><br></pre></td></tr></table></figure>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>对上述代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ManagerDepartment root = <span class="keyword">new</span> ManagerDepartment(<span class="number">0</span>, <span class="string">&quot;北京总公司&quot;</span>);</span><br><span class="line">        root.addDepartment(<span class="keyword">new</span> SalesDepartment(<span class="number">1</span>, <span class="string">&quot;北京销售部&quot;</span>));</span><br><span class="line">        root.addDepartment(<span class="keyword">new</span> FinancialDepartment(<span class="number">2</span>, <span class="string">&quot;北京财务部&quot;</span>));</span><br><span class="line"></span><br><span class="line">        ManagerDepartment shanghai = <span class="keyword">new</span> ManagerDepartment(<span class="number">0</span>, <span class="string">&quot;上海分公司&quot;</span>);</span><br><span class="line">        shanghai.addDepartment(<span class="keyword">new</span> SalesDepartment(<span class="number">1</span>, <span class="string">&quot;上海销售部&quot;</span>));</span><br><span class="line">        shanghai.addDepartment(<span class="keyword">new</span> FinancialDepartment(<span class="number">2</span>, <span class="string">&quot;上海财务部&quot;</span>));</span><br><span class="line">        root.addDepartment(shanghai);</span><br><span class="line"></span><br><span class="line">        ManagerDepartment xian = <span class="keyword">new</span> ManagerDepartment(<span class="number">0</span>, <span class="string">&quot;西安分公司&quot;</span>);</span><br><span class="line">        xian.addDepartment(<span class="keyword">new</span> SalesDepartment(<span class="number">1</span>, <span class="string">&quot;西安销售部&quot;</span>));</span><br><span class="line">        xian.addDepartment(<span class="keyword">new</span> FinancialDepartment(<span class="number">2</span>, <span class="string">&quot;西安财务部&quot;</span>));</span><br><span class="line">        root.addDepartment(xian);</span><br><span class="line"></span><br><span class="line">        root.printDepartmentName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/composite">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/Composite_pattern">wikipedia.org</a></li>
<li><a href="https://www.baeldung.com/java-composite-pattern">baeldung.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-装饰模式</title>
    <url>/2019/09/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>装饰模式</strong>（Decorator pattern），属于<strong>结构型模式</strong>，在不改变原有类的同时，向其添加新的行为。</p>
<span id="more"></span>


<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt=""><br>涉及到了四个角色，<strong>Component</strong>（组件）、<strong>ConcreteComponent **（具体组件）、</strong>Decorator<strong>（装饰）、</strong>ConcreteDecorator**（具体装饰）</p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>Component，具体组件和装饰的公共接口，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">fire</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="具体组件"><a href="#具体组件" class="headerlink" title="具体组件"></a>具体组件</h2><p>ConcreteComponent，定义了基本行为的类，可以被具体装饰修改。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">M4</span> <span class="keyword">implements</span> <span class="title">Weapon</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;fire&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="装饰"><a href="#装饰" class="headerlink" title="装饰"></a>装饰</h2><p>Decorator，包含组件接口字段，委托所有对象操作。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Accessory</span> <span class="keyword">implements</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Weapon weapon;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Accessory</span><span class="params">(Weapon weapon)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weapon.fire();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="具体装饰"><a href="#具体装饰" class="headerlink" title="具体装饰"></a>具体装饰</h2><p>ConcreteDecorator，定义了可以动态插入组件的行为。示例如下（可以创建多个）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Muffler</span> <span class="keyword">extends</span> <span class="title">Accessory</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Muffler</span><span class="params">(Weapon weapon)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(weapon);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fire</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.fire() + <span class="string">&quot; with silently&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>对如上代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Weapon weapon = <span class="keyword">new</span> Muffler(<span class="keyword">new</span> M4());</span><br><span class="line">        System.out.println(weapon.fire());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fire with silently</span><br></pre></td></tr></table></figure>

<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/decorator">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/Decorator_pattern">维基百科</a></li>
<li><a href="https://sourcemaking.com/design_patterns/decorator">sourcemaking.com</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-观察者模式（发布/订阅模式）</title>
    <url>/2019/08/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>观察者模式</strong>（Observer pattern）也叫<strong>发布/订阅模式</strong>（Publish–subscribe pattern），属于<strong>行为型模式</strong>，一个被观察者对应多个观察者，且在自身状态发生更改时会自动通知观察者。</p>
<span id="more"></span>

<h1 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h1><p>使用Java代码实现基本功能</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt=""><br>涉及到了三个角色，<strong>Subject</strong>（被观察者）、<strong>Observer</strong>（抽象观察者）、<strong>ConcreteObserver</strong>（具体观察者）</p>
<h3 id="被观察者"><a href="#被观察者" class="headerlink" title="被观察者"></a>被观察者</h3><p>Subject，用<strong>list</strong>存放观察者，<strong>attach</strong>添加观察着，<strong>detach</strong>观察被观察者，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        notifyAllObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        observers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抽象观察者"><a href="#抽象观察者" class="headerlink" title="抽象观察者"></a>抽象观察者</h3><p>Observer，接口或抽象类，当被观察者发生变化时，定义方法被触发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Subject sub;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体观察者"><a href="#具体观察者" class="headerlink" title="具体观察者"></a>具体观察者</h3><p>ConcreteObserver，接口或抽象类的具体实现，定义以下两个实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverA</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObserverA</span><span class="params">(Subject sub)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sub = sub;</span><br><span class="line">        <span class="keyword">this</span>.sub.attach(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AA你好，番剧xx第&quot;</span>+ sub.getState() +<span class="string">&quot;话已更新&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverB</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObserverB</span><span class="params">(Subject sub)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sub = sub;</span><br><span class="line">        <span class="keyword">this</span>.sub.attach(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BB你好，番剧xx第&quot;</span>+ sub.getState() +<span class="string">&quot;话已更新&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>对如上代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject sub = <span class="keyword">new</span> Subject();</span><br><span class="line">        Observer observer = <span class="keyword">new</span> ObserverA(sub);</span><br><span class="line">        <span class="keyword">new</span> ObserverB(sub);</span><br><span class="line">        sub.setState(<span class="number">7</span>);</span><br><span class="line">        sub.detach(observer);</span><br><span class="line">        sub.setState(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AA你好，番剧xx第7话已更新</span><br><span class="line">BB你好，番剧xx第7话已更新</span><br><span class="line">BB你好，番剧xx第8话已更新</span><br></pre></td></tr></table></figure>

<h1 id="JDK实现"><a href="#JDK实现" class="headerlink" title="JDK实现"></a>JDK实现</h1><p>以JDK8为例，<code>java.util</code>包中有<code>java.util.Observer</code>接口，和<code>java.util.Observable</code>类，可以用来帮助构建观察者模式。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>利用JDK中的工具类，实现观察者模式</p>
<h3 id="被观察者-1"><a href="#被观察者-1" class="headerlink" title="被观察者"></a>被观察者</h3><p>继承<code>java.util.Observable</code>，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        setChanged();</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体观察者-1"><a href="#具体观察者-1" class="headerlink" title="具体观察者"></a>具体观察者</h3><p>实现抽象观察者<code>java.util.Observer</code>，定义以下两个实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverA</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObserverA</span><span class="params">(Observable ob)</span></span>&#123;</span><br><span class="line">        ob.addObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        Subject sub = (Subject) o;</span><br><span class="line">        System.out.println(<span class="string">&quot;AA你好，番剧xx第&quot;</span>+ sub.getState() +<span class="string">&quot;话已更新&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverB</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObserverB</span><span class="params">(Observable ob)</span></span>&#123;</span><br><span class="line">        ob.addObserver(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        Subject sub = (Subject) o;</span><br><span class="line">        System.out.println(<span class="string">&quot;BB你好，番剧xx第&quot;</span>+ sub.getState() +<span class="string">&quot;话已更新&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><p>对如上代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject sub = <span class="keyword">new</span> Subject();</span><br><span class="line">        Observer observer = <span class="keyword">new</span> ObserverA(sub);</span><br><span class="line">        <span class="keyword">new</span> ObserverB(sub);</span><br><span class="line">        sub.setState(<span class="number">7</span>);</span><br><span class="line">        sub.deleteObserver(observer);</span><br><span class="line">        sub.setState(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Observable</code>内部实现为vector且倒序输出，output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BB你好，番剧xx第7话已更新</span><br><span class="line">AA你好，番剧xx第7话已更新</span><br><span class="line">BB你好，番剧xx第8话已更新</span><br></pre></td></tr></table></figure>

<h1 id="Spring中的事件处理"><a href="#Spring中的事件处理" class="headerlink" title="Spring中的事件处理"></a>Spring中的事件处理</h1><p><strong>ApplicationContext</strong>中的事件处理通过<strong>ApplicationEvent</strong>类和<strong>ApplicationListener</strong>接口实现，所有实现<strong>ApplicationListener</strong>接口的<strong>bean</strong>都会被部署到<strong>context</strong>中，每次将<strong>ApplicationEvent</strong>发布到<strong>ApplicationContext</strong>时，这个<strong>bean</strong>就会被通知。这就是标准的<strong>观察者模式</strong>。</p>
<h2 id="内置事件"><a href="#内置事件" class="headerlink" title="内置事件"></a>内置事件</h2><p>Spring提供了一些标准的事件</p>
<ul>
<li>ContextRefreshedEvent</li>
<li>ContextStartedEvent</li>
<li>ContextStoppedEvent</li>
<li>ContextClosedEvent</li>
<li>RequestHandledEvent</li>
</ul>
<h2 id="自定义事件实现"><a href="#自定义事件实现" class="headerlink" title="自定义事件实现"></a>自定义事件实现</h2><p>需要三个角色，<strong>事件</strong>（相当于被观察者），<strong>监听器</strong>（相当于观察者），<strong>发布者</strong>（用于触发事件的对外接口）</p>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>继承<code>org.springframework.context.ApplicationEvent</code>类，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSpringEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomSpringEvent</span><span class="params">(Object source, <span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><p>实现<code>org.springframework.context.ApplicationListener</code>接口，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSpringEventListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">CustomSpringEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(CustomSpringEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AA你好，番剧xx第&quot;</span>+ event.getState() +<span class="string">&quot;话已更新&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="发布者"><a href="#发布者" class="headerlink" title="发布者"></a>发布者</h3><p>实现<code>org.springframework.context.ApplicationEventPublisherAware</code>接口，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSpringEventPublisher</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doStuffAndPublishAnEvent</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;新消息&quot;</span>);</span><br><span class="line">        CustomSpringEvent customSpringEvent = <span class="keyword">new</span> CustomSpringEvent(<span class="keyword">this</span>, message);</span><br><span class="line">        applicationEventPublisher.publishEvent(customSpringEvent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationEventPublisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>将监听器和发布者注入容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.springObserver&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端-2"><a href="#客户端-2" class="headerlink" title="客户端"></a>客户端</h3><p>对如上代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(Config.class);</span><br><span class="line">        CustomSpringEventPublisher customSpringEventPublisher = (CustomSpringEventPublisher)applicationContext.getBean(<span class="string">&quot;customSpringEventPublisher&quot;</span>);</span><br><span class="line">        customSpringEventPublisher.doStuffAndPublishAnEvent(<span class="number">123</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">新消息</span><br><span class="line">AA你好，番剧xx第123话已更新</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>观察者模式多用于实现<strong>订阅功能</strong>的场景，在被观察者发生改变的时候，通知给观察者。<br>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/observer">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F">维基百科</a></li>
<li><a href="https://docs.spring.io/spring/docs/5.1.9.RELEASE/spring-framework-reference/core.html#context-functionality-events">Spring Reference</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-责任链模式</title>
    <url>/2019/09/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>责任链模式</strong>（Chain-of-responsibility），属于<strong>行为型模式</strong>，包含一个请求和一系列处理这个请求的方法</p>
<span id="more"></span>


<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>涉及到了三个角色，<strong>Chain</strong>（处理者）、<strong>ConcreteChain</strong>（具体处理者）、<strong>Client</strong>（客户端）</p>
<h3 id="处理者"><a href="#处理者" class="headerlink" title="处理者"></a>处理者</h3><p>Chain，具体处理者的公共接口，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Chain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Chain nextInChain)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> request)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体处理者"><a href="#具体处理者" class="headerlink" title="具体处理者"></a>具体处理者</h3><p>ConcreteChain，处理请求或传递请求或处理请求后传递，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NegativeProcessor</span> <span class="keyword">implements</span> <span class="title">Chain</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Chain nextInChain;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Chain nextInChain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextInChain = nextInChain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(request &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;负数&quot;</span> + request);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            nextInChain.process(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PositiveProcessor</span> <span class="keyword">implements</span> <span class="title">Chain</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Chain nextInChain;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(Chain nextInChain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextInChain = nextInChain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span> request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(request &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正数&quot;</span> + request);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            nextInChain.process(request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>


<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>可以对链进行动态组合，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Chain c1 = <span class="keyword">new</span> NegativeProcessor();</span><br><span class="line">        Chain c2 = <span class="keyword">new</span> PositiveProcessor();</span><br><span class="line">        Chain c3 = <span class="keyword">new</span> ZeroProcessor();</span><br><span class="line">        c1.setNext(c2);</span><br><span class="line">        c2.setNext(c3);</span><br><span class="line"></span><br><span class="line">        c1.process(<span class="number">7</span>);</span><br><span class="line">        c1.process(<span class="number">0</span>);</span><br><span class="line">        c1.process(-<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正数7</span><br><span class="line">零0</span><br><span class="line">负数-3</span><br></pre></td></tr></table></figure>


<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/chainOfResponsibility">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://www.geeksforgeeks.org/chain-responsibility-design-pattern/">geeksforgeeks.org</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-迭代器模式</title>
    <url>/2019/10/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>迭代器模式</strong>（Iterator pattern），属于<strong>行为型模式</strong>，在隐藏内部对象底层实现的同时，访问和遍历其元素</p>
<span id="more"></span>


<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.png" alt=""><br>涉及到了四个角色，<strong>Iterator</strong>（迭代器）、<strong>ConcreteIterator</strong>（具体迭代器）、<strong>Aggregate</strong>（容器）、<strong>ConcreteAggregate</strong>（具体容器）</p>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>Iterator，迭代器接口声明了遍历集合的基本操作，是否存在下一个元素，获取下一个元素，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体迭代器"><a href="#具体迭代器" class="headerlink" title="具体迭代器"></a>具体迭代器</h3><p>ConcreteIterator，实现了具体遍历集合的方法，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StoreIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    StoreIterator(String[] books)&#123;</span><br><span class="line">        <span class="keyword">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> books[position++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> position != books.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>Aggregate，容器接口声明了返回类型必须是<strong>Iterator</strong>的方法，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体容器"><a href="#具体容器" class="headerlink" title="具体容器"></a>具体容器</h3><p>ConcreteAggregate，存储元素，内部实现可以是数组、队列、栈、集合、树等数据结构，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteAggregate</span> <span class="keyword">implements</span> <span class="title">Aggregate</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    ConcreteAggregate(String[] books) &#123;</span><br><span class="line">        <span class="keyword">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StoreIterator(books);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>对以上代码进行测试，示例如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String[] books = new String[3];</span><br><span class="line">        books[0] = &quot;三国&quot;;</span><br><span class="line">        books[1] = &quot;水浒&quot;;</span><br><span class="line">        books[2] = &quot;西游记&quot;;</span><br><span class="line">        Aggregate&lt;String&gt; aggregate = new ConcreteAggregate(books);</span><br><span class="line">        Iterator&lt;String&gt; iterable = aggregate.iterator();</span><br><span class="line">        while(iterable.hasNext())&#123;</span><br><span class="line">            System.out.println(iterable.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三国</span><br><span class="line">水浒</span><br><span class="line">西游记</span><br></pre></td></tr></table></figure>


<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/iterator">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://refactoring.guru/design-patterns/iterator">refactoring.guru</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式-适配器模式</title>
    <url>/2019/09/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>适配器模式</strong>（Adapter pattern），属于<strong>结构型模式</strong>，可以把<strong>源类</strong>通过<strong>适配器</strong>转化为<strong>目标接口</strong>的实现，使源类可以正常使用。</p>
<span id="more"></span>


<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><img src="/img/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.png" alt=""><br>涉及到了三个角色，<strong>target</strong>（目标接口）、<strong>adaptee</strong>（源类）、<strong>adapter</strong>（适配器）</p>
<h2 id="目标接口"><a href="#目标接口" class="headerlink" title="目标接口"></a>目标接口</h2><p>target，目标接口中包含需要使用的方法，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Yuan</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">useInChina</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="源类"><a href="#源类" class="headerlink" title="源类"></a>源类</h2><p>adaptee，有用的类，但是客户端不能直接使用。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dollar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dollar</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h2><p>adapter，目标接口的实现，同时包含着源类，用于连接转化目标接口和源类。示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">Yuan</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Dollar dollar;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(Dollar dollar)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dollar = dollar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useInChina</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;能在中国消费&quot;</span> + dollar.getValue()*<span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>对如上代码测试，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Yuan yuan = <span class="keyword">new</span> Adapter(<span class="keyword">new</span> Dollar(<span class="number">5</span>));</span><br><span class="line">        yuan.useInChina();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">能在中国消费35</span><br></pre></td></tr></table></figure>

<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>完整代码已上传，<a href="https://github.com/yuan0824/DesignPattern/tree/master/adapter">项目地址</a>：<a href="https://github.com/yuan0824/DesignPattern">https://github.com/yuan0824/DesignPattern</a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://en.wikipedia.org/wiki/Adapter_pattern">维基百科</a></li>
<li><a href="https://refactoring.guru/design-patterns/adapter">refactoring.guru</a></li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>jquery-confirm</title>
    <url>/2021/06/08/jquery-confirm/</url>
    <content><![CDATA[<p>jquery-confirm是一个常用的Jquery插件，用于警告框、确认框和对话框等弹出框，并为其提供了自动关闭，主题，动画等特性。</p>
<span id="more"></span>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>一些常用的使用如下：</p>
<h2 id="alert"><a href="#alert" class="headerlink" title="$.alert"></a>$.alert</h2><p>如果没有指定按钮，默认有一个ok按钮。</p>
<h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.alert(&#123;</span><br><span class="line">    title: &#x27;Alert!&#x27;,</span><br><span class="line">    content: &#x27;Simple alert!&#x27;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="confirm"><a href="#confirm" class="headerlink" title="$.confirm"></a>$.confirm</h2><p>如果没有指定按钮，默认有一个ok按钮和一个取消按钮。</p>
<h2 id="dialog"><a href="#dialog" class="headerlink" title="$.dialog"></a>$.dialog</h2><p>没有按钮，显示地有个关闭符号。</p>
<h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><p>一些常用的选项如下：</p>
<ul>
<li>title：对话框的标题。</li>
<li>type：对话框颜色。</li>
<li>content：对话框的内容。</li>
<li>icon：标题前面的符号。</li>
<li>autoClose：自动关闭，默认false，开启需要指定时间。</li>
<li>closeIcon：关闭图标，默认是null。</li>
</ul>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>只是一些基础使用，更多使用请查看官网。</p>
<h2 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h2><p><a href="http://craftpip.github.io/jquery-confirm">craftpip.github.io/jquery-confirm</a></p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>端口占用</title>
    <url>/2021/06/29/%E6%9F%A5%E7%9C%8B%E7%AB%AF%E5%8F%A3/</url>
    <content><![CDATA[<p>端口被占用的常用解决方法</p>
<span id="more"></span>   

<h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>查看8080端口对应的进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ano |findstr 8080</span><br></pre></td></tr></table></figure>


<p>强制删除进程ID是5732的进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">taskkill /f /PID 5732</span><br></pre></td></tr></table></figure>


<h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><p>查看8080端口对应的进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 8080</span><br></pre></td></tr></table></figure>


<p>强制删除进程ID是1868的进程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill -9 1868</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
